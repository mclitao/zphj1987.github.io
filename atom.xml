<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[zphj1987'Blog]]></title>
  <subtitle><![CDATA[止于至善]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.zphj1987.com/"/>
  <updated>2018-01-16T15:45:03.002Z</updated>
  <id>http://www.zphj1987.com/</id>
  
  <author>
    <name><![CDATA[zphj1987]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[定位一个网络问题引起的ceph异常]]></title>
    <link href="http://www.zphj1987.com/2018/01/16/catch-a-problem-with-network-in-ceph/"/>
    <id>http://www.zphj1987.com/2018/01/16/catch-a-problem-with-network-in-ceph/</id>
    <published>2018-01-16T15:10:59.000Z</published>
    <updated>2018-01-16T15:45:03.002Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/ne.png" alt="network"><br></center>


<h2 id="前言">前言</h2><p>有一个ceph环境出现了异常，状态就是恢复异常的慢，但是所有数据又都在走，只是非常的慢，本篇将记录探测出问题的过程，以便以后处理类似的问题有个思路<br><a id="more"></a></p>
<h2 id="处理过程">处理过程</h2><p>问题的现象是恢复的很慢，但是除此以外并没有其它的异常，通过iostat监控磁盘，也没有出现异常的100%的情况，暂时排除了是osd底层慢的问题</p>
<h3 id="检测整体写入的速度">检测整体写入的速度</h3><p>通过rados bench写入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rados -p rbd bench <span class="number">5</span> write</span><br></pre></td></tr></table></figure></p>
<p>刚开始写入的时候没问题，但是写入了以后不久就会出现一只是0的情况，可以判断在写入某些对象的时候出现了异常</p>
<p>本地生成一些文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">seq <span class="number">0</span> <span class="number">30</span>|xargs -i dd <span class="keyword">if</span>=/dev/zero of=benchmarkzp&#123;&#125; bs=<span class="number">4</span>M count=<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>通过rados put 命令把对象put进去<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> `ls ./`;<span class="keyword">do</span> time rados -p rbd put <span class="variable">$a</span> <span class="variable">$a</span>;<span class="built_in">echo</span> <span class="variable">$a</span>;ceph osd map rbd <span class="variable">$a</span>;<span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>得到的结果里面会有部分是好的，部分是非常长的时间，对结果进行过滤，分为bad 和good</p>
<p>开始怀疑会不会是固定的盘符出了问题，首先把磁盘组合分出来，完全没问题的磁盘全部排除，结果最后都排除完了，所以磁盘本省是没问题的</p>
<h3 id="根据pg的osd组合进行主机分类">根据pg的osd组合进行主机分类</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">4</span>  ok</span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>   <span class="number">2</span>  bad</span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>   <span class="number">1</span> ok</span><br><span class="line"><span class="number">3</span>  <span class="number">1</span> <span class="number">2</span>   bad</span><br><span class="line"><span class="number">3</span>  <span class="number">4</span>  <span class="number">2</span>  bad</span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<p>上面的编号是写入对象所在的pg对应的osd所在的主机，严格按照顺序写入，第一个主机为发送数据方，第二个和第三个为接收数据方，并且使用了cluster network</p>
<p>通过上面的结果发现了从3往2进行发送副本数据的时候出现了问题，然后去主机上排查网络</p>
<p>在主机2上面做iperf -s<br>在主机3上面做iperf -c host2然后就发现了网络异常了</p>
<p>最终还是定位在了网络上面</p>
<p>已经在好几个环境上面发现没装可以监控实时网络流量dstat工具或者ifstat的动态监控，做操作的时候监控下网络，可以发现一些异常</p>
<h2 id="总结">总结</h2><p>这个环境在最开始的时候就怀疑是网络可能有问题，但是没有去进行全部服务器的网络的检测，这个在出现一些奇奇怪怪的异常的时候，还是可能出现在网络上面，特别是这种坏掉又不是完全坏掉，只是掉速的情况，通过集群的一些内部告警还没法完全体现出来，而主机很多的时候，又没有多少人愿意一个个的去检测，就容易出现这种疏漏了</p>
<p>在做一个ceph的管理平台的时候，对整个集群做全员对等网络带宽测试还是很有必要的，如果有一天我来设计管理平台，一定会加入这个功能进去</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2018-01-16</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/ne.png" alt="network"><br></center>


<h2 id="前言">前言</h2><p>有一个ceph环境出现了异常，状态就是恢复异常的慢，但是所有数据又都在走，只是非常的慢，本篇将记录探测出问题的过程，以便以后处理类似的问题有个思路<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CTDB使用rados object作为lock file]]></title>
    <link href="http://www.zphj1987.com/2018/01/06/CTDB-use-rados-object-as-lock-file/"/>
    <id>http://www.zphj1987.com/2018/01/06/CTDB-use-rados-object-as-lock-file/</id>
    <published>2018-01-06T15:29:59.000Z</published>
    <updated>2018-01-06T16:06:18.867Z</updated>
    <content type="html"><![CDATA[<p><center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/object.jpg" alt="object"><br></center></p>
<h2 id="前言">前言</h2><p>服务器的服务做HA有很多种方式，其中有一种就是是用CTDB，之前这个是独立的软件来做HA的，现在已经跟着SAMBA主线里面了，也就是跟着samba发行包一起发行</p>
<p>之前CTDB的模式是需要有一个共享文件系统，并且在这个共享文件系统里面所有的节点都去访问同一个文件，会有一个Master会获得这个文件的锁</p>
<p>在cephfs的使用场景中可以用cephfs的目录作为这个锁文件的路径，这个有个问题就是一旦有一个节点down掉的时候，可能客户端也会卡住目录，这个目录访问会被卡住，文件锁在其他机器无法获取到，需要等到这个锁超时以后，其它节点才能获得到锁，这个切换的周期就会长一点了</p>
<p>CTDB在最近的版本当中加入了cluster mutex helper using Ceph RADOS的支持，本篇将介绍这个方式锁文件配置方式<br><a id="more"></a></p>
<h2 id="实践过程">实践过程</h2><h3 id="安装CTDB">安装CTDB</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ~]<span class="comment"># yum install samba ctdb</span></span><br></pre></td></tr></table></figure>
<p>检查默认包里面是否有rados的支持<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ~]<span class="comment"># rpm -qpl ctdb-4.6.2-12.el7_4.x86_64.rpm</span></span><br><span class="line">…</span><br><span class="line">usr/libexec/ctdb</span><br><span class="line">/usr/libexec/ctdb/ctdb_event</span><br><span class="line">/usr/libexec/ctdb/ctdb_eventd</span><br><span class="line">/usr/libexec/ctdb/ctdb_killtcp</span><br><span class="line">/usr/libexec/ctdb/ctdb_lock_helper</span><br><span class="line">/usr/libexec/ctdb/ctdb_lvs</span><br><span class="line">/usr/libexec/ctdb/ctdb_mutex_fcntl_helper</span><br><span class="line">/usr/libexec/ctdb/ctdb_natgw</span><br><span class="line">/usr/libexec/ctdb/ctdb_recovery_helper</span><br><span class="line">/usr/libexec/ctdb/ctdb_takeover_helper</span><br><span class="line">/usr/libexec/ctdb/smnotify</span><br><span class="line">…</span><br></pre></td></tr></table></figure></p>
<p>这个可以看到默认并没有包含这个rados的支持，这个很多通用软件都会这么处理，因为支持第三方插件的时候需要开发库，而开发库又有版本的区别，所以默认并不支持，需要支持就自己编译即可，例如fio支持librbd的接口就是这么处理的，等到插件也通用起来的时候，可能就会默认支持了</p>
<p>很多软件的编译可以采取源码的编译方式，如果不是有很强的代码合入和patch跟踪能力，直接用发行包的方式是最稳妥的，所以为了不破坏这个稳定性，本篇采用的是基于发行版本，增加模块的方式，这样不会破坏核心组件的稳定性，并且后续升级也是比较简单的，这个也是个人推荐的方式</p>
<p>查询当前使用的samba版本<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ~]<span class="comment"># rpm -qa|grep samba</span></span><br><span class="line">samba-<span class="number">4.6</span>.<span class="number">2</span>-<span class="number">12</span>.el7_4.x86_64</span><br></pre></td></tr></table></figure></p>
<h3 id="打包新的CTDB">打包新的CTDB</h3><p>可以查询得到这个的源码包为samba-4.6.2-12.el7_4.src.rpm,进一步搜索可以查询的到这个src源码rpm包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://vault.centos.org/<span class="number">7.4</span>.<span class="number">1708</span>/updates/Source/SPackages/samba-<span class="number">4.6</span>.<span class="number">2</span>-<span class="number">12</span>.el7_4.src.rpm</span><br></pre></td></tr></table></figure></p>
<p>下载这个rpm包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ~]<span class="comment"># wget http://vault.centos.org/7.4.1708/updates/Source/SPackages/samba-4.6.2-12.el7_4.src.rpm</span></span><br></pre></td></tr></table></figure></p>
<p>如果下载比较慢的话就用迅雷下载，会快很多，国内的源里面把源码包的rpm都删除掉了，上面的是官网会有最全的包</p>
<p>解压这个rpm包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ~]<span class="comment"># rpm2cpio samba-4.6.2-12.el7_4.src.rpm |cpio -div</span></span><br></pre></td></tr></table></figure></p>
<p>检查包的内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos myctdb]<span class="comment"># ls</span></span><br><span class="line">CVE-<span class="number">2017</span>-<span class="number">12150</span>.patch                                 samba-v4-<span class="number">6</span>-fix-cross-realm-refferals.patch</span><br><span class="line">CVE-<span class="number">2017</span>-<span class="number">12151</span>.patch                                 samba-v4-<span class="number">6</span>-fix-kerberos-debug-message.patch</span><br><span class="line">CVE-<span class="number">2017</span>-<span class="number">12163</span>.patch                                 samba-v4-<span class="number">6</span>-fix_net_ads_changetrustpw.patch</span><br><span class="line">CVE-<span class="number">2017</span>-<span class="number">14746</span>.patch                                 samba-v4-<span class="number">6</span>-fix-net-ads-keytab-handling.patch</span><br><span class="line">CVE-<span class="number">2017</span>-<span class="number">15275</span>.patch                                 samba-v4-<span class="number">6</span>-fix_path_substitutions.patch</span><br><span class="line">CVE-<span class="number">2017</span>-<span class="number">7494</span>.patch                                  samba-v4-<span class="number">6</span>-fix_smbclient_session_setup_info.patch</span><br><span class="line">gpgkey-<span class="number">52</span>FBC0B86D954B0843324CDC6F33915B6568B7EA.gpg  samba-v4-<span class="number">6</span>-fix_smbclient_username_parsing.patch</span><br><span class="line">pam_winbind.conf                                     samba-v4.<span class="number">6</span>-fix_smbpasswd_user_<span class="built_in">pwd</span>_change.patch</span><br><span class="line">README.dc                                            samba-v4-<span class="number">6</span>-fix-spoolss-<span class="number">32</span>bit-driver-upload.patch</span><br><span class="line">README.downgrade                                     samba-v4-<span class="number">6</span>-fix-vfs-expand-msdfs.patch</span><br><span class="line">samba-<span class="number">4.6</span>.<span class="number">2</span>-<span class="number">12</span>.el7_4.src.rpm                         samba-v4-<span class="number">6</span>-fix_winbind_child_crash.patch</span><br><span class="line">samba-<span class="number">4.6</span>.<span class="number">2</span>.tar.asc                                  samba-v4-<span class="number">6</span>-fix_winbind_normalize_names.patch</span><br><span class="line">samba-<span class="number">4.6</span>.<span class="number">2</span>.tar.xz                                   samba-v4.<span class="number">6</span>-graceful_fsctl_validate_negotiate_info.patch</span><br><span class="line">samba.log                                            samba-v4.<span class="number">6</span>-gss_krb5_import_cred.patch</span><br><span class="line">samba.pamd                                           samba-v4.<span class="number">6</span>-lib-crypto-implement-samba.crypto-Python-module-for-.patch</span><br><span class="line">samba.spec                                           samba-v4.<span class="number">7</span>-config-dynamic-rpc-port-range.patch</span><br><span class="line">samba-v4.<span class="number">6</span>-credentials-fix-realm.patch               smb.conf.example</span><br><span class="line">samba-v4-<span class="number">6</span>-fix-building-with-new-glibc.patch         smb.conf.vendor</span><br></pre></td></tr></table></figure></p>
<p>可以看到在源码包基础上还打入了很多的patch，内部的编译采用的是waf编译的方式，内部的过程就不做太多介绍了，这里只去改动我们需要的部分即可，也就是去修改samba.spec文件</p>
<p>我们先获取相关的编译选项，这个我最开始的时候打算独立编译ctdb的rpm包，发现有依赖关系太多，后来多次验证后，发现直接可以在samba编译里面增加选项的，选项获取方式<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab211 samba-<span class="number">4.6</span>.<span class="number">2</span>]<span class="comment"># ./configure --help|grep ceph</span></span><br><span class="line">  --with-libcephfs=LIBCEPHFS_DIR</span><br><span class="line">            Directory under <span class="built_in">which</span> libcephfs is installed</span><br><span class="line">  --enable-cephfs</span><br><span class="line">            Build with cephfs support (default=yes)</span><br><span class="line">  --enable-ceph-reclock</span><br></pre></td></tr></table></figure></p>
<p>这个可以知道需要添加ceph-reclock的支持就添加这个选项，我们把这个选项添加到samba.spec当中<br>修改samba.spec文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">…</span><br><span class="line">%configure \</span><br><span class="line">        --enable-fhs \</span><br><span class="line">        --with-piddir=/run \</span><br><span class="line">        --with-sockets-dir=/run/samba \</span><br><span class="line">        --with-modulesdir=%&#123;_libdir&#125;/samba \</span><br><span class="line">        --with-pammodulesdir=%&#123;_libdir&#125;/security \</span><br><span class="line">        --with-lockdir=/var/lib/samba/lock \</span><br><span class="line">        --with-statedir=/var/lib/samba \</span><br><span class="line">        --with-cachedir=/var/lib/samba \</span><br><span class="line">        --disable-rpath-install \</span><br><span class="line">        --with-shared-modules=%&#123;_samba4_modules&#125; \</span><br><span class="line">        --bundled-libraries=%&#123;_samba4_libraries&#125; \</span><br><span class="line">        --with-pam \</span><br><span class="line">        --with-pie \</span><br><span class="line">        --with-relro \</span><br><span class="line">        --enable-ceph-reclock \</span><br><span class="line">        --without-fam \</span><br><span class="line">…</span><br><span class="line">%dir %&#123;_libexecdir&#125;/ctdb</span><br><span class="line">%&#123;_libexecdir&#125;/ctdb/ctdb_event</span><br><span class="line">%&#123;_libexecdir&#125;/ctdb/ctdb_eventd</span><br><span class="line">%&#123;_libexecdir&#125;/ctdb/ctdb_killtcp</span><br><span class="line">%&#123;_libexecdir&#125;/ctdb/ctdb_lock_helper</span><br><span class="line">%&#123;_libexecdir&#125;/ctdb/ctdb_lvs</span><br><span class="line">%&#123;_libexecdir&#125;/ctdb/ctdb_mutex_fcntl_helper</span><br><span class="line">%&#123;_libexecdir&#125;/ctdb/ctdb_mutex_ceph_rados_helper</span><br><span class="line">…</span><br><span class="line">%&#123;_mandir&#125;/man1/ctdb.<span class="number">1</span>.gz</span><br><span class="line">%&#123;_mandir&#125;/man1/ctdb_diagnostics.<span class="number">1</span>.gz</span><br><span class="line">%&#123;_mandir&#125;/man1/ctdbd.<span class="number">1</span>.gz</span><br><span class="line">%&#123;_mandir&#125;/man1/onnode.<span class="number">1</span>.gz</span><br><span class="line">%&#123;_mandir&#125;/man1/ltdbtool.<span class="number">1</span>.gz</span><br><span class="line">%&#123;_mandir&#125;/man1/ping_pong.<span class="number">1</span>.gz</span><br><span class="line">%&#123;_mandir&#125;/man7/ctdb_mutex_ceph_rados_helper.<span class="number">7</span>.gz</span><br><span class="line">%&#123;_mandir&#125;/man1/ctdbd_wrapper.<span class="number">1</span>.gz</span><br><span class="line">…</span><br></pre></td></tr></table></figure></p>
<p>这个文件当中一共添加了三行内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--enable-ceph-reclock \</span><br><span class="line">%&#123;_libexecdir&#125;/ctdb/ctdb_mutex_ceph_rados_helper</span><br><span class="line">%&#123;_mandir&#125;/man7/ctdb_mutex_ceph_rados_helper.<span class="number">7</span>.gz</span><br></pre></td></tr></table></figure></p>
<p>把解压后的目录里面的所有文件都拷贝到源码编译目录,就是上面ls列出的那些文件，以及修改好的samba.spec文件都一起拷贝过去<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos myctdb]<span class="comment"># cp -ra * /root/rpmbuild/SOURCES/</span></span><br></pre></td></tr></table></figure></p>
<p>安装librados2的devel包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos myctdb]<span class="comment"># yum install librados2-devel</span></span><br></pre></td></tr></table></figure></p>
<p>如果编译过程缺其他的依赖包就依次安装即可，这个可以通过解压源码先编译一次的方式来把依赖包找全，然后再打rpm包</p>
<p>开始编译rpm包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos myctdb]<span class="comment"># rpmbuild -bb samba.spec</span></span><br></pre></td></tr></table></figure></p>
<p>这个可以就在当前的目录执行即可</p>
<p>检查生成的包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos myctdb]<span class="comment"># rpm -qpl /root/rpmbuild/RPMS/x86_64/ctdb-4.6.2-12.el7.centos.x86_64.rpm|grep rados</span></span><br><span class="line">/usr/libexec/ctdb/ctdb_mutex_ceph_rados_helper</span><br><span class="line">/usr/share/man/man7/ctdb_mutex_ceph_rados_helper.<span class="number">7</span>.gz</span><br></pre></td></tr></table></figure></p>
<p>可以看到已经生成了这个，把这个包拷贝到需要更新的机器上面</p>
<h3 id="配置ctdb">配置ctdb</h3><p>首先要升级安装下新的ctdb包，因为名称有改变，会提示依赖问题,这里忽略依赖的问题<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ~]<span class="comment"># rpm -Uvh ctdb-4.6.2-12.el7.centos.x86_64.rpm --nodeps</span></span><br></pre></td></tr></table></figure></p>
<p>添加一个虚拟IP配置<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ~]<span class="comment"># cat /etc/ctdb/public_addresses </span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.99</span>/<span class="number">16</span> ens33</span><br></pre></td></tr></table></figure></p>
<p>添加node配置<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ~]<span class="comment"># cat /etc/ctdb/nodes </span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.18</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.201</span></span><br></pre></td></tr></table></figure></p>
<p>修改配置文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ~]<span class="comment"># cat /etc/ctdb/ctdbd.conf|grep -v "#"</span></span><br><span class="line"> CTDB_RECOVERY_LOCK=<span class="string">"!/usr/libexec/ctdb/ctdb_mutex_ceph_rados_helper ceph client.admin rbd lockctdb"</span></span><br><span class="line"> CTDB_NODES=/etc/ctdb/nodes</span><br><span class="line"> CTDB_PUBLIC_ADDRESSES=/etc/ctdb/public_addresses</span><br><span class="line"> CTDB_LOGGING=file:/var/<span class="built_in">log</span>/log.ctdb</span><br><span class="line"><span class="comment"># CTDB_DEBUGLEVEL=debug</span></span><br></pre></td></tr></table></figure></p>
<p>上面为了调试，我开启了debug来查看重要的信息</p>
<blockquote>
<p>CTDB_RECOVERY_LOCK=”!/usr/libexec/ctdb/ctdb_mutex_ceph_rados_helper ceph client.admin rbd lockctdb”<br>最重要的是这行配置文件规则是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CTDB_RECOVERY_LOCK=<span class="string">"!/usr/libexec/ctdb/ctdb_mutex_ceph_rados_helper [Cluster] [User] [Pool] [Object]"</span></span><br><span class="line">Cluster: Ceph cluster name (e.g. ceph)</span><br><span class="line">User: Ceph cluster user name (e.g. client.admin)</span><br><span class="line">Pool: Ceph RADOS pool name</span><br><span class="line">Object: Ceph RADOS object name</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>在ctdb的机器上面准备好librados2和ceph配置文件，这个配置的rbd的lockctdb对象会由ctdb去生成<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ~]<span class="comment"># systemctl restart ctdb</span></span><br></pre></td></tr></table></figure></p>
<p>配置好了以后就可以启动进程了，上面的/etc/ctdb/ctdbd.conf配置文件最好是修改好一台机器的，然后scp到其它机器，里面内容有一点点偏差都会判断为异常的，所以最好是相同的配置文件</p>
<p>查看进程状态<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@customos ceph]<span class="comment"># ctdb status</span></span><br><span class="line">Number of nodes:<span class="number">2</span></span><br><span class="line">pnn:<span class="number">0</span> <span class="number">192.168</span>.<span class="number">0.18</span>     OK (THIS NODE)</span><br><span class="line">pnn:<span class="number">1</span> <span class="number">192.168</span>.<span class="number">0.201</span>    OK</span><br><span class="line">Generation:<span class="number">1662303628</span></span><br><span class="line">Size:<span class="number">2</span></span><br><span class="line"><span class="built_in">hash</span>:<span class="number">0</span> lmaster:<span class="number">0</span></span><br><span class="line"><span class="built_in">hash</span>:<span class="number">1</span> lmaster:<span class="number">1</span></span><br><span class="line">Recovery mode:NORMAL (<span class="number">0</span>)</span><br><span class="line">Recovery master:<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>查看/var/log/log.ctdb日志<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">2018</span>/<span class="number">01</span>/<span class="number">06</span> <span class="number">23</span>:<span class="number">18</span>:<span class="number">11.399849</span> ctdb-recoverd[<span class="number">129134</span>]: Node:<span class="number">1</span> was <span class="keyword">in</span> recovery mode. Start recovery process</span><br><span class="line"><span class="number">2018</span>/<span class="number">01</span>/<span class="number">06</span> <span class="number">23</span>:<span class="number">18</span>:<span class="number">11.399879</span> ctdb-recoverd[<span class="number">129134</span>]: ../ctdb/server/ctdb_recoverd.c:<span class="number">1267</span> Starting <span class="keyword">do</span>_recovery</span><br><span class="line"><span class="number">2018</span>/<span class="number">01</span>/<span class="number">06</span> <span class="number">23</span>:<span class="number">18</span>:<span class="number">11.399903</span> ctdb-recoverd[<span class="number">129134</span>]: Attempting to take recovery lock (!/usr/libexec/ctdb/ctdb_mutex_ceph_rados_helper ceph client.admin rbd lockctdb)</span><br><span class="line"><span class="number">2018</span>/<span class="number">01</span>/<span class="number">06</span> <span class="number">23</span>:<span class="number">18</span>:<span class="number">11.400657</span> ctdb-recoverd[<span class="number">129134</span>]: ../ctdb/server/ctdb_cluster_mutex.c:<span class="number">251</span> Created PIPE FD:<span class="number">17</span></span><br><span class="line"><span class="number">2018</span>/<span class="number">01</span>/<span class="number">06</span> <span class="number">23</span>:<span class="number">18</span>:<span class="number">11.579865</span> ctdbd[<span class="number">129038</span>]: ../ctdb/server/ctdb_daemon.c:<span class="number">907</span> client request <span class="number">40</span> of <span class="built_in">type</span> <span class="number">7</span> length <span class="number">72</span> from node <span class="number">1</span> to <span class="number">4026531841</span></span><br></pre></td></tr></table></figure></p>
<p>日志中可以看到ctdb-recoverd已经是采用的ctdb_mutex_ceph_rados_helper来获取的recovery lock</p>
<p>停掉ctdb的进程，IP可以正常的切换，到这里，使用对象作为lock文件的功能就实现了，其他更多的ctdb的高级控制就不在这个里作过多的说明</p>
<h2 id="总结">总结</h2><p>本篇是基于发行版本的ctdb包进行模块的加入重新发包，并且把配置做了一次实践，这个可以作为一个ctdb的方案之一，具体跟之前的方案相比切换时间可以改善多少，需要通过数据进行对比，这个进行测试即可</p>
<h2 id="资源">资源</h2><p>已经打好包的ctdb共享一下，可以直接使用</p>
<blockquote>
<p><a href="http://7xweck.com1.z0.glb.clouddn.com/ctdb-4.6.2-12.el7.centos.x86_64.rpm" target="_blank" rel="external">http://7xweck.com1.z0.glb.clouddn.com/ctdb-4.6.2-12.el7.centos.x86_64.rpm</a></p>
</blockquote>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2018-01-06</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<p><center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/object.jpg" alt="object"><br></cemter></p>
<h2 id="前言">前言</h2><p>服务器的服务做HA有很多种方式，其中有一种就是是用CTDB，之前这个是独立的软件来做HA的，现在已经跟着SAMBA主线里面了，也就是跟着samba发行包一起发行</p>
<p>之前CTDB的模式是需要有一个共享文件系统，并且在这个共享文件系统里面所有的节点都去访问同一个文件，会有一个Master会获得这个文件的锁</p>
<p>在cephfs的使用场景中可以用cephfs的目录作为这个锁文件的路径，这个有个问题就是一旦有一个节点down掉的时候，可能客户端也会卡住目录，这个目录访问会被卡住，文件锁在其他机器无法获取到，需要等到这个锁超时以后，其它节点才能获得到锁，这个切换的周期就会长一点了</p>
<p>CTDB在最近的版本当中加入了cluster mutex helper using Ceph RADOS的支持，本篇将介绍这个方式锁文件配置方式<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kernel RBD的QOS配置方案]]></title>
    <link href="http://www.zphj1987.com/2018/01/05/Kernel-RBD-QOS/"/>
    <id>http://www.zphj1987.com/2018/01/05/Kernel-RBD-QOS/</id>
    <published>2018-01-05T07:23:30.000Z</published>
    <updated>2018-01-06T15:42:00.936Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/io.png" alt="io"><br></center>

<h2 id="前言">前言</h2><p>关于qos的讨论有很多，ceph内部也正在实现着一整套的基于dmclock的qos的方案，这个不是本篇的内容，之前在社区的邮件列表看过有研发在聊qos的相关的实现的，当时一个研发就提出了在使用kernel rbd的时候，可以直接使用linux的操作系统qos来实现，也就是cgroup来控制读取写入</p>
<p>cgroup之前也有接触过，主要测试了限制cpu和内存相关的，没有做io相关的测试，这个当然可以通过ceph内部来实现qos，但是有现成的解决方案的时候，可以减少很多开发周期，以及测试的成本</p>
<p>本篇将介绍的是kernel rbd的qos方案<br><a id="more"></a></p>
<h2 id="时间过长">时间过长</h2><p>首先介绍下几个测试qos相关的命令，用来比较设置前后的效果<br>验证写入IOPS命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fio -filename=/dev/rbd0 -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=write -ioengine=libaio -bs=<span class="number">4</span>K -size=<span class="number">1</span>G -numjobs=<span class="number">1</span> -runtime=<span class="number">60</span> -group_reporting -name=mytest</span><br></pre></td></tr></table></figure></p>
<p>验证写入带宽的命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fio -filename=/dev/rbd0 -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=write -ioengine=libaio -bs=<span class="number">4</span>M -size=<span class="number">1</span>G -numjobs=<span class="number">1</span> -runtime=<span class="number">60</span> -group_reporting -name=mytest</span><br></pre></td></tr></table></figure></p>
<p>验证读取IOPS命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fio -filename=/dev/rbd0 -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=<span class="built_in">read</span> -ioengine=libaio -bs=<span class="number">4</span>K -size=<span class="number">1</span>G -numjobs=<span class="number">1</span> -runtime=<span class="number">60</span> -group_reporting -name=mytest</span><br></pre></td></tr></table></figure></p>
<p>验证读取带宽命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fio -filename=/dev/rbd0 -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=<span class="built_in">read</span> -ioengine=libaio -bs=<span class="number">4</span>M -size=<span class="number">1</span>G -numjobs=<span class="number">1</span> -runtime=<span class="number">60</span> -group_reporting -name=mytest</span><br></pre></td></tr></table></figure></p>
<p>上面为什么会设置不同的块大小，这个是因为测试的存储是会受到带宽和iops的共同制约的，当测试小io的时候，这个时候的峰值是受到iops的限制的，测试大io的时候，受到的是带宽限制，所以在做测试的时候，需要测试iops是否被限制住的时候就使用小的bs=4K，需要测试大的带宽的限制的时候就采用bs=4M来测试</p>
<p>测试的时候都是，开始不用做qos来进行测试得到一个当前不配置qos的性能数值，然后根据需要进行qos设置后通过上面的fio去测试是否能限制住</p>
<p>启用cgroup的blkio模块<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p  /cgroup/blkio/</span><br><span class="line">mount -t cgroup -o blkio blkio /cgroup/blkio/</span><br></pre></td></tr></table></figure></p>
<p>获取rbd磁盘的major/minor numbers<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab211 ~]<span class="comment"># lsblk </span></span><br><span class="line">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">rbd0   <span class="number">252</span>:<span class="number">0</span>    <span class="number">0</span>  <span class="number">19.5</span>G  <span class="number">0</span> disk </span><br><span class="line">sda      <span class="number">8</span>:<span class="number">0</span>    <span class="number">1</span> <span class="number">238.4</span>G  <span class="number">0</span> disk </span><br><span class="line">├─sda4   <span class="number">8</span>:<span class="number">4</span>    <span class="number">1</span>     <span class="number">1</span>K  <span class="number">0</span> part </span><br><span class="line">├─sda2   <span class="number">8</span>:<span class="number">2</span>    <span class="number">1</span>  <span class="number">99.9</span>G  <span class="number">0</span> part </span><br><span class="line">├─sda5   <span class="number">8</span>:<span class="number">5</span>    <span class="number">1</span>     <span class="number">8</span>G  <span class="number">0</span> part [SWAP]</span><br><span class="line">├─sda3   <span class="number">8</span>:<span class="number">3</span>    <span class="number">1</span>     <span class="number">1</span>G  <span class="number">0</span> part /boot</span><br><span class="line">├─sda1   <span class="number">8</span>:<span class="number">1</span>    <span class="number">1</span>   <span class="number">100</span>M  <span class="number">0</span> part </span><br><span class="line">└─sda6   <span class="number">8</span>:<span class="number">6</span>    <span class="number">1</span> <span class="number">129.4</span>G  <span class="number">0</span> part /</span><br></pre></td></tr></table></figure></p>
<p>通过lsblk命令可以获取到磁盘对应的major number和minor number,这里可以看到rbd0对应的编号为252:0</p>
<p>设置rbd0的iops的qos为10<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"252:0 10"</span> &gt; /cgroup/blkio/blkio.throttle.write_iops_device</span><br></pre></td></tr></table></figure></p>
<p>如果想清理这个规则,把后面的数值设置为0就清理了，后面几个配置也是相同的方法<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"252:0 0"</span> &gt; /cgroup/blkio/blkio.throttle.write_iops_device</span><br></pre></td></tr></table></figure></p>
<p>限制写入的带宽为10MB/s<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"252:0 10485760"</span> &gt; /cgroup/blkio/blkio.throttle.write_bps_device</span><br></pre></td></tr></table></figure></p>
<p>限制读取的qos为10<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"252:0 10"</span> &gt; /cgroup/blkio/blkio.throttle.read_iops_device</span><br></pre></td></tr></table></figure></p>
<p>限制读取的带宽为10MB/s<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"252:0 10485760"</span> &gt; /cgroup/blkio/blkio.throttle.read_bps_device</span><br></pre></td></tr></table></figure></p>
<p>以上简单的设置就完成了kernel rbd的qos设置了，我测试了下，确实是生效了的</p>
<h2 id="总结">总结</h2><p>这个知识点很久前就看到了，一直没总结，现在记录下，个人观点是能快速，有效，稳定的实现功能是最好的，所以使用这个在kernel rbd方式下可以不用再进行qos的开发了</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2018-01-05</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/io.png" alt="io"><br></center>

<h2 id="前言">前言</h2><p>关于qos的讨论有很多，ceph内部也正在实现着一整套的基于dmclock的qos的方案，这个不是本篇的内容，之前在社区的邮件列表看过有研发在聊qos的相关的实现的，当时一个研发就提出了在使用kernel rbd的时候，可以直接使用linux的操作系统qos来实现，也就是cgroup来控制读取写入</p>
<p>cgroup之前也有接触过，主要测试了限制cpu和内存相关的，没有做io相关的测试，这个当然可以通过ceph内部来实现qos，但是有现成的解决方案的时候，可以减少很多开发周期，以及测试的成本</p>
<p>本篇将介绍的是kernel rbd的qos方案<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ceph对象主本损坏的修复方法]]></title>
    <link href="http://www.zphj1987.com/2018/01/02/ceph-primary-object-damage-recover/"/>
    <id>http://www.zphj1987.com/2018/01/02/ceph-primary-object-damage-recover/</id>
    <published>2018-01-02T14:21:23.000Z</published>
    <updated>2018-01-02T14:41:54.296Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/dog.jpg" alt="dog"><br></center>

<h2 id="前言">前言</h2><p>问题的触发是在进行一个目录的查询的时候，osd就会挂掉，开始以为是osd操作超时了，后来发现每次访问这个对象都有问题<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span> [WRN] ： slow request <span class="number">60.793196</span> seconds old, received at osd_op(mds.<span class="number">0.188</span>:<span class="number">728345234100006</span>c6ddc.<span class="number">00000000</span> [o map-get-header <span class="number">0</span>-<span class="number">0</span>,omap-get-vals <span class="number">0</span>~<span class="number">16</span>,getxattr parent] snapc <span class="number">0</span>=[] ack+<span class="built_in">read</span>+known_<span class="keyword">if</span>_redirected+full_force e218901) currently started</span><br><span class="line">heartbeat_map is_healthy  ··· osd_op_tp thread ··· had timed out after <span class="number">60</span></span><br></pre></td></tr></table></figure></p>
<p>这个对象是元数据的一个空对象，保留数据在扩展属性当中<br><a id="more"></a><br>然后做了一个操作判断是对象损坏了:</p>
<p>直接列取omapkeys</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rados -p metadata listomapvals <span class="number">100006</span>c6ddc.<span class="number">00000000</span></span><br></pre></td></tr></table></figure>
<p>发现会卡住，然后关闭这个osd再次做操作，就可以了，启动后还是不行，这里可以判断是主本的对象已经有问题了，本篇将讲述多种方法来解决这个问题</p>
<h2 id="处理办法">处理办法</h2><p>本章将会根据操作粒度的不同来讲述三种方法的恢复，根据自己的实际情况，和风险的判断来选择自己的操作</p>
<h3 id="方法一：通过repair修复">方法一：通过repair修复</h3><p>首先能确定是主本损坏了，那么先把主本的对象进行一个备份，然后移除<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># systemctl stop ceph-osd@0</span></span><br><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># cp -ra 100.00000000__head_C5265AB3__2 ../../</span></span><br></pre></td></tr></table></figure></p>
<p>通过ceph-object-tool进行移除的时候有bug,无法移除metadata的对象，已经提了一个<a href="http://tracker.ceph.com/issues/22553" target="_blank" rel="external">bug</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># mv 100.00000000__head_C5265AB3__2 ../</span></span><br></pre></td></tr></table></figure></p>
<p>注意一下在老版本的时候，对对象进行删除以后，可能元数据里面记录了对象信息，而对象又不在的时候可能会引起osd无法启动，这个在10.2.10是没有这个问题</p>
<p>重启osd<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># systemctl restart ceph-osd@0</span></span><br></pre></td></tr></table></figure></p>
<p>对pg做scrub<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># ceph pg scrub 2.0</span></span><br><span class="line">instructing pg <span class="number">2.0</span> on osd.<span class="number">0</span> to scrub</span><br></pre></td></tr></table></figure></p>
<p>这种方法就是需要做scrub的操作，如果对象特别多，并且是线上环境，可能不太好去做scrub的操作<br>检查状态<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># ceph -s</span></span><br><span class="line">    cluster <span class="number">03580</span>f14-<span class="number">9906</span>-<span class="number">4257</span>-<span class="number">9182</span>-<span class="number">65</span>c886e7f5a7</span><br><span class="line">     health HEALTH_ERR</span><br><span class="line">            <span class="number">1</span> pgs inconsistent</span><br><span class="line">            <span class="number">1</span> scrub errors</span><br><span class="line">            too few PGs per OSD (<span class="number">3</span> &lt; min <span class="number">30</span>)</span><br><span class="line">     monmap e1: <span class="number">1</span> mons at &#123;lab71=<span class="number">20.20</span>.<span class="number">20.71</span>:<span class="number">6789</span>/<span class="number">0</span>&#125;</span><br><span class="line">            election epoch <span class="number">4</span>, quorum <span class="number">0</span> lab71</span><br><span class="line">      fsmap e30: <span class="number">1</span>/<span class="number">1</span>/<span class="number">1</span> up &#123;<span class="number">0</span>=lab71=up:active&#125;</span><br><span class="line">     osdmap e101: <span class="number">2</span> osds: <span class="number">2</span> up, <span class="number">2</span> <span class="keyword">in</span></span><br><span class="line">            flags sortbitwise,require_jewel_osds</span><br><span class="line">      pgmap v377: <span class="number">3</span> pgs, <span class="number">3</span> pools, <span class="number">100814</span> bytes data, <span class="number">41</span> objects</span><br><span class="line">            <span class="number">70196</span> kB used, <span class="number">189</span> GB / <span class="number">189</span> GB avail</span><br><span class="line">                   <span class="number">2</span> active+clean</span><br><span class="line">                   <span class="number">1</span> active+clean+inconsistent</span><br></pre></td></tr></table></figure></p>
<p>发起修复请求<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># ceph pg repair 2.0</span></span><br><span class="line">instructing pg <span class="number">2.0</span> on osd.<span class="number">0</span> to repair</span><br></pre></td></tr></table></figure></p>
<p>修复完成后检查集群状态和对象，到这里可以恢复正常了</p>
<h3 id="方法二：通过rsync拷贝数据方式恢复">方法二：通过rsync拷贝数据方式恢复</h3><p>跟上面一样这里首先能确定是主本损坏了，那么先把主本的对象进行一个备份，然后移除<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># systemctl stop ceph-osd@0</span></span><br><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># cp -ra 100.00000000__head_C5265AB3__2 ../../</span></span><br></pre></td></tr></table></figure></p>
<p>移除对象<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># mv 100.00000000__head_C5265AB3__2 ../</span></span><br></pre></td></tr></table></figure></p>
<p>在副本的机器上执行rsync命令，这里我们直接从副本拷贝对象过来，注意下不能直接使用scp会掉扩展属性<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab72 <span class="number">2.0</span>_head]<span class="comment"># rsync  -avXH  /var/lib/ceph/osd/ceph-1/current/2.0_head/100.00000000__head_C5265AB3__2 20.20.20.71:/var/lib/ceph/osd/ceph-0/current/2.0_head/100.00000000__head_C5265AB3__2</span></span><br></pre></td></tr></table></figure></p>
<p>在主本机器检查扩展属性<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># getfattr 100.00000000__head_C5265AB3__2 </span></span><br><span class="line"><span class="comment"># file: 100.00000000__head_C5265AB3__2</span></span><br><span class="line">user.ceph._</span><br><span class="line">user.ceph._@<span class="number">1</span></span><br><span class="line">user.ceph.snapset</span><br><span class="line">user.cephos.spill_out</span><br></pre></td></tr></table></figure></p>
<p>重启osd<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># systemctl restart ceph-osd@0</span></span><br></pre></td></tr></table></figure></p>
<p>检查对象的扩展属性<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 <span class="number">2.0</span>_head]<span class="comment"># rados -p metadata listomapvals 100.00000000</span></span><br></pre></td></tr></table></figure></p>
<h3 id="方法三：通过删除PG的方式恢复">方法三：通过删除PG的方式恢复</h3><p>这个方式是删除PG，然后重新启动的方式<br>这种方式操作比较危险，所以提前备份好pg的数据，最好主备pg都备份下，万一出了问题或者数据不对，可以根据需要再导入<br>备份PG<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph-objectstore-tool --pgid <span class="number">2.0</span> --op <span class="built_in">export</span> --data-path /var/lib/ceph/osd/ceph-<span class="number">0</span>/ --journal-path   /var/lib/ceph/osd/ceph-<span class="number">0</span>/journal --file /root/<span class="number">2.0</span></span><br></pre></td></tr></table></figure></p>
<p>删除PG的操作<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 current]<span class="comment"># ceph-objectstore-tool --pgid 2.0  --op remove --data-path /var/lib/ceph/osd/ceph-0/ --journal-path /var/lib/ceph/osd/ceph-0/journal</span></span><br><span class="line">SG_IO: bad/missing sense data, sb[]:  <span class="number">70</span> <span class="number">00</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">20</span> <span class="number">00</span> <span class="number">00</span> c0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">SG_IO: bad/missing sense data, sb[]:  <span class="number">70</span> <span class="number">00</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">20</span> <span class="number">00</span> <span class="number">00</span> c0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"> marking collection <span class="keyword">for</span> removal</span><br><span class="line">setting <span class="string">'_remove'</span> omap key</span><br><span class="line">finish_remove_pgs <span class="number">2.0</span>_head removing <span class="number">2.0</span></span><br><span class="line">Remove successful</span><br></pre></td></tr></table></figure></p>
<p>重启osd<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 current]<span class="comment"># systemctl restart ceph-osd@0</span></span><br></pre></td></tr></table></figure></p>
<p>等待回复即可</p>
<p>本方法里面还可以衍生一种就是，通过导出的副本的PG数据,在主本删除了相应的PG以后,进行导入的方法，这样就不会产生迁移<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab71 current]<span class="comment">#  ceph-objectstore-tool --pgid 2.0  --op import --data-path /var/lib/ceph/osd/ceph-0/ --journal-path /var/lib/ceph/osd/ceph-0/journal --file /root/2.0</span></span><br></pre></td></tr></table></figure></p>
<h2 id="总结">总结</h2><p>上面用三种方法来实现了副本向主本同步的操作，判断主本是否有问题的方法就是主动的把主本所在的OSD停掉，然后检查请求是否可达，在确定主本已经坏掉的情况下，就可以做将副本同步到主本的操作，可以根据PG的对象的多少来选择需要做哪种操作</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2018-01-02</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/dog.jpg" alt="dog"><br></center>

<h2 id="前言">前言</h2><p>问题的触发是在进行一个目录的查询的时候，osd就会挂掉，开始以为是osd操作超时了，后来发现每次访问这个对象都有问题<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span> [WRN] ： slow request <span class="number">60.793196</span> seconds old, received at osd_op(mds.<span class="number">0.188</span>:<span class="number">728345234100006</span>c6ddc.<span class="number">00000000</span> [o map-get-header <span class="number">0</span>-<span class="number">0</span>,omap-get-vals <span class="number">0</span>~<span class="number">16</span>,getxattr parent] snapc <span class="number">0</span>=[] ack+<span class="built_in">read</span>+known_<span class="keyword">if</span>_redirected+full_force e218901) currently started</span><br><span class="line">heartbeat_map is_healthy  ··· osd_op_tp thread ··· had timed out after <span class="number">60</span></span><br></pre></td></tr></table></figure></p>
<p>这个对象是元数据的一个空对象，保留数据在扩展属性当中<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mds的cpu占用问题分析以及解决办法]]></title>
    <link href="http://www.zphj1987.com/2017/12/04/mds-use-too-more-cpu/"/>
    <id>http://www.zphj1987.com/2017/12/04/mds-use-too-more-cpu/</id>
    <published>2017-12-04T14:47:04.000Z</published>
    <updated>2017-12-04T15:06:37.402Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/ganesha.png" alt="ganesha"><br></center>

<h2 id="前言">前言</h2><p>mds是ceph里面处理文件接口的组件，一旦使用文件系统，不可避免的会出现一种场景就是目录很多，目录里面的文件很多，而mds是一个单进程的组件，现在虽然有了muti mds，但稳定的使用的大部分场景还是单acitve mds的</p>
<p>这就会出现一种情况，一旦一个目录里面有很多文件的时候，去查询这个目录里的文件就会在当前目录做一次遍历，这个需要一个比较长的时间，如果能比较好的缓存文件信息，也能避免一些过载情况，本篇讲述的是内核客户端正常，而export nfs后mds的负载长时间过高的情况<br><a id="more"></a></p>
<h2 id="问题复现">问题复现</h2><h3 id="准备测试数据,准备好监控环境">准备测试数据,准备好监控环境</h3><p>监控mds cpu占用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pidstat -u  <span class="number">1</span> -p <span class="number">27076</span> &gt; /tmp/mds.cpu.log</span><br><span class="line">UserParameter=mds.cpu,cat /tmp/mds.cpu.log|tail -n <span class="number">1</span>|grep -v Average| awk <span class="string">'&#123;print $8&#125;'</span></span><br></pre></td></tr></table></figure></p>
<p>整个测试避免屏幕的打印影响时间统计,把输出需要重定向<br>测试一：<br>内核客户端写入10000文件查看时间以及cpu占用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsserver kc10000]<span class="comment"># time seq 10000|xargs -i dd if=/dev/zero of=a&#123;&#125; bs=1K count=1  2&gt;/dev/null</span></span><br><span class="line">real	<span class="number">0</span>m30.<span class="number">121</span>s</span><br><span class="line">user	<span class="number">0</span>m1.<span class="number">901</span>s</span><br><span class="line">sys	<span class="number">0</span>m10.<span class="number">420</span>s</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/3no4iobedvhwujvtr8jfmrf7/aa.png" alt="aa.png-32.5kB"></p>
<p>测试二：<br>内核客户端写入20000文件查看时间以及cpu占用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsserver kc20000]<span class="comment"># time seq 20000|xargs -i dd if=/dev/zero of=a&#123;&#125; bs=1K count=1  2&gt;/dev/null</span></span><br><span class="line">real	<span class="number">1</span>m38.<span class="number">233</span>s</span><br><span class="line">user	<span class="number">0</span>m3.<span class="number">761</span>s</span><br><span class="line">sys	<span class="number">0</span>m21.<span class="number">510</span>s</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/ual9inmekpeth163muql8dyn/bbb.png" alt="bbb.png-39kB"><br>测试三：<br>内核客户端写入40000文件查看时间以及cpu占用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsserver kc40000]<span class="comment">#  time seq 40000|xargs -i dd if=/dev/zero of=a&#123;&#125; bs=1K count=1  2&gt;/dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">2</span>m55.<span class="number">261</span>s</span><br><span class="line">user	<span class="number">0</span>m7.<span class="number">699</span>s</span><br><span class="line">sys	<span class="number">0</span>m42.<span class="number">410</span>s</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/pnqr3lpjuydb8dj182cw6ffa/cccc.png" alt="cccc.png-57.3kB"></p>
<p>测试4：<br>内核客户端列目录10000文件，第一次写完有缓存情况<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsserver kc10000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m0.<span class="number">228</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">063</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">048</span>s</span><br></pre></td></tr></table></figure></p>
<p>内核客户端列目录20000文件，第一次写完有缓存情况<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsserver kc20000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m0.<span class="number">737</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">141</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">092</span>s</span><br></pre></td></tr></table></figure></p>
<p>内核客户端列目录40000文件，第一次写完有缓存情况<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsserver kc40000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m1.<span class="number">658</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">286</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">196</span>s</span><br></pre></td></tr></table></figure></p>
<p>都是比较快的返回，CPU可以忽略不计</p>
<p>现在重启mds后再次列目录<br>客户端如果不umount,直接重启mds的话,还是会缓存在<br>新版本这个地方好像已经改了（重启了mds 显示inode还在，但是随着时间的增长inode会减少，说明还是有周期，会释放，这个还不知道哪个地方控制，用什么参数控制，这个不是本篇着重关注的地方，后续再看下,jewel版本已经比hammer版本的元数据时间快了很多了）<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsserver kc10000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m0.<span class="number">380</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">065</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">041</span>s</span><br><span class="line">[root@nfsserver kc10000]<span class="comment"># cd ../kc20000/</span></span><br><span class="line">[root@nfsserver kc20000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m0.<span class="number">868</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">154</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">074</span>s</span><br><span class="line">[root@nfsserver kc20000]<span class="comment"># cd ../kc40000/</span></span><br><span class="line">[root@nfsserver kc40000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m1.<span class="number">947</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">300</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">166</span>s</span><br></pre></td></tr></table></figure></p>
<p>测试都是看到很快的返回，以上都是正常的，下面开始将这个目录exportnfs出去，看下是个什么情况</p>
<h3 id="负载问题复现">负载问题复现</h3><p>从nfs客户端第一次列10000个小文件的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsclient kc10000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m4.<span class="number">038</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">095</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">069</span>s</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/zphj1987/2zkcsg31i5r0972clmsnwu9p/nfs10000.png" alt="nfs10000.png-36.7kB"></p>
<p>从nfs客户端第一次列20000个小文件的目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsclient kc20000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m17.<span class="number">446</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">175</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">141</span>s</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/jsd4ropqf7s80olmib2bm16t/nfs20000.png" alt="nfs20000.png-43.2kB"><br>从nfs客户端第二次列20000个小文件目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsclient kc20000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m21.<span class="number">215</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">182</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">151</span>s</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/im9wby3cyze0fsvnvoifgita/nfs200002.png" alt="nfs200002.png-56.7kB"></p>
<p>从nfs客户端第三次列20000个小文件目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsclient kc20000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m16.<span class="number">222</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">189</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">143</span>s</span><br></pre></td></tr></table></figure></p>
<p>可以看到在20000量级的时候列目录维持在20000左右，CPU维持一个高位</p>
<p>从nfs客户端列40000个小文件的目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsclient kc40000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">7</span>m15.<span class="number">663</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">319</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">581</span>s</span><br><span class="line">[root@nfsclient kc40000]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/rflb49cxesc1g6uv0cuyfyse/nfs40000.png" alt="nfs40000.png-77.2kB"><br>第一次列完，马上第二次列看下情况<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsclient kc40000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">1</span>m12.<span class="number">816</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">163</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">142</span>s</span><br></pre></td></tr></table></figure></p>
<p>可以看到第二次列的时间已经缩短了，再来第三次<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsclient kc40000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">1</span>m33.<span class="number">549</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">162</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">183</span>s</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/nhx161bnwwt3ggiaommufvfx/nfs400003.png" alt="nfs400003.png-61.3kB"><br>可以看到在后面列的时候时间确实缩短了，但是还是维持一个非常高CPU的占用，以及比较长的一个时间，这个很容易造成过载</p>
<p>这个地方目前看应该是内核客户端与内核NFS的结合的问题</p>
<h2 id="解决办法:用ganesha的ceph用户态接口替代kernel_nfs">解决办法:用ganesha的ceph用户态接口替代kernel nfs</h2><p>我们看下另外一种方案用户态的NFS+ceph同样的环境下测试结果：</p>
<p>从nfs客户端第一次列40000个小文件的目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsclient kc40000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m3.<span class="number">289</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">335</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">386</span>s</span><br></pre></td></tr></table></figure></p>
<p>从nfs客户端第二次列40000个小文件的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsclient kc40000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m1.<span class="number">686</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">351</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">389</span>s</span><br></pre></td></tr></table></figure>
<p>从nfs客户端第三次列40000个小文件的目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfsclient kc40000]<span class="comment"># time ll 2&gt;&amp;1 &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real	<span class="number">0</span>m1.<span class="number">675</span>s</span><br><span class="line">user	<span class="number">0</span>m0.<span class="number">320</span>s</span><br><span class="line">sys	<span class="number">0</span>m0.<span class="number">391</span>s</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/mw0j9nj322p0slwymyicffvc/ganesha.png" alt="ganesha.png-51.5kB"><br>基本mds无多余的负载，非常快的返回</p>
<p>可以从上面的测试看到差别是非常的大的，这个地方应该是内核模块与内核之间的问题，而采用用户态的以后解决了列目录慢以及卡顿的问题</p>
<h2 id="如何配置ganesha支持ceph的nfs接口">如何配置ganesha支持ceph的nfs接口</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b V2.<span class="number">3</span>-stable https://github.com/nfs-ganesha/nfs-ganesha.git</span><br><span class="line"><span class="built_in">cd</span> nfs-ganesha/</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> nfs-ganesha/</span><br><span class="line">ll src/FSAL/FSAL_CEPH/</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">mkdir mybuild</span><br><span class="line"><span class="built_in">cd</span> mybuild/</span><br><span class="line">cmake -DUSE_FSAL_CEPH=ON ../nfs-ganesha/src/</span><br><span class="line">ll FSAL/FSAL_CEPH/</span><br><span class="line">make</span><br><span class="line">make -j <span class="number">12</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>vim /etc/ganesha/ganesha.conf<br>修改配置文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EXPORT</span><br><span class="line">&#123;</span><br><span class="line">    Export_ID=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Path = <span class="string">"/"</span>;</span><br><span class="line"></span><br><span class="line">    Pseudo = <span class="string">"/"</span>;</span><br><span class="line"></span><br><span class="line">    Access_Type = RW;</span><br><span class="line"></span><br><span class="line">    NFS_Protocols = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    Transport_Protocols = TCP;</span><br><span class="line"></span><br><span class="line">    FSAL &#123;</span><br><span class="line">        Name = CEPH;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>停止掉原生的nfs<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop nfs</span><br></pre></td></tr></table></figure></p>
<p>启用ganesha nfs<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start  nfs-ganesha.service</span><br></pre></td></tr></table></figure></p>
<p>然后在客户端进行nfs的挂载即可</p>
<h2 id="总结">总结</h2><p>ganesha在需要用到cephfs又正好是要用到nfs接口的时候，可以考虑这个方案，至少在缓存文件，降低负载上面能够比kernel client有更好的效果，这个可以根据测试情况用数据来做比较</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-12-04</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/ganesha.png" alt="ganesha"><br></center>

<h2 id="前言">前言</h2><p>mds是ceph里面处理文件接口的组件，一旦使用文件系统，不可避免的会出现一种场景就是目录很多，目录里面的文件很多，而mds是一个单进程的组件，现在虽然有了muti mds，但稳定的使用的大部分场景还是单acitve mds的</p>
<p>这就会出现一种情况，一旦一个目录里面有很多文件的时候，去查询这个目录里的文件就会在当前目录做一次遍历，这个需要一个比较长的时间，如果能比较好的缓存文件信息，也能避免一些过载情况，本篇讲述的是内核客户端正常，而export nfs后mds的负载长时间过高的情况<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS GRUB损坏修复方法]]></title>
    <link href="http://www.zphj1987.com/2017/11/30/recovery-from-grub-damage/"/>
    <id>http://www.zphj1987.com/2017/11/30/recovery-from-grub-damage/</id>
    <published>2017-11-30T14:51:55.000Z</published>
    <updated>2017-11-30T15:22:39.682Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/grub.jpg" alt="grub"><br></center>

<h2 id="前言">前言</h2><p>博客很久没有更新了，一个原因就是原来存放部署博客的环境坏了，硬盘使用的是SSD，只要读取到某个文件，整个磁盘就直接识别不到了，还好博客环境之前有做备份，最近一直没有把部署环境做下恢复，今天抽空把环境做下恢复并且记录一篇基础的GRUB的处理文档</p>
<p>这两天正好碰到GRUB损坏的事，很久前处理过，但是没留下文档，正好现在把流程梳理一下，来解决grub.cfg损坏的情况,或者无法启动的情况<br><a id="more"></a></p>
<h2 id="实践步骤">实践步骤</h2><p>安装操作系统的时候会有多种可能分区的方法，一个直接的分区，一个是用了lvm,本篇将几种分区的情况分别写出来</p>
<h3 id="lvm分区的情况">lvm分区的情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/centos-root   <span class="number">17</span>G  <span class="number">927</span>M   <span class="number">17</span>G   <span class="number">6</span>% /</span><br><span class="line">devtmpfs                 <span class="number">901</span>M     <span class="number">0</span>  <span class="number">901</span>M   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                    <span class="number">912</span>M     <span class="number">0</span>  <span class="number">912</span>M   <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs                    <span class="number">912</span>M  <span class="number">8.6</span>M  <span class="number">904</span>M   <span class="number">1</span>% /run</span><br><span class="line">tmpfs                    <span class="number">912</span>M     <span class="number">0</span>  <span class="number">912</span>M   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               <span class="number">1014</span>M  <span class="number">143</span>M  <span class="number">872</span>M  <span class="number">15</span>% /boot</span><br><span class="line">tmpfs                    <span class="number">183</span>M     <span class="number">0</span>  <span class="number">183</span>M   <span class="number">0</span>% /run/user/<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>模拟/boot/grub2/grub.cfg的破坏</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mv /boot/grub2/grub.cfg /boot/grub2/grub.cfgbk</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure>
<p>重启后就会出现这个</p>
<p><img src="http://static.zybuluo.com/zphj1987/agdslyms36u15eaar4h4d8gr/image.png" alt="image.png-13.4kB"></p>
<p>使用ls查询当前的分区情况</p>
<p><img src="http://static.zybuluo.com/zphj1987/fv6pjy9a3aw09ut819k8lvj9/image.png" alt="image.png-7.7kB"><br>查询分区情况<br><img src="http://static.zybuluo.com/zphj1987/uuj04u8y2dguvhqg85iavbe5/image.png" alt="image.png-29.1kB"></p>
<p>可以看到(hd0,msdos1)可以列出/boot里面的内容，可以确定这个就是启动分区</p>
<p>设置root<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; <span class="built_in">set</span> root=(hd0,msdos1)</span><br></pre></td></tr></table></figure></p>
<p>命令后面的路径可以用tab键补全,/dev/mapper/centos-root为根分区，因为当前的分区模式是lvm的<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; linux16 /vmlinuz-<span class="number">3.10</span>.<span class="number">0</span>-<span class="number">693</span>.el7.x86_64 root=/dev/mapper/centos-root</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; initrd16 /initramfs-<span class="number">3.10</span>.<span class="number">0</span>-<span class="number">693</span>.el7.x86_64.img</span><br></pre></td></tr></table></figure>
<p>启动<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; boot</span><br></pre></td></tr></table></figure></p>
<p>进入系统后重新生成grub.cfg<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></p>
<p>然后重启下系统验证是否好了</p>
<h3 id="一个完整/分区形式">一个完整/分区形式</h3><p>这种情况，整个安装的系统就一个分区，boot是作为/分区的一个子目录的情况<br>ls 查询分区<br><img src="http://static.zybuluo.com/zphj1987/o3d1wegh1nfpm6a3u7w5q8yo/image.png" alt="image.png-4.6kB"></p>
<p>设置根分区<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; <span class="built_in">set</span> root=(hd0,msdos3)</span><br></pre></td></tr></table></figure></p>
<p>可以看到上面是msdos3分区对应的就是root=/dev/sda3,下面就设置这个root</p>
<p>设置linux16<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; linux16 /root/vmlinuz-<span class="number">3.10</span>.<span class="number">0</span>-<span class="number">693</span>.el7.x86_64 root=/dev/sda3</span><br></pre></td></tr></table></figure></p>
<p>设置initrd16<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; initrd16 /root/initramfs-<span class="number">3.10</span>.<span class="number">0</span>-<span class="number">693</span>.el7.x86_64.img</span><br></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; boot</span><br></pre></td></tr></table></figure></p>
<p>进入系统后重新生成grub.cfg<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></p>
<p>然后重启下系统验证是否好了</p>
<h3 id="/分区和/boot分区独立分区的情况">/分区和/boot分区独立分区的情况</h3><p><img src="http://static.zybuluo.com/zphj1987/bd481u09kfonua77zwc87jsc/image.png" alt="image.png-16.3kB"></p>
<p>设置根分区<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; <span class="built_in">set</span> root=(hd0,msdos1)</span><br></pre></td></tr></table></figure></p>
<p>根据/分区为msdos2可以知道root分区为/dev/sda2<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; linux16 /vmlinuz-<span class="number">3.10</span>.<span class="number">0</span>-<span class="number">693</span>.el7.x86_64 root=/dev/sda2</span><br></pre></td></tr></table></figure></p>
<p>设置initrd16<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; initrd16 /initramfs-<span class="number">3.10</span>.<span class="number">0</span>-<span class="number">693</span>.el7.x86_64.img</span><br></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub&gt; boot</span><br></pre></td></tr></table></figure></p>
<p>进入系统后重新生成grub.cfg<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></p>
<p>然后重启下系统验证是否好了</p>
<h2 id="总结">总结</h2><p>主要的处理流程如下：</p>
<ul>
<li>首先通过<code>ls</code>得到分区的情况</li>
<li>通过<code>set</code>设置/boot所在的分区为root</li>
<li>分别设置linux16，initrd16并且指定root分区为/分区所在的目录</li>
<li>重启后重新生成grub即可</li>
</ul>
<p>本篇作为一个总结以备不时之需</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-11-30</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/grub.jpg" alt="grub"><br></center>

<h2 id="前言">前言</h2><p>博客很久没有更新了，一个原因就是原来存放部署博客的环境坏了，硬盘使用的是SSD，只要读取到某个文件，整个磁盘就直接识别不到了，还好博客环境之前有做备份，最近一直没有把部署环境做下恢复，今天抽空把环境做下恢复并且记录一篇基础的GRUB的处理文档</p>
<p>这两天正好碰到GRUB损坏的事，很久前处理过，但是没留下文档，正好现在把流程梳理一下，来解决grub.cfg损坏的情况,或者无法启动的情况<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[推荐一本书《Ceph设计原理与实现》]]></title>
    <link href="http://www.zphj1987.com/2017/09/28/a-new-ceph-book/"/>
    <id>http://www.zphj1987.com/2017/09/28/a-new-ceph-book/</id>
    <published>2017-09-28T14:23:47.000Z</published>
    <updated>2017-11-30T14:47:50.773Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xopdu.com1.z0.glb.clouddn.com/book-rocket.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>本篇不是一篇技术文，而是推荐的一本书，对于写书来说，在多年以前觉得是一件可望而不可及的事情，而看到几本经典书籍的作者在讲述自己写书的过程的时候，都是自己注入了大量的精力的，所以我自己目前也只能是一个个知识点的以博客的方式进行记录</p>
<p>对于买书来说，很多人会觉得很贵，其实一本书几百面，只要里面的书有两面是能够帮助到你的，书的价值其实已经回来了，所以对于技术书籍来说，基本不评价书的好坏，而是去看多少能提取的东西，多少未知的东西</p>
<p>ceph的书籍最初的起步也是国外的一个作者写的，社区进行翻译，社区自己也出了一本书，还有ZETTAKIT（泽塔云）的研发常涛也出了一本《Ceph源码分析》，这些都是很好的书籍，之前也都有推荐，这些书籍都是一线的研发在繁忙之中抽出空余的时间写下来的</p>
<p>本篇推荐的一篇是来自中兴的书籍，中兴也是国内ceph开发里面代码提交量很高的公司</p>
<p>目前没能拿到书籍，所以只能从目录来讲下本书会提供哪些相关的知识了<br><a id="more"></a></p>
<h2 id="书籍简介">书籍简介</h2><h3 id="straw及straw2相关内容">straw及straw2相关内容</h3><p>这个是ceph里面的crush算法的内容，straw2算法优化了再平衡的时候的数据迁移量，以及能提供更好的分布，让数据更平均，相关内容里面还讲了数据分布的相关知识，整个能解决的应该是数据平均分布相关的知识，让你的数据更加平衡</p>
<h3 id="BlueStore_相关内容">BlueStore 相关内容</h3><p>BlueStore 是Ceph Luminous版本作为默认存储的新型的底层存储，这个是用来替换掉linux下的底层的文件系统的，而实现的一个新型的文件系统，这个是为了带来一个更好的性能的提升的，目前是测试可用，生产慎用的情况，应该会越来越稳定的</p>
<h3 id="纠删码原理与overwrites支持">纠删码原理与overwrites支持</h3><p>纠删码是为了解决副本的空间占用的问题，用更少的空间损失来获取更大的安全性，相当于计算换空间，纠删这个在很久以前就接触过一个另外一套文件系统，使用场景个人觉得是冷数据比较合适，而如果性能足够好，计算能力足够强，也能支撑比较大的带宽的<br>在之前的版本当中，ec的启用必须启动缓冲池，需要副本缓冲池的缓冲池做一层转发，这个转发实际上意味着写放大，并且还会出现缓冲池下刷数据的时候性能急剧下降的问题<br>在新版本中加入了overwrites支持，这个现在新版的bluestore的已经支持数据直接写到ec存储池了，也就是无需缓冲了</p>
<h3 id="PG_读写流程与状态迁移详解">PG 读写流程与状态迁移详解</h3><p>PG在恢复过程中会有各种状态，什么情况下会出现什么状态，什么状态进行什么处理，什么情况下不能乱动，这些都是需要好好的了解PG状态再进行操作的，否则把PG状态弄坏了，意味着数据也就无法读取了</p>
<h3 id="存储服务质量QoS">存储服务质量QoS</h3><p>ceph里面一直没有qos这个，也就是对读写相关的限流，kernel rbd的场景下是可以用cgroup进行qos相关的控制的，其他场景就没有什么好的方法了,所以在比较新的版本里面引入了dmclock来进行限流的相关的控制，这个以后可以在恢复以及写入当中做更精准的控制了，qos也是商用存储里面必要的功能，所以说ceph在功能完善方面更进了一步，需求推动研发</p>
<h3 id="存储RBD">存储RBD</h3><p>这个讲了rbd相关的一些知识，结构和功能方面的</p>
<h3 id="对象存储网关RGW">对象存储网关RGW</h3><p>这个讲了对象存储方面的一些功能特性和相关的操作</p>
<h3 id="分布式文件系统_CephFS">分布式文件系统 CephFS</h3><p>这个讲了cephfs相关的一些知识，讲了负载均衡和故障恢复的相关内容，负载均衡是相对于多active mds的场景的，可以对目录进行mds的负载划分，把负载分摊到多个mds上面，这个在新版本已经可以使用了，并且目前已经是生产可用</p>
<h3 id="定时scrub">定时scrub</h3><p>scrub这个不要让默认触发，自己做相关的策略，指定时间一个个PG的去scrub就可以了，书中应该会提及相关的具体做法</p>
<h3 id="Full的紧急处理">Full的紧急处理</h3><p>这个是集群出现Full以后的紧急处理，对于full以后的情况，一般不要乱动，因为full以后，其他osd也会是快full的状态，并且还有backfill full的控制，所以需要比较精准的控制，相当于游戏里面的微操了，书中应该会系统的讲解</p>
<h3 id="快照在增量备份中的应用">快照在增量备份中的应用</h3><p>通过快照的方式可以进行增量的备份，从而减少备份的需要获取的数据量，这个之前也有介绍过</p>
<h3 id="异常watcher的处理">异常watcher的处理</h3><p>这个应该是通过黑名单的方式进行watcher的相关的处理，这个建议是先处理能处理的，最后无法处理的异常情况用黑名单处理，这个等书出来以后可以看到更详细的内容</p>
<h2 id="作者简介">作者简介</h2><p>谢型果<br>中兴通讯资深软件工程师，5年存储开发经验，精通本地文件系统ZFS和分布式存储系统Ceph。2014 年开始研究 Ceph，2015 年加入 Ceph 开源社区，目前是 Ceph 开源社区的 Ceph Member。</p>
<p>任焕文<br>中兴通讯高级软件工程师，有10余年研发经验，曾就职于浪潮和华为，擅长数据库、网络和存储相关技术。Ceph Member成员，现主要负责Ceph文件系统、NAS存储和分布式一致性方面的研发工作。</p>
<p>严　军<br>中兴通讯高级软件工程师，从事存储系统开发工作多年，熟悉DPDK开发框架；2015年加入Ceph开源项目，对分布式存储系统QoS有深入研究，目前是Ceph开源社区的积极贡献者。</p>
<p>罗润兵<br>华中科技大学微电子专业研究生，中兴通讯高级软件工程师，精通TCP/IP协议栈和分布式存储系统，2014年开始接触并参与Ceph开源项目，目前是Ceph开源社区的积极贡献者。</p>
<p>韦巧苗<br>中兴通讯高级软件工程师，擅长C/C++编程，有5年存储系统研发经验，对Ceph RGW模块有深入研究，同时在Cache技术及性能优化上也有丰富的经验。</p>
<p>骆科学<br>中兴通讯高级软件工程师，有5年存储产品相关开发经验，擅长虚拟化及存储相关技术，2016年于Ceph中国社区年终盛典中被评为“2016年度社区十佳贡献者”。<br>总结</p>
<p>从目录上面看书中的内容包含的方面很多，可以看到这些很多都是我之前在生产环境当中使用到了或者接触过的东西，所以可以很系统的把这些知识提取出来，这样可以更了解整个系统<br>购买地址：</p>
<blockquote>
<p><a href="http://item.jd.com/12196497.html" target="_blank" rel="external">http://item.jd.com/12196497.html</a></p>
</blockquote>
<p>或者扫描二维码购买</p>
<center><br><img src="http://static.zybuluo.com/zphj1987/miyt9s24b9e9x2jzf8arkzzq/scancode.png" alt=""><br></center>

<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-09-28</td>
</tr>
<tr>
<td style="text-align:center">更正常涛的公司名称</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-09-28</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xopdu.com1.z0.glb.clouddn.com/book-rocket.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>本篇不是一篇技术文，而是推荐的一本书，对于写书来说，在多年以前觉得是一件可望而不可及的事情，而看到几本经典书籍的作者在讲述自己写书的过程的时候，都是自己注入了大量的精力的，所以我自己目前也只能是一个个知识点的以博客的方式进行记录</p>
<p>对于买书来说，很多人会觉得很贵，其实一本书几百面，只要里面的书有两面是能够帮助到你的，书的价值其实已经回来了，所以对于技术书籍来说，基本不评价书的好坏，而是去看多少能提取的东西，多少未知的东西</p>
<p>ceph的书籍最初的起步也是国外的一个作者写的，社区进行翻译，社区自己也出了一本书，还有ZETTAKIT（泽塔云）的研发常涛也出了一本《Ceph源码分析》，这些都是很好的书籍，之前也都有推荐，这些书籍都是一线的研发在繁忙之中抽出空余的时间写下来的</p>
<p>本篇推荐的一篇是来自中兴的书籍，中兴也是国内ceph开发里面代码提交量很高的公司</p>
<p>目前没能拿到书籍，所以只能从目录来讲下本书会提供哪些相关的知识了<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[掉电后osdmap丢失无法启动osd的解决方案]]></title>
    <link href="http://www.zphj1987.com/2017/09/27/lost-osdmap-recovery/"/>
    <id>http://www.zphj1987.com/2017/09/27/lost-osdmap-recovery/</id>
    <published>2017-09-27T06:03:59.000Z</published>
    <updated>2017-09-27T08:48:41.122Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/recuva.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>本篇讲述的是一个比较极端的故障的恢复场景，在整个集群全部服务器突然掉电的时候，osd里面的osdmap可能会出现没刷到磁盘上的情况，这个时候osdmap的最新版本为空或者为没有这个文件</p>
<p>还有一种情况就是机器宕机了，没有马上处理，等了一段时间以后，服务器机器启动了起来，而这个时候osdmap已经更新了，全局找不到需要的旧版本的osdmap和incmap，osd无法启动</p>
<p>一般情况下能找到的就直接从其他osd上面拷贝过来，然后就可以启动了，本篇讲述的是无法启动的情况<br><a id="more"></a></p>
<h2 id="解决方案">解决方案</h2><h3 id="获取运行的ceph集群当前版本">获取运行的ceph集群当前版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 ~]<span class="comment"># ceph -v</span></span><br><span class="line">ceph version <span class="number">10.2</span>.<span class="number">9</span> (<span class="number">2</span>ee413f77150c0f375ff6f10edd6c8f9c7d060d0)</span><br></pre></td></tr></table></figure>
<p>获取最新的osdmap<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 ~]<span class="comment"># ceph osd getmap -o /tmp/productosdmap</span></span><br><span class="line">got osdmap epoch <span class="number">142</span></span><br></pre></td></tr></table></figure></p>
<p>通过osdmap可以得到crushmap，fsid，osd，存储池，pg等信息</p>
<p>提取crushmap<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 tmp]<span class="comment"># osdmaptool /tmp/productosdmap --export-crush /tmp/productcrushmap</span></span><br><span class="line">osdmaptool: osdmap file <span class="string">'/tmp/productosdmap'</span></span><br><span class="line">osdmaptool: exported crush map to /tmp/productcrushmap</span><br></pre></td></tr></table></figure></p>
<p>拷贝到开发环境的机器上面</p>
<p>通过osdmap获取集群的fsid<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 tmp]<span class="comment"># osdmaptool --print productosdmap |grep fsid</span></span><br><span class="line">osdmaptool: osdmap file <span class="string">'productosdmap'</span></span><br><span class="line">fsid d153844c-<span class="number">16</span>f5-<span class="number">4</span>f48-<span class="number">829</span>d-<span class="number">87</span>fb49120bbe</span><br></pre></td></tr></table></figure></p>
<p>获取存储池相关的信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 tmp]<span class="comment"># osdmaptool --print productosdmap |grep  pool</span></span><br><span class="line">osdmaptool: osdmap file <span class="string">'productosdmap'</span></span><br><span class="line">pool <span class="number">0</span> <span class="string">'rbd'</span> replicated size <span class="number">2</span> min_size <span class="number">1</span> crush_ruleset <span class="number">0</span> object_<span class="built_in">hash</span> rjenkins pg_num <span class="number">64</span> pgp_num <span class="number">64</span> last_change <span class="number">1</span> flags hashpspool stripe_width <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>获取osd相关的信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 tmp]<span class="comment"># osdmaptool --print productosdmap |grep  osd</span></span><br><span class="line">osdmaptool: osdmap file <span class="string">'productosdmap'</span></span><br><span class="line">flags sortbitwise,require_jewel_osds</span><br><span class="line">max_osd <span class="number">3</span></span><br><span class="line">osd.<span class="number">0</span> up   <span class="keyword">in</span>  weight <span class="number">1</span> up_from <span class="number">135</span> up_thru <span class="number">141</span> down_at <span class="number">127</span> last_clean_interval [<span class="number">23</span>,<span class="number">24</span>) <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6800</span>/<span class="number">28245</span> <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6801</span>/<span class="number">28245</span> <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6802</span>/<span class="number">28245</span> <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6803</span>/<span class="number">28245</span> exists,up d8040272-<span class="number">7</span>afb-<span class="number">49</span>c0-bb78-<span class="number">9</span>ff13cf7d31b</span><br><span class="line">osd.<span class="number">1</span> up   <span class="keyword">in</span>  weight <span class="number">1</span> up_from <span class="number">140</span> up_thru <span class="number">141</span> down_at <span class="number">131</span> last_clean_interval [<span class="number">33</span>,<span class="number">130</span>) <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6808</span>/<span class="number">28698</span> <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6809</span>/<span class="number">28698</span> <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6810</span>/<span class="number">28698</span> <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6811</span>/<span class="number">28698</span> exists,up c6ac4c7a-<span class="number">0227</span>-<span class="number">4</span>af4-ac3f-bd844b2480f8</span><br><span class="line">osd.<span class="number">2</span> up   <span class="keyword">in</span>  weight <span class="number">1</span> up_from <span class="number">137</span> up_thru <span class="number">141</span> down_at <span class="number">133</span> last_clean_interval [<span class="number">29</span>,<span class="number">132</span>) <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6804</span>/<span class="number">28549</span> <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6805</span>/<span class="number">28549</span> <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6806</span>/<span class="number">28549</span> <span class="number">192.168</span>.<span class="number">8.107</span>:<span class="number">6807</span>/<span class="number">28549</span> exists,up <span class="number">2170260</span>b-bb05-<span class="number">4965</span>-baf2-<span class="number">12</span>d1c41b3ba0</span><br></pre></td></tr></table></figure></p>
<h3 id="构建新集群">构建新集群</h3><p>下载这个版本的源码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://mirrors.aliyun.com/ceph/rpm-jewel/el7/SRPMS/ceph-<span class="number">10.2</span>.<span class="number">9</span>-<span class="number">0</span>.el7.src.rpm</span><br></pre></td></tr></table></figure></p>
<p>放到一台独立的机器上面</p>
<p>解压rpm包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 bianyi]<span class="comment"># rpm2cpio ceph-10.2.9-0.el7.src.rpm |cpio -div</span></span><br><span class="line">[root@lab8106 bianyi]<span class="comment"># tar -xvf ceph-10.2.9.tar.bz2</span></span><br></pre></td></tr></table></figure></p>
<p>编译环境<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ceph</span><br><span class="line">./install-deps.sh</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make -j <span class="number">12</span></span><br><span class="line"><span class="built_in">cd</span> src</span><br></pre></td></tr></table></figure></p>
<p>修改vstart.sh里面的fsid<br>启动集群<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./vstart.sh -n  --mon_num <span class="number">1</span> --osd_num <span class="number">3</span> --mds_num <span class="number">0</span>  --short  <span class="operator">-d</span></span><br></pre></td></tr></table></figure></p>
<p>检查集群状态：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 src]<span class="comment"># ./ceph -c ceph.conf -s</span></span><br><span class="line">    cluster d153844c-<span class="number">16</span>f5-<span class="number">4</span>f48-<span class="number">829</span>d-<span class="number">87</span>fb49120bbe</span><br><span class="line">     health HEALTH_OK</span><br><span class="line">     monmap e1: <span class="number">1</span> mons at &#123;a=<span class="number">192.168</span>.<span class="number">8.106</span>:<span class="number">6789</span>/<span class="number">0</span>&#125;</span><br><span class="line">            election epoch <span class="number">3</span>, quorum <span class="number">0</span> a</span><br><span class="line">     osdmap e12: <span class="number">3</span> osds: <span class="number">3</span> up, <span class="number">3</span> <span class="keyword">in</span></span><br><span class="line">            flags sortbitwise,require_jewel_osds</span><br><span class="line">      pgmap v16: <span class="number">8</span> pgs, <span class="number">1</span> pools, <span class="number">0</span> bytes data, <span class="number">0</span> objects</span><br><span class="line">            <span class="number">115</span> GB used, <span class="number">1082</span> GB / <span class="number">1197</span> GB avail</span><br><span class="line">                   <span class="number">8</span> active+clean</span><br></pre></td></tr></table></figure></p>
<p>导入crushmap<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 src]<span class="comment"># ./ceph -c ceph.conf osd setcrushmap -i /root/rpmbuild/bianyi/productcrushmap </span></span><br><span class="line"><span class="built_in">set</span> crush map</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">26</span> <span class="number">14</span>:<span class="number">13</span>:<span class="number">29.052246</span> <span class="number">7</span>f19fd01d700  <span class="number">0</span> lockdep stop</span><br></pre></td></tr></table></figure></p>
<p>设置PG<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ceph -c ceph.conf osd pool <span class="built_in">set</span> rbd pg_num <span class="number">64</span></span><br><span class="line">./ceph -c ceph.conf osd pool <span class="built_in">set</span> rbd pgp_num <span class="number">64</span></span><br></pre></td></tr></table></figure></p>
<p>模拟正式集群上的故障<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 meta]<span class="comment"># systemctl stop ceph-osd@0</span></span><br><span class="line">[root@lab8107 meta]<span class="comment"># mv /var/lib/ceph/osd/ceph-0/current/meta/osdmap.153__0_AC977A95__none  /tmp/</span></span><br><span class="line">[root@lab8107 meta]<span class="comment"># mv /var/lib/ceph/osd/ceph-0/current/meta/inc\\uosdmap.153__0_C67D77C2__none  /tmp/</span></span><br></pre></td></tr></table></figure></p>
<p>相当于无法读取这个osdmap和incmap了</p>
<p>尝试启动osd<br>设置debug_osd=20后<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart ceph-osd@<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>检查日志<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/ceph/ceph-osd.<span class="number">0</span>.log</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/bj2fr68otco4oh6lloy9j7ly/image.png" alt="image.png-56.9kB"></p>
<p>可以看到153 epoch的osdmap是有问题的，那么我们需要的就是这个版本的osdmap</p>
<p>检查当前开发集群的osdmap的版本<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">osdmap e18: <span class="number">3</span> osds: <span class="number">3</span> up, <span class="number">3</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure></p>
<p>那么先快速把osdmap版本提高到153附近，这里我选择120<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 src]<span class="comment"># ./ceph -c ceph.conf osd thrash 120</span></span><br><span class="line">will thrash map <span class="keyword">for</span> <span class="number">120</span> epochs</span><br></pre></td></tr></table></figure></p>
<p>检查快速变化后的osdmap epoch<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">osdmap e138: <span class="number">3</span> osds: <span class="number">2</span> up, <span class="number">1</span> <span class="keyword">in</span>; <span class="number">64</span> remapped pgs</span><br></pre></td></tr></table></figure></p>
<p>做了上面的thrash后，集群的osd会是比较乱的，比如我的<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 src]<span class="comment"># ./ceph -c ceph.conf osd tree</span></span><br><span class="line">ID WEIGHT  TYPE NAME        UP/DOWN REWEIGHT PRIMARY-AFFINITY </span><br><span class="line">-<span class="number">1</span> <span class="number">0.80338</span> root default                                       </span><br><span class="line">-<span class="number">2</span> <span class="number">0.80338</span>     host lab8107                                   </span><br><span class="line"> <span class="number">0</span> <span class="number">0.26779</span>         osd.<span class="number">0</span>         up        <span class="number">0</span>          <span class="number">1.00000</span> </span><br><span class="line"> <span class="number">1</span> <span class="number">0.26779</span>         osd.<span class="number">1</span>       down        <span class="number">0</span>          <span class="number">1.00000</span> </span><br><span class="line"> <span class="number">2</span> <span class="number">0.26779</span>         osd.<span class="number">2</span>         up  <span class="number">1.00000</span>          <span class="number">1.00000</span> </span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">27</span> <span class="number">09</span>:<span class="number">43</span>:<span class="number">24.817177</span> <span class="number">7</span>fbcc7cdb700  <span class="number">0</span> lockdep stop</span><br></pre></td></tr></table></figure></p>
<p>做下恢复，启动下相关osd<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 src]<span class="comment"># ./ceph -c ceph.conf osd reweight 0 1</span></span><br><span class="line">reweighted osd.<span class="number">0</span> to <span class="number">1</span> (<span class="number">10000</span>)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">27</span> <span class="number">09</span>:<span class="number">45</span>:<span class="number">01.439009</span> <span class="number">7</span>f56c147b700  <span class="number">0</span> lockdep stop</span><br><span class="line">[root@lab8106 src]<span class="comment"># ./ceph -c ceph.conf osd reweight 1 1</span></span><br><span class="line">reweighted osd.<span class="number">1</span> to <span class="number">1</span> (<span class="number">10000</span>)</span><br><span class="line"><span class="number">2017</span>-<span class="number">09</span>-<span class="number">27</span> <span class="number">09</span>:<span class="number">45</span>:<span class="number">04.020686</span> <span class="number">7</span>fea3345c700  <span class="number">0</span> lockdep stop</span><br></pre></td></tr></table></figure></p>
<p>注意提取下开发集群上面新生成的osdmap的文件（多次执行以免刷掉了）<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 src]<span class="comment">#rsync -qvzrtopg   dev/osd0/current/meta/ /root/meta/</span></span><br></pre></td></tr></table></figure></p>
<p>重启一遍开发集群<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 src]<span class="comment"># ./vstart.sh   --mon_num 1 --osd_num 3 --mds_num 0  --short  -d</span></span><br></pre></td></tr></table></figure></p>
<p>注意这里少了一个参数 -n,n是重建集群，这里我们只需要重启即可<br>再次检查<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">osdmap e145: <span class="number">3</span> osds: <span class="number">3</span> up, <span class="number">3</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure></p>
<p>还是不够，不够的时候就执行上面的这个多次即可，一直到epoch到满足即可</p>
<p>将得到的osdmap拷贝到无法启动的osd的主机上面<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 src]<span class="comment"># scp /root/meta/osdmap.153__0_AC977A95__none 192.168.8.107:/root</span></span><br><span class="line">osdmap.<span class="number">153</span>__0_AC977A95__none                            <span class="number">100</span>% <span class="number">2824</span>     <span class="number">2.8</span>KB/s   <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">[root@lab8106 src]<span class="comment"># scp /root/meta/inc\\uosdmap.153__0_C67D77C2__none 192.168.8.107:/root</span></span><br><span class="line">inc\uosdmap.<span class="number">153</span>__0_C67D77C2__none                       <span class="number">100</span>%  <span class="number">198</span>     <span class="number">0.2</span>KB/s   <span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure></p>
<p>拷贝到osdmap的路径下面<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 meta]<span class="comment"># cp /root/osdmap.153__0_AC977A95__none ./</span></span><br><span class="line">[root@lab8107 meta]<span class="comment"># cp /root/inc\\uosdmap.153__0_C67D77C2__none ./</span></span><br><span class="line">[root@lab8107 meta]<span class="comment"># chown ceph:ceph osdmap.153__0_AC977A95__none </span></span><br><span class="line">[root@lab8107 meta]<span class="comment"># chown ceph:ceph inc\\uosdmap.153__0_C67D77C2__none</span></span><br></pre></td></tr></table></figure></p>
<p>启动并且观测<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 meta]<span class="comment"># systemctl start ceph-osd@0</span></span><br><span class="line">[root@lab8107 meta]<span class="comment">#tailf /var/log/ceph/ceph-osd.0.log</span></span><br></pre></td></tr></table></figure></p>
<p>检查集群状态，可以看到已经可以启动了</p>
<h2 id="总结">总结</h2><p>一般来说，出问题的时候都会说一句，如果备份了，就没那多事情，在一套生产环境当中，可以考虑下，什么是可以备份的，备份对环境的影响大不大，这种关键数据，并且可以全局共用，数据量也不大的数据，就需要备份好，比如上面的osdmap就可以在一个osd节点上面做一个实时的备份，或者短延时备份</p>
<p>本篇讲的是已经没有备份的情况下的做的一个恢复，掉电不是没有可能发生，至少解决了一个在osdmap无法找回的情况下的恢复办法</p>
<p>当然这里如果能够通过直接基于最新的osdmap和incmap做一定的解码，修改，编码，这样的方式应该也是可行的，这个就需要有一定的开发基础了，如果后面有找到这个方法会补充进本篇文章</p>
<p>你备份osdmap了么？</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-09-27</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/recuva.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>本篇讲述的是一个比较极端的故障的恢复场景，在整个集群全部服务器突然掉电的时候，osd里面的osdmap可能会出现没刷到磁盘上的情况，这个时候osdmap的最新版本为空或者为没有这个文件</p>
<p>还有一种情况就是机器宕机了，没有马上处理，等了一段时间以后，服务器机器启动了起来，而这个时候osdmap已经更新了，全局找不到需要的旧版本的osdmap和incmap，osd无法启动</p>
<p>一般情况下能找到的就直接从其他osd上面拷贝过来，然后就可以启动了，本篇讲述的是无法启动的情况<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Luminous监控界面中文语言包]]></title>
    <link href="http://www.zphj1987.com/2017/09/13/maybe-the-first-chinese-for-luminous-dashboard/"/>
    <id>http://www.zphj1987.com/2017/09/13/maybe-the-first-chinese-for-luminous-dashboard/</id>
    <published>2017-09-13T09:30:32.000Z</published>
    <updated>2017-09-13T10:11:06.694Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/china.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>之前有各种ceph的管理平台，在部署方面大部分都比较麻烦，现在在luminous版本当中有一个原生的dashboard，虽然目前这个只能看，但是从界面上面，从接口方面都是非常不错的一个版本</p>
<p>原生版本目前没有语言的选择，虽然IT方面都是推荐用英语去做，但是在数据展示方面因为毕竟是要人来看，所以这里做了一个中文的语言包，方便转换成中文的界面，这个语言包是跟着ceph版本走的，因为界面可能会调整，所以只能一一匹配，同时提供了原版语言包，可以方便的回退回去，如果版本有更新以最后一个链接为准</p>
<p>如果有翻译的建议，欢迎在下面留言，或者其他方式告知我<br><a id="more"></a></p>
<h2 id="语言包">语言包</h2><h3 id="ceph版本（ceph_version_12-2-0_(32ce2a3ae5239ee33d6150705cdb24d43bab910c)_luminous_(rc)">ceph版本（ceph version 12.2.0 (32ce2a3ae5239ee33d6150705cdb24d43bab910c) luminous (rc)</h3><p>中文包：</p>
<p><a href="http://7xweck.com1.z0.glb.clouddn.com/dashboard/luminous-dashboard-chinese-12.2.0-1.0-1.x86_64.rpm" target="_blank" rel="external">http://7xweck.com1.z0.glb.clouddn.com/dashboard/luminous-dashboard-chinese-12.2.0-1.0-1.x86_64.rpm</a></p>
<p>英文原版包：<br><a href="http://7xweck.com1.z0.glb.clouddn.com/dashboard/luminous-dashboard-english-12.2.0-1.0-1.x86_64.rpm" target="_blank" rel="external">http://7xweck.com1.z0.glb.clouddn.com/dashboard/luminous-dashboard-english-12.2.0-1.0-1.x86_64.rpm</a></p>
<h3 id="安装方法">安装方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh  http://xxxxx.rpm --force</span><br></pre></td></tr></table></figure>
<h2 id="在线预览">在线预览</h2><p>为了方便看到效果，专门在本篇博客内放了一个预览，可以看看效果，数据是离线的，但是可以点击</p>
<div class="video-container"> <object><br><embed src="http://ow7obg32z.bkt.clouddn.com" <="" embed=""></object><br></div>

<h2 id="总结">总结</h2><p>一直有这个想法，花了点时间去实现，慢慢优化</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-09-13</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/china.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>之前有各种ceph的管理平台，在部署方面大部分都比较麻烦，现在在luminous版本当中有一个原生的dashboard，虽然目前这个只能看，但是从界面上面，从接口方面都是非常不错的一个版本</p>
<p>原生版本目前没有语言的选择，虽然IT方面都是推荐用英语去做，但是在数据展示方面因为毕竟是要人来看，所以这里做了一个中文的语言包，方便转换成中文的界面，这个语言包是跟着ceph版本走的，因为界面可能会调整，所以只能一一匹配，同时提供了原版语言包，可以方便的回退回去，如果版本有更新以最后一个链接为准</p>
<p>如果有翻译的建议，欢迎在下面留言，或者其他方式告知我<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[怎样禁止Ceph OSD的自动挂载]]></title>
    <link href="http://www.zphj1987.com/2017/09/07/how-to-disable-Ceph-OSD-automount/"/>
    <id>http://www.zphj1987.com/2017/09/07/how-to-disable-Ceph-OSD-automount/</id>
    <published>2017-09-06T16:29:55.000Z</published>
    <updated>2017-09-06T16:31:34.346Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/mount.png" alt="此处输入图片的描述"><br></center>

<h2 id="前言">前言</h2><p>本篇来源于群里一个人的问题，有没有办法让ceph的磁盘不自动挂载，一般人的问题都是怎样让ceph能够自动挂载，在centos 7 平台下 ceph jewel版本以后都是有自动挂载的处理的，这个我之前也写过两篇文章 <a href="http://www.zphj1987.com/2016/03/31/ceph%E5%9C%A8centos7%E4%B8%8B%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%AE%B9%E6%98%93%E5%8F%91%E7%8E%B0%E7%9A%84%E6%94%B9%E5%8F%98/" target="_blank" rel="external">ceph在centos7下一个不容易发现的改变</a>和<a href="http://www.zphj1987.com/2016/12/22/Ceph%E6%95%B0%E6%8D%AE%E7%9B%98%E6%80%8E%E6%A0%B7%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/" target="_blank" rel="external">Ceph数据盘怎样实现自动挂载</a>，来讲述这个自动挂载的<br><a id="more"></a><br>这里讲下流程：</p>
<blockquote>
<p>开机后udev匹配95-ceph-osd.rules规则，触发ceph-disk  trigger，遍历磁盘，匹配到磁盘的标记后就触发了自动挂载</p>
</blockquote>
<p>为什么要取消挂载？<br>也许一般都会想：不就是停掉osd，然后umount掉，检查磁盘吗<br>这个想法如果放在一般情况下都没有问题，但是为什么有这个需求就是有不一般的情况，这个我在很久前遇到过，所以对这个需求的场景比较清楚</p>
<p>在很久以前碰到过一次，机器启动都是正常的，但是只要某个磁盘一挂载，机器就直接挂掉了，所以这个是不能让它重启机器自动挂载的，也许还有其他的情况，这里总结成一个简单的需求就是不想它自动挂载</p>
<h2 id="解决方法">解决方法</h2><p>从上面的自启动后的自动挂载流程里面，我们可以知道这里可以有两个方案去解决这个问题，第一种是改变磁盘的标记，第二种就是改变udev的rule的规则匹配，这里两个方法都行，一个是完全不动磁盘，一个是动了磁盘的标记</p>
<h3 id="修改udev规则的方式">修改udev规则的方式</h3><p>这个因为曾经有一段时间看过udev相关的一些东西，所以处理起来还是比较简单的，这里顺便把调试过程也记录下来<br>/lib/udev/rules.d/95-ceph-osd.rules这个文件里面就是集群自动挂载的触发规则，所以在这里我们在最开始匹配上我们需要屏蔽的盘，然后绕过内部的所有匹配规则，具体办法就是<br>在这个文件里面第一行加上</p>
<blockquote>
<p>KERNEL==”sdb1|sdb2”, GOTO=”not_auto_mount”</p>
</blockquote>
<p>在最后一行加上</p>
<blockquote>
<p>LABEL=”not_auto_mount”</p>
</blockquote>
<p>验证规则是否正确<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">udevadm <span class="built_in">test</span> /sys/block/sdb/sdb1</span><br></pre></td></tr></table></figure></p>
<p>我们先看下正常的可以挂载的盘符的触发测试显示<br><img src="http://static.zybuluo.com/zphj1987/4fuopv2z3ys36e3462svo72t/image.png" alt="image.png-17.2kB"><br>再看下屏蔽了后的规则是怎样的<br><img src="http://static.zybuluo.com/zphj1987/3phv4b3x8d2nf6mhaio68zk4/image.png" alt="image.png-16kB"><br>可以看到在加入屏蔽条件以后，就没有触发挂载了，这里要注意，做屏蔽规则的时候需要把这个osd相关的盘都屏蔽，不然在触发相关分区的时候可能顺带挂载起来了，上面的sdb1就是数据盘，sdb2就是bluestore的block盘</p>
<p>测试没问题后就执行下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">udevadm control --reload-rules</span><br></pre></td></tr></table></figure></p>
<p>重启后验证是否自动挂载了</p>
<h3 id="修改磁盘标记的方式">修改磁盘标记的方式</h3><p>查询磁盘的标记typecode,也就是ID_PART_ENTRY_TYPE这个属性<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># blkid -o udev -p /dev/sdb1</span></span><br><span class="line">ID_FS_UUID=<span class="number">7</span>a852eec-b32d-<span class="number">4</span>c0a-<span class="number">8</span>b8e-<span class="number">1</span>e056a67ee35</span><br><span class="line">ID_FS_UUID_ENC=<span class="number">7</span>a852eec-b32d-<span class="number">4</span>c0a-<span class="number">8</span>b8e-<span class="number">1</span>e056a67ee35</span><br><span class="line">ID_FS_TYPE=xfs</span><br><span class="line">ID_FS_USAGE=filesystem</span><br><span class="line">ID_PART_ENTRY_SCHEME=gpt</span><br><span class="line">ID_PART_ENTRY_NAME=ceph\x20data</span><br><span class="line">ID_PART_ENTRY_UUID=<span class="number">7</span>b321ca3-<span class="number">402</span>c-<span class="number">4557</span>-b121-<span class="number">887266</span>a1e1b8</span><br><span class="line">ID_PART_ENTRY_TYPE=<span class="number">4</span>fbd7e29-<span class="number">9</span>d25-<span class="number">41</span>b8-afd0-<span class="number">062</span>c0ceff05d</span><br><span class="line">ID_PART_ENTRY_NUMBER=<span class="number">1</span></span><br><span class="line">ID_PART_ENTRY_OFFSET=<span class="number">2048</span></span><br><span class="line">ID_PART_ENTRY_SIZE=<span class="number">204800</span></span><br><span class="line">ID_PART_ENTRY_DISK=<span class="number">8</span>:<span class="number">16</span></span><br></pre></td></tr></table></figure></p>
<p>匹配到这个属性就认为是集群的节点，可以挂载的，那么我们先改变这个<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># /usr/sbin/sgdisk --typecode=1:4fbd7e29-9d25-41b8-afd0-062c0ceff0f9 -- /dev/sdb</span></span><br><span class="line">[root@lab8106 ~]<span class="comment"># blkid -o udev -p /dev/sdb1</span></span><br><span class="line">ID_FS_UUID=<span class="number">7</span>a852eec-b32d-<span class="number">4</span>c0a-<span class="number">8</span>b8e-<span class="number">1</span>e056a67ee35</span><br><span class="line">ID_FS_UUID_ENC=<span class="number">7</span>a852eec-b32d-<span class="number">4</span>c0a-<span class="number">8</span>b8e-<span class="number">1</span>e056a67ee35</span><br><span class="line">ID_FS_TYPE=xfs</span><br><span class="line">ID_FS_USAGE=filesystem</span><br><span class="line">ID_PART_ENTRY_SCHEME=gpt</span><br><span class="line">ID_PART_ENTRY_NAME=ceph\x20data</span><br><span class="line">ID_PART_ENTRY_UUID=<span class="number">7</span>b321ca3-<span class="number">402</span>c-<span class="number">4557</span>-b121-<span class="number">887266</span>a1e1b8</span><br><span class="line">ID_PART_ENTRY_TYPE=<span class="number">4</span>fbd7e29-<span class="number">9</span>d25-<span class="number">41</span>b8-afd0-<span class="number">062</span>c0ceff0f9</span><br><span class="line">ID_PART_ENTRY_NUMBER=<span class="number">1</span></span><br><span class="line">ID_PART_ENTRY_OFFSET=<span class="number">2048</span></span><br><span class="line">ID_PART_ENTRY_SIZE=<span class="number">204800</span></span><br><span class="line">ID_PART_ENTRY_DISK=<span class="number">8</span>:<span class="number">16</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到type的属性已经被修改了<br>再次测试，可以看到已经不匹配了<br><img src="http://static.zybuluo.com/zphj1987/ek3ocgg9w584u07x0pg8lqc0/image.png" alt="image.png-14.1kB"></p>
<p>如果需要恢复就执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># /usr/sbin/sgdisk --typecode=1:4fbd7e29-9d25-41b8-afd0-062c0ceff05d -- /dev/sdb</span></span><br></pre></td></tr></table></figure></p>
<p>这里同样需要改掉相关的block盘的标记，否则一样被关联的挂载起来了</p>
<h2 id="总结">总结</h2><p>本篇用两种方法来实现了ceph osd的盘符的不自动挂载，这个一般情况下都不会用到，比较特殊的情况遇到了再这么处理就可以了，或者比较暴力的方法就是直接把挂载的匹配的规则全部取消掉，使用手动触发挂载的方式也行，这个方法很多，能够快速，简单的满足需求即可</p>
<p>此mount非彼mount，题图无关</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-09-07</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/mount.png" alt="此处输入图片的描述"><br></center>

<h2 id="前言">前言</h2><p>本篇来源于群里一个人的问题，有没有办法让ceph的磁盘不自动挂载，一般人的问题都是怎样让ceph能够自动挂载，在centos 7 平台下 ceph jewel版本以后都是有自动挂载的处理的，这个我之前也写过两篇文章 <a href="http://www.zphj1987.com/2016/03/31/ceph%E5%9C%A8centos7%E4%B8%8B%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%AE%B9%E6%98%93%E5%8F%91%E7%8E%B0%E7%9A%84%E6%94%B9%E5%8F%98/">ceph在centos7下一个不容易发现的改变</a>和<a href="http://www.zphj1987.com/2016/12/22/Ceph%E6%95%B0%E6%8D%AE%E7%9B%98%E6%80%8E%E6%A0%B7%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/">Ceph数据盘怎样实现自动挂载</a>，来讲述这个自动挂载的<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ceph OSD服务失效自动启动控制]]></title>
    <link href="http://www.zphj1987.com/2017/09/06/Ceph-OSD-autorestart-when-fail/"/>
    <id>http://www.zphj1987.com/2017/09/06/Ceph-OSD-autorestart-when-fail/</id>
    <published>2017-09-06T04:32:41.000Z</published>
    <updated>2017-09-06T05:34:31.655Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/restart.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>服务器上面的服务会因为各种各样的原因失败，磁盘故障，权限问题，或者是服务过载引起超时，这些都可能引起</p>
<p>这个在ceph里面systemctl unit 默认有个on-fail restart,默认的可能并不适合所有的场景，所以自动化的服务应该是尽量去适配你手动处理的过程，手动怎么处理的，就怎么去设置<br><a id="more"></a></p>
<h2 id="启动分析">启动分析</h2><p>如果有osd失败了，一般上去会先启动一次，尽快让服务启动，然后去检查是否有故障，如果失败了，就开启调试日志，再次重启，在问题解决之前，是不会再启动了，所以这里我们的自动启动设置也这么设置</p>
<h2 id="参数配置">参数配置</h2><p>ceph的osd的启动配置在这个配置文件</p>
<blockquote>
<p>/usr/lib/systemd/system/ceph-osd@.service</p>
</blockquote>
<p>默认参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Restart=on-failure</span><br><span class="line">StartLimitInterval=<span class="number">30</span>min</span><br><span class="line">StartLimitBurst=<span class="number">30</span></span><br><span class="line">RestartSec=<span class="number">20</span>s</span><br></pre></td></tr></table></figure></p>
<p>默认的参数意思是<br>在30min的周期内，如果没启动成功，那么在失败后20s进行启动，这样的启动尝试30次</p>
<p>这个在启动机器的时候，是尽量在osd启动失败的情况下，能够在30min分钟内尽量把服务都启动起来，这个对于关机启动后的控制是没问题的</p>
<p>参数解释：<br>StartLimitInterval不能设置太小，在osd崩溃的情况里面有一种是对象异常了，这个在启动了后，内部会加载一段时间的数据以后才会崩溃，所以RestartSec*StartLimitBurst 必须小于StartLimitInterval，否则可能出现无限重启的情况</p>
<p>restart的触发条件</p>
<table>
<thead>
<tr>
<th style="text-align:left">Restart settings/Exit causes</th>
<th style="text-align:center">always</th>
<th style="text-align:center">on-success</th>
<th style="text-align:center">on-failure</th>
<th style="text-align:center">on-abnormal</th>
<th style="text-align:center">on-abort</th>
<th style="text-align:center">on-watchdog</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Clean exit code or signal</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">Unclean exit code</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">Unclean signal</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">Timeout</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">Watchdog</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
</tr>
</tbody>
</table>
<p>可调整项目<br>Restart=always就是只要非正常的退出了，就满足重启的条件，kill -9 进程也能够自动启动</p>
<p>在osd崩溃的情况里面有一种情况是对象异常了，这个在启动了后，内部会加载一段时间的数据以后才会崩溃，这种崩溃的情况我们不需要尝试多次重启,所以适当降低重启频率<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">StartLimitBurst=<span class="number">3</span></span><br><span class="line">RestartSec=<span class="number">10</span>s</span><br></pre></td></tr></table></figure></p>
<p>这个设置后能够在运行的集群当中比较好的处理异常退出的情况，但是设置后就要注意关机osd osd启动的问题，一般关机的时候肯定是有人在维护的，所以这个问题不大，人为处理下就行</p>
<p>所以建议的参数是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Restart=always</span><br><span class="line">StartLimitInterval=<span class="number">30</span>min</span><br><span class="line">StartLimitBurst=<span class="number">3</span></span><br><span class="line">RestartSec=<span class="number">10</span>s</span><br></pre></td></tr></table></figure>
<p>可以根据自己的需要进行设置，这个设置下，停止osd就用systemctl 命令去 stop，然后其他的任何异常退出情况都会把osd给拉起来</p>
<h2 id="总结">总结</h2><p>systemctl在服务控制方面有着很丰富的功能，可以根据自己的需求进行调整，特别是对启动条件有约束的场景，这个是最适合的</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-09-06</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/restart.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>服务器上面的服务会因为各种各样的原因失败，磁盘故障，权限问题，或者是服务过载引起超时，这些都可能引起</p>
<p>这个在ceph里面systemctl unit 默认有个on-fail restart,默认的可能并不适合所有的场景，所以自动化的服务应该是尽量去适配你手动处理的过程，手动怎么处理的，就怎么去设置<br>]]>
    
    </summary>
    
      <category term="linux" scheme="http://www.zphj1987.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[osd磁盘空间足够无法写入数据的分析与解决]]></title>
    <link href="http://www.zphj1987.com/2017/09/04/osd-has-inode-cannot-write/"/>
    <id>http://www.zphj1987.com/2017/09/04/osd-has-inode-cannot-write/</id>
    <published>2017-09-04T15:06:17.000Z</published>
    <updated>2017-09-05T02:42:23.055Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/full.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>这个问题的来源是ceph社区里面一个群友的环境出现在85%左右的时候，启动osd报错，然后在本地文件系统当中进行touch文件的时候也是报错，df -i查询inode也是没用多少，使用的也是inode64挂载的，开始的时候排除了配置原因引起的，在ceph的邮件列表里面有一个相同<a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2016-October/013929.html" target="_blank" rel="external">问题</a>，也是没有得到解决</p>
<p>看到这个问题比较感兴趣，就花了点时间来解决来定位和解决这个问题，现在分享出来，如果有类似的生产环境，可以提前做好检查预防工作</p>
<h2 id="现象描述">现象描述</h2><p>ceph版本</p>
<blockquote>
<p>[root@lab8107 mnt]# ceph -v<br>ceph version 10.2.9 (2ee413f77150c0f375ff6f10edd6c8f9c7d060d0)<br>我复现的环境为这个版本<br><a id="more"></a></p>
</blockquote>
<p>查询使用空间</p>
<p><img src="http://static.zybuluo.com/zphj1987/mqyxyf1tthpo3596f0gt6ujj/image.png" alt="image.png-19.8kB"><br>可以看到空间才使用了54%<br><img src="http://static.zybuluo.com/zphj1987/434y23gzh7mhy3sjzmv9f8wg/image.png" alt="image.png-28kB"><br>可以看到，inode剩余比例很多，而文件确实无法创建</p>
<p>这个时候把一个文件mv出来，然后又可以创建了，并且可以写入比mv出来的文件更大的文件，写完一个无法再写入更多文件了</p>
<p>这里有个初步判断，不是容量写完了，而是文件的个数限制住了</p>
<p>那么来查询下文件系统的inode还剩余多少，xfs文件系统的inode是动态分配的，我们先检查无法写入的文件系统的<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xfs_db -r -c <span class="string">"sb 0"</span> -c <span class="string">"p"</span> -c <span class="string">"freesp -s"</span> /dev/sdb1|grep ifree</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/eqn4pcu0bj7rz5bn2rfum7pj/image.png" alt="image.png-5.1kB"><br>可以看到剩余的inode确实为0，这里确实是没有剩余inode了，所以通过df -i来判断inode是否用完并不准确，那个是已经使用值与理论值的相除的结果</p>
<p>查询xfs碎片，也是比例很低</p>
<h2 id="定位问题">定位问题</h2><p>首先查看xfs上面的数据结构<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xfs_db -r -c <span class="string">"sb 0"</span> -c <span class="string">"p"</span> -c <span class="string">"freesp -s "</span> /dev/sdb1</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/2a48824pncg1g9up7n1npud3/image.png" alt="image.png-13.7kB"></p>
<p>上面的输出结果这里简单解释一下，这里我也是反复比对和查看资料才理解这里的意思，这里有篇<a href="https://www.novell.com/support/kb/doc.php?id=7014320" target="_blank" rel="external">novell</a>的资料有提到这个，这里我再拿一个刚刚格式化完的分区结果来看下<br><img src="http://static.zybuluo.com/zphj1987/p1c3mb2e5kfypt4kw2ow9tm6/image.png" alt="image.png-14.3kB"></p>
<p>这里用我自己的理解来描述下，这个extents的剩余数目是动态变化的，刚分完区的那个，有4个1048576-1220608左右的逻辑区间，而上面的无法写入数据的数据结构，剩下的extent的平均大小为22个block，而这样的blocks总数有1138886个，占总体的99.85，也就是剩余的空间的的extents所覆盖的区域全部是16个block到31个block的这种空洞，相当于蛋糕被切成很多小块了，大的都拿走了，剩下的总量还很多，但是都是很小的碎蛋糕，所以也没法取了</p>
<p>默认来说inode chunk 为64 ，也就是需要64*inodesize的存储空间来存储inode，这个剩下的空间已经不够分配了</p>
<h2 id="解决办法">解决办法</h2><p>下个段落会讲下为什么会出现上面的情况，现在先说解决办法，把文件mv出来，然后mv进去，这个是在其他场景下的一个解决方法，这个操作要小心，因为有扩展属性，操作不小心会弄掉了，这里建议用另外一个办法xfs_dump的方法</p>
<p>我的环境比较小，20G的盘，如果盘大就准备大盘,这里是验证是否可行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xfsdump -L osd0 -M osd0 <span class="operator">-f</span> /mnt/osd0 /var/lib/ceph/osd/ceph-<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>还原回去<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 ceph-<span class="number">0</span>]<span class="comment"># xfsrestore -f /mnt/osd0 /var/lib/ceph/osd/ceph-0</span></span><br><span class="line">xfsrestore: using file dump (drive_simple) strategy</span><br><span class="line">xfsrestore: version <span class="number">3.1</span>.<span class="number">4</span> (dump format <span class="number">3.0</span>) - <span class="built_in">type</span> ^C <span class="keyword">for</span> status and control</span><br><span class="line">xfsrestore: ERROR: unable to create /var/lib/ceph/osd/ceph-<span class="number">0</span>/xfsrestorehousekeepingdir: No space left on device</span><br><span class="line">xfsrestore: Restore Status: ERROR</span><br></pre></td></tr></table></figure></p>
<p>直接还原还是会有问题,没有可以写的地方了，这里因为已经dump了一份，这里就mv pg的数据目录出去<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /var/lib/ceph/osd/ceph-<span class="number">0</span>/current/ /mnt</span><br></pre></td></tr></table></figure></p>
<p>开始还原<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xfsrestore  -o <span class="operator">-f</span> /mnt/osd0 /var/lib/ceph/osd/ceph-<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>还原以后如果有权限需要处理的就处理下权限，先检查下文件系统的数据结构<br><img src="http://static.zybuluo.com/zphj1987/r8fmdzz923pju8p48gqq0ma3/image.png" alt="image.png-19.6kB"><br>可以看到数据结构已经很理想了<br>然后启动osd<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart ceph-osd@<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>然后检查下数据是不是都可以正常写进去了</p>
<ul>
<li>如果出现了上面的空间已经满了的情况，处理的时候需要注意</li>
<li>备份好数据</li>
<li>单个盘进行处理</li>
<li>备份的数据先保留好以防万一</li>
<li>启动好了后，验证下集群的状态后再继续，可以尝试get下数据检查数据</li>
</ul>
<h2 id="为什么会出现这样">为什么会出现这样</h2><p>我们在本地文件系统里面连续写100个文件<br>准备一个a文件里面有每行150个a字符，700行，这个文件大小就是100K<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 <span class="built_in">test</span>]<span class="comment"># seq 100|xargs -i dd if=a of=a&#123;&#125; bs=100K count=1</span></span><br></pre></td></tr></table></figure></p>
<p>检查文件的分布<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 <span class="built_in">test</span>]<span class="comment"># seq 100|xargs -i xfs_bmap -v a&#123;&#125; |less</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/cnx9c7dwm2vm1njym9c2ogc2/image.png" alt="image.png-47.1kB"></p>
<p>大部分情况下这个block的分配是连续的</p>
<p>先检查下当前的数据结构<br><img src="http://static.zybuluo.com/zphj1987/9065j88etksn793ewezr6fh3/image.png" alt="image.png-30.8kB"></p>
<p>我们把刚刚的100个对象put到集群里面去，监控下集群的数据目录的写入情况<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inotifywait -m --timefmt <span class="string">'%Y %B %d %H:%M:%S'</span> --format <span class="string">'%T %w %e %f'</span> -r -m /var/lib/ceph/osd/ceph-<span class="number">0</span>/</span><br></pre></td></tr></table></figure></p>
<p>put数据进去<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> `ls ./`;<span class="keyword">do</span> rados -p rbd put <span class="variable">$a</span> <span class="variable">$a</span>;<span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/l2bfn1hg02ot8oiz1bkpj2n4/image.png" alt="image.png-53.7kB"><br><img src="http://static.zybuluo.com/zphj1987/7myxv8qwe9cjrybah3gnoj5v/image.png" alt="image.png-64.2kB"><br>查看对象的数据，里面并没有连续起来，并且写入的数据的方式是:<br>打开文件，设置扩展属性，填充内容，设置属性，关闭，很多并发在一起做</p>
<p>写完的数据结构<br><img src="http://static.zybuluo.com/zphj1987/9njqf9rlqfd8mfefub9sqp39/image.png" alt="image.png-30.9kB"></p>
<p>结果就是在100K这个数据模型下，会产生很多小的block空隙，最后就是无法写完文件的情况，这里产生空隙并不是很大的问题，问题是这里剩下的空隙无法完成inode的动态分配的工作，这里跟一个格式化选项的变化有关</p>
<p>准备一个集群<br>然后写入(一直写)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rados -p rbd bench -b <span class="number">100</span>K <span class="number">6000</span> write --no-cleanup</span><br></pre></td></tr></table></figure></p>
<p>就可以必现这个问题，可以看到上面的从16-31 block的区间从 12 extents涨到了111 extents</p>
<h2 id="解决办法-1">解决办法</h2><p>用deploy在部署的时候默认的格式化参数为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span>_check_call: Running <span class="built_in">command</span>: /usr/sbin/mkfs -t xfs <span class="operator">-f</span> -i size=<span class="number">2048</span> -- /dev/sdb1</span><br></pre></td></tr></table></figure></p>
<p>这个isize设置的是2048，这个在后面剩余的空洞比较小的时候就无法写入新的数据了，所以在ceph里面存储100K这种小文件的场景的时候，把mkfs.xfs的isize改成默认的256就可以提前避免这个问题<br>修改 /usr/lib/python2.7/site-packages/ceph_disk/main.py的256行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xfs=[</span><br><span class="line">    <span class="comment"># xfs insists on not overwriting previous fs; even if we wipe</span></span><br><span class="line">    <span class="comment"># partition table, we often recreate it exactly the same way,</span></span><br><span class="line">    <span class="comment"># so we'll see ghosts of filesystems past</span></span><br><span class="line">    <span class="string">'-f'</span>,</span><br><span class="line">    <span class="string">'-i'</span>, <span class="string">'size=2048'</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p>
<p>改成<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">'-i'</span>, <span class="string">'size=256'</span>,</span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/crdjd24yzed9s0tdh8og3d1e/image.png" alt="image.png-24.4kB"><br>这个地方检查下是不是对的，然后就可以避免这个问题了，可以测试下是不是一直可以写到很多，我的这个测试环境写到91%还没问题</p>
<h2 id="总结">总结</h2><p>在特定的数据写入模型下，可能出现一些可能无法预料的问题，而参数的改变可能也没法覆盖所有场景，本篇就是其中的一个比较特殊的问题，定位好问题，在遇到的时候能够解决，或者提前避免掉</p>
<h2 id="后续">后续</h2><p>在升级了内核到<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 ~]<span class="comment"># uname  -a</span></span><br><span class="line">Linux lab8107 <span class="number">4.13</span>.<span class="number">0</span>-<span class="number">1</span>.el7.elrepo.x86_64 <span class="comment">#1 SMP Sun Sep 3 19:07:24 EDT 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure></p>
<p>升级xfsprogs到<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 ~]<span class="comment"># rpm -qa|grep xfsprogs</span></span><br><span class="line">xfsprogs-<span class="number">4.12</span>.<span class="number">0</span>-<span class="number">4</span>.el7.centos.x86_64</span><br></pre></td></tr></table></figure></p>
<p>重新部署osd，还是一样的isize=2048，一样的写入模型<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8107 ~]<span class="comment"># df -h /var/lib/ceph/osd/ceph-0</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sdb1       <span class="number">9.4</span>G  <span class="number">9.0</span>G  <span class="number">395</span>M  <span class="number">96</span>% /var/lib/ceph/osd/ceph-<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meta_uuid = <span class="number">00000000</span>-<span class="number">0000</span>-<span class="number">0000</span>-<span class="number">0000</span>-<span class="number">000000000000</span></span><br><span class="line">   from      to extents  blocks    pct</span><br><span class="line">      <span class="number">1</span>       <span class="number">1</span>     <span class="number">545</span>     <span class="number">545</span>   <span class="number">0.50</span></span><br><span class="line">      <span class="number">2</span>       <span class="number">3</span>     <span class="number">665</span>    <span class="number">1666</span>   <span class="number">1.52</span></span><br><span class="line">      <span class="number">4</span>       <span class="number">7</span>    <span class="number">1624</span>    <span class="number">8927</span>   <span class="number">8.12</span></span><br><span class="line">      <span class="number">8</span>      <span class="number">15</span>    <span class="number">1853</span>   <span class="number">19063</span>  <span class="number">17.34</span></span><br><span class="line">     <span class="number">16</span>      <span class="number">31</span>      <span class="number">19</span>     <span class="number">352</span>   <span class="number">0.32</span></span><br><span class="line">   <span class="number">4096</span>    <span class="number">8191</span>       <span class="number">1</span>    <span class="number">7694</span>   <span class="number">7.00</span></span><br><span class="line">  <span class="number">16384</span>   <span class="number">32767</span>       <span class="number">3</span>   <span class="number">71659</span>  <span class="number">65.20</span></span><br><span class="line">total free extents <span class="number">4710</span></span><br><span class="line">total free blocks <span class="number">109906</span></span><br><span class="line">average free extent size <span class="number">23.3346</span></span><br><span class="line">[root@lab8107 ~]<span class="comment"># xfs_db -r -c "sb 0" -c "p" -c "freesp -s " /dev/sdb1</span></span><br></pre></td></tr></table></figure>
<p>可以看到已经很少的稀疏空间了，留下比较大的空间，这个地方应该是优化了底层数据存储的算法</p>
<p>另外，xfs的inode是动态分配的,xfs官方也考虑到了这个可能空洞太多无法分配inode问题，这个是最新的mkfs.xfs的man page<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparse[=value]</span><br><span class="line">  Enable sparse inode chunk allocation. The value is either <span class="number">0</span> or <span class="number">1</span>, with <span class="number">1</span> signifying that sparse allocation is enabled.  If  the value  is omitted, <span class="number">1</span> is assumed. Sparse inode allocation is disabled by default. This feature is only available <span class="keyword">for</span> filesystems formatted with -m crc=<span class="number">1</span>.</span><br><span class="line">  </span><br><span class="line">   When enabled, sparse inode allocation allows the filesystem to allocate smaller than the  standard  <span class="number">64</span>-inode  chunk  when  free space  is  severely  limited. This feature is useful <span class="keyword">for</span> filesystems that might fragment free space over time such that no free extents are large enough to accommodate a chunk of <span class="number">64</span> inodes. Without this feature enabled, inode allocations can fail with out of space errors under severe fragmented free space conditions.</span><br></pre></td></tr></table></figure></p>
<p>是以64个inode为chunk来进行动态分配的，应该是有两个chunk，也就是动态查询看到的是128个inode以下，在更新到最新的版本以后，因为已经没有那么多空洞了，所以即使在没开这个稀疏inode的情况下，ceph的小文件也能够把磁盘写满</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-09-04</td>
</tr>
<tr>
<td style="text-align:center">增加更新内核和xfsprogs的验证</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-09-05</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/full.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>这个问题的来源是ceph社区里面一个群友的环境出现在85%左右的时候，启动osd报错，然后在本地文件系统当中进行touch文件的时候也是报错，df -i查询inode也是没用多少，使用的也是inode64挂载的，开始的时候排除了配置原因引起的，在ceph的邮件列表里面有一个相同<a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2016-October/013929.html">问题</a>，也是没有得到解决</p>
<p>看到这个问题比较感兴趣，就花了点时间来解决来定位和解决这个问题，现在分享出来，如果有类似的生产环境，可以提前做好检查预防工作</p>
<h2 id="现象描述">现象描述</h2><p>ceph版本</p>
<blockquote>
<p>[root@lab8107 mnt]# ceph -v<br>ceph version 10.2.9 (2ee413f77150c0f375ff6f10edd6c8f9c7d060d0)<br>我复现的环境为这个版本<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为什么关不掉所有的OSD]]></title>
    <link href="http://www.zphj1987.com/2017/08/21/why-can-not-stop-allosd/"/>
    <id>http://www.zphj1987.com/2017/08/21/why-can-not-stop-allosd/</id>
    <published>2017-08-21T05:39:09.000Z</published>
    <updated>2017-08-21T06:03:03.343Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>碰到一个cepher问了一个问题：</p>
<blockquote>
<p>为什么我的OSD关闭到最后有92个OSD无法关闭,总共的OSD有300个左右</p>
</blockquote>
<p>想起来在很久以前帮人处理过一次问题，当时环境是遇上了一个BUG，需要升级到新版本进行解决，然后当时我来做操作，升级以后，发现osd无法启动，进程在，状态无法更新，当时又回滚回去，就可以了，当时好像是K版本升级到J版本，想起来之前看过这个版本里面有数据结构的变化，需要把osd全部停掉以后才能升级，然后就stop掉所有osd，当时发现有的osd还是无法stop，然后就手动去标记了，然后顺利升级<br><a id="more"></a><br>今天这个现象应该跟当时是一个问题，然后搜索了一番参数以后，最后定位在确实是参数进行了控制</p>
<h2 id="实践">实践</h2><p>我的一个8个osd的单机环境，对所有OSD进行stop以后就是这个状态，还有2个状态无法改变<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># ceph -s</span></span><br><span class="line">    cluster <span class="number">49</span>ee8a7f-fb7c-<span class="number">4239</span><span class="operator">-a</span>4b7-acf0bc37430d</span><br><span class="line">     health HEALTH_ERR</span><br><span class="line">            <span class="number">295</span> pgs are stuck inactive <span class="keyword">for</span> more than <span class="number">300</span> seconds</span><br><span class="line">            <span class="number">295</span> pgs stale</span><br><span class="line">            <span class="number">295</span> pgs stuck stale</span><br><span class="line">            too many PGs per OSD (<span class="number">400</span> &gt; max <span class="number">300</span>)</span><br><span class="line">     monmap e1: <span class="number">1</span> mons at &#123;lab8106=<span class="number">192.168</span>.<span class="number">8.106</span>:<span class="number">6789</span>/<span class="number">0</span>&#125;</span><br><span class="line">            election epoch <span class="number">3</span>, quorum <span class="number">0</span> lab8106</span><br><span class="line">     osdmap e77: <span class="number">8</span> osds: <span class="number">2</span> up, <span class="number">2</span> <span class="keyword">in</span>; <span class="number">178</span> remapped pgs</span><br><span class="line">            flags sortbitwise,require_jewel_osds</span><br><span class="line">      pgmap v296: <span class="number">400</span> pgs, <span class="number">1</span> pools, <span class="number">0</span> bytes data, <span class="number">0</span> objects</span><br><span class="line">            <span class="number">76440</span> kB used, <span class="number">548</span> GB / <span class="number">548</span> GB avail</span><br><span class="line">                 <span class="number">295</span> stale+active+clean</span><br><span class="line">                 <span class="number">105</span> active+clean</span><br></pre></td></tr></table></figure></p>
<p>看下这组参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mon_osd_min_up_ratio = <span class="number">0.3</span></span><br><span class="line">mon_osd_min_<span class="keyword">in</span>_ratio = <span class="number">0.3</span></span><br></pre></td></tr></table></figure></p>
<p>我们修改成0 后再测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mon_osd_min_up_ratio = <span class="number">0</span></span><br><span class="line">mon_osd_min_<span class="keyword">in</span>_ratio = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>停止进程<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop ceph-osd.target</span><br></pre></td></tr></table></figure></p>
<p>查看状态<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># ceph -s</span></span><br><span class="line">    cluster <span class="number">49</span>ee8a7f-fb7c-<span class="number">4239</span><span class="operator">-a</span>4b7-acf0bc37430d</span><br><span class="line">     health HEALTH_ERR</span><br><span class="line">            <span class="number">48</span> pgs are stuck inactive <span class="keyword">for</span> more than <span class="number">300</span> seconds</span><br><span class="line">            <span class="number">85</span> pgs degraded</span><br><span class="line">            <span class="number">15</span> pgs peering</span><br><span class="line">            <span class="number">400</span> pgs stale</span><br><span class="line">            <span class="number">48</span> pgs stuck inactive</span><br><span class="line">            <span class="number">48</span> pgs stuck unclean</span><br><span class="line">            <span class="number">85</span> pgs undersized</span><br><span class="line">            <span class="number">8</span>/<span class="number">8</span> <span class="keyword">in</span> osds are down</span><br><span class="line">     monmap e1: <span class="number">1</span> mons at &#123;lab8106=<span class="number">192.168</span>.<span class="number">8.106</span>:<span class="number">6789</span>/<span class="number">0</span>&#125;</span><br><span class="line">            election epoch <span class="number">4</span>, quorum <span class="number">0</span> lab8106</span><br><span class="line">     osdmap e86: <span class="number">8</span> osds: <span class="number">0</span> up, <span class="number">8</span> <span class="keyword">in</span></span><br><span class="line">            flags sortbitwise,require_jewel_osds</span><br><span class="line">      pgmap v310: <span class="number">400</span> pgs, <span class="number">1</span> pools, <span class="number">0</span> bytes data, <span class="number">0</span> objects</span><br><span class="line">            <span class="number">286</span> MB used, <span class="number">2193</span> GB / <span class="number">2194</span> GB avail</span><br><span class="line">                 <span class="number">300</span> stale+active+clean</span><br><span class="line">                  <span class="number">85</span> stale+undersized+degraded+peered</span><br><span class="line">                  <span class="number">15</span> stale+peering</span><br></pre></td></tr></table></figure></p>
<p>可以看到状态已经可以正常全部关闭了</p>
<h2 id="分析">分析</h2><p>这里不清楚官方做这个的理由，个人推断是这样的，默认的副本为3，那么在集群有三分之二的OSD都挂掉了以后，再出现OSD挂掉的情况下，这个集群其实就是一个废掉的状态的集群，而这个时候，还去触发down和out，对于环境来说已经是无效的操作了，触发的迁移也属于无效的迁移了，这个时候保持一个最终的可用的osdmap状态，对于整个环境的恢复也有一个基准点</p>
<p>在Luminous版本中已经把这个参数改成</p>
<blockquote>
<p>mon_osd min_up_ratio = 0.3<br>mon_osd_min_in_ratio = 0.75</p>
</blockquote>
<p>来降低其他异常情况引起的down，来避免过量的迁移</p>
<h2 id="总结">总结</h2><p>本篇就是一个参数的实践</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-08-21</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>碰到一个cepher问了一个问题：</p>
<blockquote>
<p>为什么我的OSD关闭到最后有92个OSD无法关闭,总共的OSD有300个左右</p>
</blockquote>
<p>想起来在很久以前帮人处理过一次问题，当时环境是遇上了一个BUG，需要升级到新版本进行解决，然后当时我来做操作，升级以后，发现osd无法启动，进程在，状态无法更新，当时又回滚回去，就可以了，当时好像是K版本升级到J版本，想起来之前看过这个版本里面有数据结构的变化，需要把osd全部停掉以后才能升级，然后就stop掉所有osd，当时发现有的osd还是无法stop，然后就手动去标记了，然后顺利升级<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于scrub的详细分析和建议]]></title>
    <link href="http://www.zphj1987.com/2017/08/19/about-scrub-suggestion/"/>
    <id>http://www.zphj1987.com/2017/08/19/about-scrub-suggestion/</id>
    <published>2017-08-19T15:08:56.000Z</published>
    <updated>2017-08-21T06:02:44.778Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/scrub.png" alt="scrub"><br></center>

<h2 id="前言">前言</h2><p>关于scrub这块一直想写一篇文章的，这个在很久前，就做过一次测试，当时是看这个scrub到底有多大的影响，当时看到的是磁盘读占很高，启动deep-scrub后会有大量的读,前端可能会出现 slow request,这个是当时测试看到的现象，一个比较简单的处理办法就是直接给scrub关掉了，当然关掉了就无法检测底层到底有没有对象不一致的问题<br>关于这个scrub生产上是否开启，仁者见仁，智者见智，就是选择的问题了，这里不做讨论，个人觉得开和关都有各自的道理，本篇是讲述的如果想开启的情况下如何把scrub给控制住<br><a id="more"></a><br>最近在ceph群里看到一段大致这样的讨论：</p>
<blockquote>
<p>scrub是个坑<br>小文件多的场景一定要把scrub关掉<br>单pg的文件量达到一定规模，scrub一开就会有slow request<br>这个问题解决不了</p>
</blockquote>
<p>上面的说法有没有问题呢？在一般情况下来看，确实如此，但是我们是否能尝试去解决下这个问题，或者缓解下呢？那么我们就来尝试下</p>
<h2 id="scrub的一些追踪">scrub的一些追踪</h2><p>下面的一些追踪并不涉及代码，仅仅从配置和日志的观测来看看scrub到底干了什么</p>
<h3 id="环境准备">环境准备</h3><p>我的环境为了便于观测，配置的是一个pg的存储池，然后往这个pg里面put了100个对象，然后对这个pg做deep-scrub，deep-scrub比scrub对磁盘的压力要大些，所以本篇主要是去观测的deep-scrub</p>
<h4 id="开启对pg目录的访问的监控">开启对pg目录的访问的监控</h4><p>使用的是inotifywait，我想看下deep-scrub的时候，pg里面的对象到底接收了哪些请求</p>
<p>inotifywait -m 1.0_head<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">1.0</span>_head/ OPEN,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_NOWRITE,CLOSE,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ OPEN,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_NOWRITE,CLOSE,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a16__head_8FA46F40__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a16__head_8FA46F40__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a39__head_621FD720__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a39__head_621FD720__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a30__head_655287E0__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a30__head_655287E0__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a91__head_B02EE3D0__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a91__head_B02EE3D0__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a33__head_9E9E3E30__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a33__head_9E9E3E30__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a92__head_6AFC6B30__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a92__head_6AFC6B30__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a22__head_AC48AAB0__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a22__head_AC48AAB0__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a42__head_76B90AC8__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a42__head_76B90AC8__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a5__head_E5A1A728__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a5__head_E5A1A728__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a34__head_4D9ABA68__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a34__head_4D9ABA68__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a69__head_7AF2B6E8__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a69__head_7AF2B6E8__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a95__head_BD3695B8__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a95__head_BD3695B8__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a67__head_6BCD37B8__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a67__head_6BCD37B8__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a10__head_F0F08AF8__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a10__head_F0F08AF8__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a3__head_88EF0BF8__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a3__head_88EF0BF8__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a82__head_721BC094__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a82__head_721BC094__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a48__head_27A729D4__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a48__head_27A729D4__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a36__head_F63E6AF4__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a36__head_F63E6AF4__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a29__head_F06D540C__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a29__head_F06D540C__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a31__head_AC83164C__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a31__head_AC83164C__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a59__head_884F9B6C__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a59__head_884F9B6C__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a58__head_06954F6C__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a58__head_06954F6C__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a55__head_2A42E61C__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a55__head_2A42E61C__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a90__head_1B88FEDC__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a90__head_1B88FEDC__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_NOWRITE,CLOSE,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ OPEN,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_NOWRITE,CLOSE,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a100__head_C29E0C42__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a100__head_C29E0C42__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a15__head_87123BE2__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a15__head_87123BE2__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a23__head_AABFFB92__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a23__head_AABFFB92__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a41__head_4EA9A5D2__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a41__head_4EA9A5D2__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a85__head_83760D72__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a85__head_83760D72__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a72__head_8A105D72__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a72__head_8A105D72__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a60__head_5536480A__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a60__head_5536480A__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a73__head_F1819D0A__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a73__head_F1819D0A__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a78__head_6929D12A__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a78__head_6929D12A__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a57__head_2C43153A__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a57__head_2C43153A__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a1__head_51903B7A__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a1__head_51903B7A__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a12__head_14D7ABC6__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a12__head_14D7ABC6__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a63__head_9490B166__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a63__head_9490B166__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a53__head_DF95B716__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a53__head_DF95B716__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a13__head_E09E0896__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a13__head_E09E0896__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a27__head_7ED31896__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a27__head_7ED31896__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a43__head_7052A656__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a43__head_7052A656__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a28__head_E6257CD6__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a28__head_E6257CD6__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a35__head_ACABD736__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a35__head_ACABD736__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a54__head_B9482876__1</span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_WRITE,CLOSE a12__head_14D7ABC6__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a54__head_B9482876__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a4__head_F12ACA76__1</span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_WRITE,CLOSE a63__head_9490B166__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a4__head_F12ACA76__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a84__head_B033038E__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a84__head_B033038E__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a19__head_D6A64F9E__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a19__head_D6A64F9E__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a93__head_F54E757E__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a93__head_F54E757E__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a7__head_1F08F77E__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a7__head_1F08F77E__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_NOWRITE,CLOSE,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ OPEN,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_NOWRITE,CLOSE,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a9__head_635C6201__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a9__head_635C6201__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a11__head_12780121__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a11__head_12780121__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a50__head_5E524321__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a50__head_5E524321__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a75__head_27E1CB21__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a75__head_27E1CB21__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a21__head_69ACD1A1__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a21__head_69ACD1A1__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a25__head_698E7751__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a25__head_698E7751__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a44__head_57E29949__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a44__head_57E29949__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a66__head_944E79C9__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a66__head_944E79C9__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a52__head_DAC6BF29__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a52__head_DAC6BF29__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a14__head_295EA1A9__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a14__head_295EA1A9__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a70__head_62941259__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a70__head_62941259__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a18__head_53B48959__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a18__head_53B48959__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a17__head_7D103759__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a17__head_7D103759__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a6__head_9505BEF9__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a6__head_9505BEF9__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a77__head_88A7CC25__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a77__head_88A7CC25__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a37__head_141AFE65__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a37__head_141AFE65__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a74__head_90DAAD15__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a74__head_90DAAD15__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a32__head_B7957195__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a32__head_B7957195__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a45__head_CCCFB5D5__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a45__head_CCCFB5D5__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a24__head_3B937275__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a24__head_3B937275__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a26__head_2AB240F5__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a26__head_2AB240F5__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a89__head_8E387EF5__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a89__head_8E387EF5__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a80__head_6FEFE78D__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a80__head_6FEFE78D__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a51__head_0BCC72CD__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a51__head_0BCC72CD__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a71__head_88F4796D__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a71__head_88F4796D__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_NOWRITE,CLOSE,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ OPEN,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_NOWRITE,CLOSE,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a88__head_B0A64FED__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a88__head_B0A64FED__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a8__head_F885EA9D__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a8__head_F885EA9D__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a83__head_1322679D__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a83__head_1322679D__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a76__head_B8285A7D__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a76__head_B8285A7D__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a94__head_D3BBB683__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a94__head_D3BBB683__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a46__head_E2C6C983__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a46__head_E2C6C983__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a56__head_A1E888C3__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a56__head_A1E888C3__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a99__head_DD3B45C3__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a99__head_DD3B45C3__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a79__head_AC19FC13__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a79__head_AC19FC13__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a81__head_BC0AFFF3__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a81__head_BC0AFFF3__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a64__head_C042B84B__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a64__head_C042B84B__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a97__head_29054B4B__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a97__head_29054B4B__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a96__head_BAAC0DCB__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a96__head_BAAC0DCB__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a62__head_84A40AAB__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a62__head_84A40AAB__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a98__head_C15FD53B__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a98__head_C15FD53B__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a87__head_12F9237B__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a87__head_12F9237B__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a2__head_E2983C17__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a2__head_E2983C17__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a20__head_7E477A77__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a20__head_7E477A77__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a49__head_3ADEC577__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a49__head_3ADEC577__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a61__head_C860ABF7__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a61__head_C860ABF7__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a68__head_BC5C8F8F__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a68__head_BC5C8F8F__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a38__head_78AE322F__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a38__head_78AE322F__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a65__head_7EE57AEF__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a65__head_7EE57AEF__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a47__head_B6C48D1F__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a47__head_B6C48D1F__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a86__head_7FB2C85F__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a86__head_7FB2C85F__1</span><br><span class="line"><span class="number">1.0</span>_head/ OPEN,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_NOWRITE,CLOSE,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ OPEN,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ CLOSE_NOWRITE,CLOSE,ISDIR </span><br><span class="line"><span class="number">1.0</span>_head/ OPEN a40__head_5F0404DF__1</span><br><span class="line"><span class="number">1.0</span>_head/ ACCESS a40__head_5F0404DF__1</span><br></pre></td></tr></table></figure></p>
<p>在给osd.0开启debug_osd=20后观测chunky相关的日志<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ceph]<span class="comment"># cat ceph-osd.0.log |grep chunky:1|grep handle_replica_op</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">18</span> <span class="number">23</span>:<span class="number">50</span>:<span class="number">40.262448</span> <span class="number">7</span>f2ac583c700 <span class="number">10</span> osd.<span class="number">0</span> <span class="number">26</span> handle_replica_op replica scrub(pg: <span class="number">1.0</span>,from:<span class="number">0</span><span class="string">'0,to:22'</span><span class="number">2696</span>,epoch:<span class="number">26</span>,start:<span class="number">1</span>:<span class="number">00000000</span>::::head,end:<span class="number">1</span>:<span class="number">42307943</span>:::a100:<span class="number">0</span>,chunky:<span class="number">1</span>,deep:<span class="number">1</span>,seed:<span class="number">4294967295</span>,version:<span class="number">6</span>) v6 epoch <span class="number">26</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">18</span> <span class="number">23</span>:<span class="number">50</span>:<span class="number">40.294637</span> <span class="number">7</span>f2ac583c700 <span class="number">10</span> osd.<span class="number">0</span> <span class="number">26</span> handle_replica_op replica scrub(pg: <span class="number">1.0</span>,from:<span class="number">0</span><span class="string">'0,to:22'</span><span class="number">2694</span>,epoch:<span class="number">26</span>,start:<span class="number">1</span>:<span class="number">42307943</span>:::a100:<span class="number">0</span>,end:<span class="number">1</span>:<span class="number">80463</span>ac6:::a9:<span class="number">0</span>,chunky:<span class="number">1</span>,deep:<span class="number">1</span>,seed:<span class="number">4294967295</span>,version:<span class="number">6</span>) v6 epoch <span class="number">26</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">18</span> <span class="number">23</span>:<span class="number">50</span>:<span class="number">40.320986</span> <span class="number">7</span>f2ac583c700 <span class="number">10</span> osd.<span class="number">0</span> <span class="number">26</span> handle_replica_op replica scrub(pg: <span class="number">1.0</span>,from:<span class="number">0</span><span class="string">'0,to:22'</span><span class="number">2690</span>,epoch:<span class="number">26</span>,start:<span class="number">1</span>:<span class="number">80463</span>ac6:::a9:<span class="number">0</span>,end:<span class="number">1</span>:b7f2650d:::a88:<span class="number">0</span>,chunky:<span class="number">1</span>,deep:<span class="number">1</span>,seed:<span class="number">4294967295</span>,version:<span class="number">6</span>) v6 epoch <span class="number">26</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">18</span> <span class="number">23</span>:<span class="number">50</span>:<span class="number">40.337646</span> <span class="number">7</span>f2ac583c700 <span class="number">10</span> osd.<span class="number">0</span> <span class="number">26</span> handle_replica_op replica scrub(pg: <span class="number">1.0</span>,from:<span class="number">0</span><span class="string">'0,to:22'</span><span class="number">2700</span>,epoch:<span class="number">26</span>,start:<span class="number">1</span>:b7f2650d:::a88:<span class="number">0</span>,end:<span class="number">1</span>:fb2020fa:::a40:<span class="number">0</span>,chunky:<span class="number">1</span>,deep:<span class="number">1</span>,seed:<span class="number">4294967295</span>,version:<span class="number">6</span>) v6 epoch <span class="number">26</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">18</span> <span class="number">23</span>:<span class="number">50</span>:<span class="number">40.373227</span> <span class="number">7</span>f2ac583c700 <span class="number">10</span> osd.<span class="number">0</span> <span class="number">26</span> handle_replica_op replica scrub(pg: <span class="number">1.0</span>,from:<span class="number">0</span><span class="string">'0,to:22'</span><span class="number">2636</span>,epoch:<span class="number">26</span>,start:<span class="number">1</span>:fb2020fa:::a40:<span class="number">0</span>,end:MAX,chunky:<span class="number">1</span>,deep:<span class="number">1</span>,seed:<span class="number">4294967295</span>,version:<span class="number">6</span>) v6 epoch <span class="number">26</span></span><br></pre></td></tr></table></figure></p>
<p>截取关键部分看下，如图<br><img src="http://static.zybuluo.com/zphj1987/2zxne6hdwre1fnrqd5xiabzu/image.png" alt="a100"><br>我们看下上面的文件访问监控里面这些对象在什么位置<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">25</span>:<span class="number">1.0</span>_head/ ACCESS a100__head_C29E0C42__1</span><br><span class="line"><span class="number">50</span>:<span class="number">1.0</span>_head/ ACCESS a9__head_635C6201__1</span><br><span class="line"><span class="number">75</span>:<span class="number">1.0</span>_head/ ACCESS a88__head_B0A64FED__1</span><br><span class="line"><span class="number">100</span>:<span class="number">1.0</span>_head/ ACCESS a40__head_5F0404DF__1</span><br></pre></td></tr></table></figure></p>
<p>看上去是不是很有规律，这个地方在ceph里面会有个chunk的概念，在做scrub的时候，ceph会对这个chunk进行加锁，这个可以在很多地方看到这个，这个也就是为什么有slow request，并不一定是你的磁盘慢了，而是加了锁，就没法读的</p>
<blockquote>
<p>osd scrub chunk min</p>
<p>Description:    The minimal number of object store chunks to scrub during single operation. Ceph blocks writes to single chunk during scrub.<br>Type:    32-bit Integer<br>Default:    5</p>
</blockquote>
<p>从配置文件上面看说是会锁住写，没有提及读的锁定的问题，那么我们下面验证下这个问题，到底deep-scrub，是不是会引起读的slow request</p>
<p>上面的环境100个对象，现在把100个对象的大小调整为100M一个，并且chunk设置为100个对象的，也就是我把我这个环境所有的对象认为是一个大的chunk，然后去用rados读取这个对象，来看下会发生什么</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">osd_scrub_chunk_min = <span class="number">100</span></span><br><span class="line">osd_scrub_chunk_max = <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>使用ceph -w监控<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">19</span>:<span class="number">26.045032</span> mon.<span class="number">0</span> [INF] pgmap v377: <span class="number">1</span> pgs: <span class="number">1</span> active+clean+scrubbing+deep; <span class="number">10000</span> MB data, <span class="number">30103</span> MB used, <span class="number">793</span> GB / <span class="number">822</span> GB avail</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">19</span>:<span class="number">17.540413</span> osd.<span class="number">0</span> [WRN] <span class="number">1</span> slow requests, <span class="number">1</span> included below; oldest blocked <span class="keyword">for</span> &gt; <span class="number">30.398705</span> secs</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">19</span>:<span class="number">17.540456</span> osd.<span class="number">0</span> [WRN] slow request <span class="number">30.398705</span> seconds old, received at <span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">18</span>:<span class="number">47.141483</span>: replica scrub(pg: <span class="number">1.0</span>,from:<span class="number">0</span><span class="string">'0,to:26'</span><span class="number">5200</span>,epoch:<span class="number">32</span>,start:<span class="number">1</span>:<span class="number">00000000</span>::::head,end:MAX,chunky:<span class="number">1</span>,deep:<span class="number">1</span>,seed:<span class="number">4294967295</span>,version:<span class="number">6</span>) currently reached_pg</span><br></pre></td></tr></table></figure></p>
<p>我从deep scrub 一开始就进行a40对象的get rados -p rbd get a40 a40，直接就卡着不返回，在pg内对象不变的情况下，对pg做scrub的顺序是不变的，我专门挑了我这个scrub顺序下最后一个scrub的对象来做get，还是出现了slow request ，这个可以证明上面的推断，也就是在做scrub的时候，对scub的chunk的对象的读取请求也会卡死，现在我把我的scrub的chunk弄成1看下会发生什么</p>
<p>配置参数改成<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">osd_scrub_chunk_min = <span class="number">1</span></span><br><span class="line">osd_scrub_chunk_max = <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch -n <span class="number">1</span> <span class="string">'rados -p rbd get a9 a1'</span></span><br><span class="line">watch -n <span class="number">1</span> <span class="string">'rados -p rbd get a9 a2'</span></span><br><span class="line">watch -n <span class="number">1</span> <span class="string">'rados -p rbd get a9 a3'</span></span><br><span class="line">watch -n <span class="number">1</span> <span class="string">'rados -p rbd get a9 a4'</span></span><br><span class="line">watch -n <span class="number">1</span> <span class="string">'rados -p rbd get a9 a5'</span></span><br></pre></td></tr></table></figure>
<p>使用五个请求同时去get a9,循环的去做</p>
<p>然后做deep scrub，这一次并没有出现slow  request 的情况</p>
<h3 id="另外一个重要参数">另外一个重要参数</h3><p>再看看这个参数osd_scrub_sleep = 0</p>
<blockquote>
<p>osd scrub sleep</p>
<p>Description:    Time to sleep before scrubbing next group of chunks. Increasing this value will slow down whole scrub operation while client operations will be less impacted.<br>Type:    Float<br>Default:    0</p>
</blockquote>
<p>可以看到还有scrub group这个概念，从数据上分析这个group 是3，也就是3个chunks<br>我们来设置下</p>
<blockquote>
<p>osd_scrub_sleep = 5</p>
</blockquote>
<p>然后再次做deep-scrub,然后看下日志的内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /var/<span class="built_in">log</span>/ceph/ceph-osd.<span class="number">0</span>.log |grep be_deep_scrub|awk <span class="string">'&#123;print $1,$2,$28&#125;'</span>|less</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">37.930455</span> <span class="number">1</span>:<span class="number">02</span>f625f1:::a16:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">38.477271</span> <span class="number">1</span>:<span class="number">02</span>f625f1:::a16:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">38.477367</span> <span class="number">1</span>:<span class="number">04</span>ebf846:::a39:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">39.023952</span> <span class="number">1</span>:<span class="number">04</span>ebf846:::a39:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">39.024084</span> <span class="number">1</span>:<span class="number">07</span>e14aa6:::a30:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">39.572683</span> <span class="number">1</span>:<span class="number">07</span>e14aa6:::a30:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">44.989551</span> <span class="number">1</span>:<span class="number">0</span>bc7740d:::a91:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">45.556758</span> <span class="number">1</span>:<span class="number">0</span>bc7740d:::a91:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">45.556857</span> <span class="number">1</span>:<span class="number">0</span>c7c7979:::a33:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">46.109657</span> <span class="number">1</span>:<span class="number">0</span>c7c7979:::a33:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">46.109768</span> <span class="number">1</span>:<span class="number">0</span><span class="built_in">cd</span>63f56:::a92:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">46.657849</span> <span class="number">1</span>:<span class="number">0</span><span class="built_in">cd</span>63f56:::a92:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">52.084712</span> <span class="number">1</span>:<span class="number">0</span>d551235:::a22:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">52.614345</span> <span class="number">1</span>:<span class="number">0</span>d551235:::a22:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">52.614458</span> <span class="number">1</span>:<span class="number">13509</span>d6e:::a42:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">53.158826</span> <span class="number">1</span>:<span class="number">13509</span>d6e:::a42:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">48</span>:<span class="number">53.158916</span> <span class="number">1</span>:<span class="number">14</span>e585a7:::a5:head</span><br></pre></td></tr></table></figure></p>
<p>可以看到1s做一个对象的deep-scrub，然后在做了3个对象后就停止了5s</p>
<h3 id="默认情况下的scrub和修改后的对比">默认情况下的scrub和修改后的对比</h3><p>我们来计算下在修改前后的情况对比，我们来模拟pg里面有10000个对象的情况小文件 测试的文件都是1K的，这个可以根据自己的文件模型进行测试</p>
<p>假设是海量对象的场景，那么算下来单pg 1w左右对象左右也算比较多了，我们就模拟10000个对象的场景的deep-scrub<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /var/<span class="built_in">log</span>/ceph/ceph-osd.<span class="number">0</span>.log |grep be_deep_scrub|awk <span class="string">'&#123;print $1,$2,$28&#125;'</span>|awk <span class="string">'&#123;sub(/.*/,substr($2,1,8),$2); print $0&#125;'</span>|uniq|awk <span class="string">'&#123;a[$1," ",$2]++&#125;END&#123;for (j in a) print j,a[j]|"sort -k 1"&#125;'</span></span><br></pre></td></tr></table></figure></p>
<p>使用上面的脚本统计每秒scrub的对象数目<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">33</span> <span class="number">184</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">34</span> <span class="number">236</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">35</span> <span class="number">261</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">36</span> <span class="number">263</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">37</span> <span class="number">229</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">38</span> <span class="number">289</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">39</span> <span class="number">236</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">40</span> <span class="number">258</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">41</span> <span class="number">276</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">42</span> <span class="number">238</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">43</span> <span class="number">224</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">44</span> <span class="number">282</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">45</span> <span class="number">254</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">46</span> <span class="number">258</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">47</span> <span class="number">261</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">48</span> <span class="number">233</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">49</span> <span class="number">300</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">50</span> <span class="number">243</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">51</span> <span class="number">257</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">52</span> <span class="number">252</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">53</span> <span class="number">246</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">54</span> <span class="number">313</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">55</span> <span class="number">252</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">56</span> <span class="number">276</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">57</span> <span class="number">245</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">58</span> <span class="number">256</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">23</span>:<span class="number">59</span> <span class="number">307</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">00</span> <span class="number">276</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">01</span> <span class="number">310</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">02</span> <span class="number">220</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">03</span> <span class="number">250</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">04</span> <span class="number">313</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">05</span> <span class="number">265</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">06</span> <span class="number">304</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">07</span> <span class="number">262</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">08</span> <span class="number">308</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">09</span> <span class="number">263</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">10</span> <span class="number">293</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">11</span> <span class="number">42</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到1s 会扫300个对象左右，差不多40s钟就扫完了一个pg，默认25个对象一个trunk</p>
<p>这里可以打个比喻，在一条长为40m的马路上，一个汽车以1m/s速度前进，中间会有人来回穿，如果穿梭的人只有一两个可能没什么问题，但是一旦有40个人在这个区间进行穿梭的时候，可想而知碰撞的概率会有多大了</p>
<p>或者同一个文件被连续请求40次，那么对应到这里就是40个人在同一个位置不停的穿马路，这样撞上的概率是不是非常的大了？</p>
<p>上面说了这么多，那么我想如果整个看下来，应该知道怎么处理了<br>我们看下这样的全部为1的情况下，会出现什么情况<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">osd_scrub_chunk_min = <span class="number">1</span></span><br><span class="line">osd_scrub_chunk_max = <span class="number">1</span></span><br><span class="line">osd_scrub_sleep = <span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>这里减少chunk大小，相当于减少上面例子当中汽车的长度，原来25米的大卡车，变成1米的自行车了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ceph]<span class="comment"># cat /var/log/ceph/ceph-osd.0.log |grep be_deep_scrub|awk '&#123;print $1,$2,$28&#125;'</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">21.927440</span> <span class="number">1</span>:<span class="number">0000</span>b488:::a5471:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">21.931914</span> <span class="number">1</span>:<span class="number">0000</span>b488:::a5471:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">21.932039</span> <span class="number">1</span>:<span class="number">000</span>fbbcb:::a5667:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">21.933568</span> <span class="number">1</span>:<span class="number">000</span>fbbcb:::a5667:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">21.933646</span> <span class="number">1</span>:<span class="number">00134</span>ebd:::a1903:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">21.934972</span> <span class="number">1</span>:<span class="number">00134</span>ebd:::a1903:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">24.960697</span> <span class="number">1</span>:<span class="number">0018</span>f641:::a2028:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">24.966653</span> <span class="number">1</span>:<span class="number">0018</span>f641:::a2028:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">24.966733</span> <span class="number">1</span>:<span class="number">00197</span>a21:::a1463:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">24.967085</span> <span class="number">1</span>:<span class="number">00197</span>a21:::a1463:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">24.967162</span> <span class="number">1</span>:<span class="number">001</span>cb17d:::a1703:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">24.967492</span> <span class="number">1</span>:<span class="number">001</span>cb17d:::a1703:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">27.972252</span> <span class="number">1</span>:<span class="number">002</span>d911c:::a1585:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">27.976621</span> <span class="number">1</span>:<span class="number">002</span>d911c:::a1585:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">27.976740</span> <span class="number">1</span>:<span class="number">00301</span>acf:::a6131:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">27.977097</span> <span class="number">1</span>:<span class="number">00301</span>acf:::a6131:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">27.977181</span> <span class="number">1</span>:<span class="number">0039</span>a0a8:::a1840:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">27.979053</span> <span class="number">1</span>:<span class="number">0039</span>a0a8:::a1840:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">30.983556</span> <span class="number">1</span>:<span class="number">00484881</span>:::a8781:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">30.989098</span> <span class="number">1</span>:<span class="number">00484881</span>:::a8781:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">30.989181</span> <span class="number">1</span>:<span class="number">004</span>f234f:::a4402:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">30.989531</span> <span class="number">1</span>:<span class="number">004</span>f234f:::a4402:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">30.989626</span> <span class="number">1</span>:<span class="number">00531</span>b36:::a5251:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">30.989954</span> <span class="number">1</span>:<span class="number">00531</span>b36:::a5251:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">33.994419</span> <span class="number">1</span>:<span class="number">00584</span>c30:::a3374:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">34.001296</span> <span class="number">1</span>:<span class="number">00584</span>c30:::a3374:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">34.001378</span> <span class="number">1</span>:<span class="number">005</span>d6aa5:::a2115:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">34.002174</span> <span class="number">1</span>:<span class="number">005</span>d6aa5:::a2115:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">34.002287</span> <span class="number">1</span>:<span class="number">005</span>e0dfd:::a9945:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">34.002686</span> <span class="number">1</span>:<span class="number">005</span>e0dfd:::a9945:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">37.005645</span> <span class="number">1</span>:<span class="number">006320</span>f9:::a5207:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">37.011498</span> <span class="number">1</span>:<span class="number">006320</span>f9:::a5207:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">37.011655</span> <span class="number">1</span>:<span class="number">006</span>d32b4:::a7517:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">37.011998</span> <span class="number">1</span>:<span class="number">006</span>d32b4:::a7517:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">37.012111</span> <span class="number">1</span>:<span class="number">006</span>dae55:::a4702:head</span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">12</span>:<span class="number">37.012442</span> <span class="number">1</span>:<span class="number">006</span>dae55:::a4702:head</span><br></pre></td></tr></table></figure>
<p>上面从日志里面截取部分的日志，这个是什么意思呢，是每秒钟扫描3个对象，然后休息3s再进行下一个，这个是不是已经把速度压到非常低了？还有上面做测试scrub sleep例子里面好像是1s 会scrub 1个对象，这里怎么就成了1s会scrub 3 个对象了，这个跟scrub的对象大小有关，对象越大，scrub的时间就相对长一点，这个测试里面的对象是1K的，基本算非常小了，也就是1s会扫描3个对象，然后根据你的设置的sleep值等待进入下一组的scrub</p>
<p>在上面的环境下默认每秒钟会对300左右的对象进行scrub，以25个对象的锁定窗口移动，无法写入和读取，而参数修改后每秒有3个对象被scrub，以1个对象的锁定窗口移动，这个单位时间锁定的对象的数目已经降低到一个非常低的程度了，如果你有生产环境又想去开scrub，不妨尝试下降低chunk，增加sleep</p>
<p>这个的影响就是扫描的速度而已，而如果你想加快扫描速度，就去调整sleep参数来控制这个扫描的速度了，这个就不在这里赘述了</p>
<p>本篇讲述的是一个PG上开启deep-scrub以后的影响，默认的是到了最大的intelval以后就会开启自动开启scrub了，所以我建议的是不用系统自带的时间控制，而是自己去分析的scrub的时间戳和对象数目，然后计算好以后，可以是每天晚上，扫描指定个数的PG，然后等一轮全做完以后，中间就是自定义的一段时间的不扫描期，这个可以自己定义，是一个月或者两个月扫一轮都行，这个会在后面单独写一篇文章来讲述这个</p>
<h2 id="总结">总结</h2><p>关于scrub，你需要了解，scrub什么时候会发生，发生以后会对你的osd产生多少的负载，每秒钟会扫描多少对象，如何去降低这个影响，这些问题就是本篇的来源了，很多问题是能从参数上进行解决的，关键是你要知道它们到底在干嘛</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-08-19</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/scrub.png" alt="scrub"><br></center>

<h2 id="前言">前言</h2><p>关于scrub这块一直想写一篇文章的，这个在很久前，就做过一次测试，当时是看这个scrub到底有多大的影响，当时看到的是磁盘读占很高，启动deep-scrub后会有大量的读,前端可能会出现 slow request,这个是当时测试看到的现象，一个比较简单的处理办法就是直接给scrub关掉了，当然关掉了就无法检测底层到底有没有对象不一致的问题<br>关于这个scrub生产上是否开启，仁者见仁，智者见智，就是选择的问题了，这里不做讨论，个人觉得开和关都有各自的道理，本篇是讲述的如果想开启的情况下如何把scrub给控制住<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何测量Ceph OSD内存占用]]></title>
    <link href="http://www.zphj1987.com/2017/08/10/how-to-get-Ceph-OSD-mem-used/"/>
    <id>http://www.zphj1987.com/2017/08/10/how-to-get-Ceph-OSD-mem-used/</id>
    <published>2017-08-10T08:55:41.000Z</published>
    <updated>2017-08-10T09:06:53.554Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/newmemory.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>这个工具我第一次看到是在填坑群里面看到，是由研发-北京-蓝星同学分享的，看到比较有趣，就写一篇相关的记录下用法</p>
<p>火焰图里面也可以定位内存方面的问题，那个是通过一段时间的统计，以一个汇总的方式来查看内存在哪个地方可能出了问题<br><a id="more"></a><br>本篇是另外一个工具，这个工具的好处是有很清晰的图表操作，以及基于时间线的统计，下面来看下这个工具怎么使用的</p>
<p>本篇对具体的内存函数的调用占用不会做更具体的分析，这里是提供一个工具的使用方法供感兴趣的研发同学来使用</p>
<h2 id="环境准备">环境准备</h2><p>目前大多数的ceph运行在centos7系列上面，笔者的环境也是在centos7上面，所以以这个举例，其他平台同样可以</p>
<p>需要用到的工具</p>
<ul>
<li>valgrind</li>
<li>massif-visualizer</li>
</ul>
<p>安装valgrind<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install valgrind</span><br></pre></td></tr></table></figure></p>
<p>massif-visualizer是数据可视化的工具，由于并没有centos的发行版本，但是有fedora的版本，从网上看到资料说这个可以直接安装忽略掉需要的依赖即可，我自己跑了下，确实可行</p>
<p>下载massif-visualizer<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget ftp://ftp.pbone.net/mirror/download.fedora.redhat.com/pub/fedora/linux/releases/<span class="number">23</span>/Everything/x86_64/os/Packages/m/massif-visualizer-<span class="number">0.4</span>.<span class="number">0</span>-<span class="number">6</span>.fc23.x86_64.rpm</span><br></pre></td></tr></table></figure></p>
<p>安装massif-visualizer<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh massif-visualizer-<span class="number">0.4</span>.<span class="number">0</span>-<span class="number">6</span>.fc23.x86_64.rpm  --nodeps</span><br></pre></td></tr></table></figure></p>
<p>不要漏了后面的nodeps</p>
<h2 id="抓取ceph_osd运行时内存数据">抓取ceph osd运行时内存数据</h2><p>停掉需要监控的osd（例如我的是osd.4）<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># systemctl stop ceph-osd@4</span></span><br></pre></td></tr></table></figure></p>
<p>开始运行监控<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># valgrind --tool=massif /usr/bin/ceph-osd -f --cluster ceph --id 4 --setuser ceph --setgroup ceph</span></span><br><span class="line">==<span class="number">21522</span>== Massif, a heap profiler</span><br><span class="line">==<span class="number">21522</span>== Copyright (C) <span class="number">2003</span>-<span class="number">2015</span>, and GNU GPL<span class="string">'d, by Nicholas Nethercote</span><br><span class="line">==21522== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info</span><br><span class="line">==21522== Command: /usr/bin/ceph-osd -f --cluster ceph --id 4 --setuser ceph --setgroup ceph</span><br><span class="line">==21522== </span><br><span class="line">==21522== </span><br><span class="line">starting osd.4 at :/0 osd_data /var/lib/ceph/osd/ceph-4 /var/lib/ceph/osd/ceph-4/journal</span><br><span class="line">2017-08-10 16:36:42.395682 a14d680 -1 osd.4 522 log_to_monitors &#123;default=true&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>监控已经开始了,在top下可以看到有这个进程运行，占用cpu还是比较高的，可能是要抓取很多数据的原因<br><img src="http://static.zybuluo.com/zphj1987/yf0kp4qr32mtcmhtock1krnv/image.png" alt="valtop"></p>
<p>等待一段时间后，就可以把之前运行的命令ctrl+C掉</p>
<p>在当前目录下面就会生成一个【massif.out.进程号】的文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># ll massif.out.21522 </span></span><br><span class="line">-rw------- <span class="number">1</span> root root <span class="number">142682</span> Aug <span class="number">10</span> <span class="number">16</span>:<span class="number">39</span> massif.out.<span class="number">21522</span></span><br></pre></td></tr></table></figure></p>
<h2 id="查看截取的数据">查看截取的数据</h2><h3 id="命令行下的查看">命令行下的查看</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># ms_print massif.out.21522 |less</span></span><br></pre></td></tr></table></figure>
<p>这个方式是文本方式的查看，也比较方便，自带的文本分析工具，效果如下：<br><img src="http://static.zybuluo.com/zphj1987/6az5gderq4i4jdg0l98bnm8n/image.png" alt="image.png-38kB"><br><img src="http://static.zybuluo.com/zphj1987/hfc1nosugnkx9plc8p9iwvyn/image.png" alt="image.png-94.6kB"></p>
<h3 id="图形界面的查看">图形界面的查看</h3><p>首先在windows上面运行好xmanager-Passive，这个走的x11转发的（也可以用另外一个工具MobaXterm）<br><img src="http://static.zybuluo.com/zphj1987/jqt14e5gakmr9ftwuz3r8g5m/image.png" alt="image.png-4.4kB"><br>运行好了后，直接在xshell命令行运行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># massif-visualizer massif.out.21522 </span></span><br><span class="line">massif-visualizer(<span class="number">22494</span>)/kdeui (kdelibs): Attempt to use QAction <span class="string">"toggleDataTree"</span> with KXMLGUIFactory! </span><br><span class="line">massif-visualizer(<span class="number">22494</span>)/kdeui (kdelibs): Attempt to use QAction <span class="string">"toggleAllocators"</span> with KXMLGUIFactory! </span><br><span class="line">description: <span class="string">"(none)"</span> </span><br><span class="line"><span class="built_in">command</span>: <span class="string">"/usr/bin/ceph-osd -f --cluster ceph --id 4"</span> </span><br><span class="line">time unit: <span class="string">"i"</span> </span><br><span class="line">snapshots: <span class="number">56</span> </span><br><span class="line">peak: snapshot <span class="comment"># 52 after "2.3138e+09i" </span></span><br><span class="line">peak cost: <span class="string">"16.2 MiB"</span>  heap <span class="string">"749.0 KiB"</span>  heap extra <span class="string">"0 B"</span>  stacks</span><br></pre></td></tr></table></figure></p>
<p>然后在windows上面就会弹出下面的<br><img src="http://static.zybuluo.com/zphj1987/inkjtgxe6dw2k2qjjvr4rclx/osdmem.png" alt="osdmem.png-282kB"><br>就可以交互式的查看快照点的内存占用了，然后根据这个就可以进行内存分析了，剩下的工作就留给研发去做了</p>
<h2 id="相关链接">相关链接</h2><p><a href="https://codeday.me/bug/20170415/1699.html" target="_blank" rel="external">linux – 如何测量应用程序或进程的实际内存使用情况？</a></p>
<h2 id="总结">总结</h2><p>只有分析落地到数据层面，这样的分析才是比较精准的</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-08-10</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/newmemory.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>这个工具我第一次看到是在填坑群里面看到，是由研发-北京-蓝星同学分享的，看到比较有趣，就写一篇相关的记录下用法</p>
<p>火焰图里面也可以定位内存方面的问题，那个是通过一段时间的统计，以一个汇总的方式来查看内存在哪个地方可能出了问题<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ceph recover的速度控制]]></title>
    <link href="http://www.zphj1987.com/2017/08/10/Ceph-recover-speed-control/"/>
    <id>http://www.zphj1987.com/2017/08/10/Ceph-recover-speed-control/</id>
    <published>2017-08-10T06:53:12.000Z</published>
    <updated>2017-08-10T09:13:20.965Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/recovery.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>磁盘损坏对于一个大集群来说，可以说是必然发生的事情，即使再小的概率，磁盘量上去，总会坏那么几块盘，这个时候就会触发内部的修复过程，修复就是让不满足副本要求的PG，恢复到满足的情况<br><a id="more"></a><br>一般是踢掉坏盘和增加新盘会触发这个修复过程，或者对磁盘的权重做了修改，也会触发这个迁移的过程，本篇是用剔除OSD的方式来对这个修复的控制做一个探索</p>
<p>大部分场景下要求的是不能影响前端的业务，而加速迁移，忽略迁移影响不在本篇的讨论范围内，本篇将用数据来说明迁移的控制</p>
<p>本次测试在无读写情况下进程的</p>
<h2 id="几个需要用到脚本和命令">几个需要用到脚本和命令</h2><h3 id="磁盘本身的大概速度">磁盘本身的大概速度</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># ceph tell osd.0 bench</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"bytes_written"</span>: <span class="number">1073741824</span>,</span><br><span class="line">    <span class="string">"blocksize"</span>: <span class="number">4194304</span>,</span><br><span class="line">    <span class="string">"bytes_per_sec"</span>: <span class="number">102781897</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的结果为102MB/s</p>
<h3 id="获取osd上pg迁移的对象的脚本">获取osd上pg迁移的对象的脚本</h3><p>OSD的日志需要开启到10，这里采取动态开启的方式<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph daemon osd.<span class="number">0</span> config <span class="built_in">set</span> debug_osd <span class="number">10</span></span><br></pre></td></tr></table></figure></p>
<p>日志解析的脚本<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat  /var/<span class="built_in">log</span>/ceph/ceph-osd.<span class="number">0</span>.log | awk  <span class="string">'$7=="finish_recovery_op"&amp;&amp;$8=="pg[0.15(" &#123;sub(/.*/,substr($2,1,8),$2); print $0&#125;'</span>|awk <span class="string">'&#123;a[$1," ",$2]++&#125;END&#123;for (j in a) print j,a[j]|"sort -k 1"&#125;'</span></span><br></pre></td></tr></table></figure></p>
<p>获取osd.0上的pg0.15的迁移速度<br>运行后的效果如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">33</span> <span class="number">1</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">34</span> <span class="number">2</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">35</span> <span class="number">2</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">36</span> <span class="number">1</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">37</span> <span class="number">2</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">38</span> <span class="number">2</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">39</span> <span class="number">1</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">40</span> <span class="number">2</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">41</span> <span class="number">1</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">42</span> <span class="number">2</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">43</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<h3 id="设置不迁移和恢复迁移">设置不迁移和恢复迁移</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph osd <span class="built_in">set</span> nobackfill;ceph osd <span class="built_in">set</span> norecover</span><br><span class="line">ceph osd <span class="built_in">unset</span> nobackfill;ceph osd <span class="built_in">unset</span> norecover</span><br></pre></td></tr></table></figure>
<p>获取当前的正在迁移的PG<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># ceph pg dump|grep recovering</span></span><br><span class="line">dumped all</span><br><span class="line"><span class="number">3</span>.e         <span class="number">513</span>                  <span class="number">0</span>      <span class="number">978</span>         <span class="number">0</span>       <span class="number">0</span> <span class="number">2151677952</span> <span class="number">513</span>      <span class="number">513</span>    active+recovering+degraded <span class="number">2017</span>-<span class="number">08</span>-<span class="number">07</span> <span class="number">16</span>:<span class="number">40</span>:<span class="number">44.840780</span> <span class="number">118</span><span class="string">'513  332:7367 [2,3]          2  [2,3]              2        0'</span><span class="number">0</span> <span class="number">2017</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">14</span>:<span class="number">28</span>:<span class="number">53.351664</span>             <span class="number">0</span><span class="string">'0 2017-07-28 14:28:53.351664 </span><br><span class="line">3.2c        522                  0      996         0       0 2189426688 522      522    active+recovering+degraded 2017-08-07 16:40:44.882450 118'</span><span class="number">522</span>  <span class="number">332</span>:<span class="number">1177</span> [<span class="number">3</span>,<span class="number">2</span>]          <span class="number">3</span>  [<span class="number">3</span>,<span class="number">2</span>]              <span class="number">3</span>    <span class="number">118</span><span class="string">'522 2017-07-29 16:21:56.398682             0'</span><span class="number">0</span> <span class="number">2017</span>-<span class="number">07</span>-<span class="number">28</span> <span class="number">14</span>:<span class="number">28</span>:<span class="number">53.351664</span></span><br></pre></td></tr></table></figure></p>
<p>过滤下输出结果<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># ceph pg dump|grep recovering|awk '&#123;print $1,$2,$4,$10,$15,$16,$17,$18&#125;'</span></span><br><span class="line">dumped all <span class="keyword">in</span> format plain</span><br><span class="line"><span class="number">0.1</span>d <span class="number">636</span> <span class="number">1272</span> active+recovering+degraded [<span class="number">5</span>,<span class="number">3</span>] <span class="number">5</span> [<span class="number">5</span>,<span class="number">3</span>] <span class="number">5</span></span><br><span class="line"><span class="number">0.14</span> <span class="number">618</span> <span class="number">1236</span> active+recovering+degraded [<span class="number">1</span>,<span class="number">0</span>] <span class="number">1</span> [<span class="number">1</span>,<span class="number">0</span>] <span class="number">1</span></span><br><span class="line"><span class="number">0.15</span> <span class="number">682</span> <span class="number">1364</span> active+recovering+degraded [<span class="number">0</span>,<span class="number">5</span>] <span class="number">0</span> [<span class="number">0</span>,<span class="number">5</span>] <span class="number">0</span></span><br><span class="line"><span class="number">0.35</span> <span class="number">661</span> <span class="number">1322</span> active+recovering+degraded [<span class="number">2</span>,<span class="number">1</span>] <span class="number">2</span> [<span class="number">2</span>,<span class="number">1</span>] <span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>动态监控PG的迁移<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch -n <span class="number">1</span> <span class="operator">-d</span> <span class="string">"ceph pg dump|grep recovering|awk '&#123;print \$1,\$2,\$4,\$10,\$15,\$16,\$17,\$18&#125;'"</span></span><br></pre></td></tr></table></figure></p>
<p>我们要看PG 0.15的</p>
<h3 id="防止缓存影响">防止缓存影响</h3><p>同步数据然后清空缓存<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sync</span><br><span class="line"><span class="built_in">echo</span> <span class="number">3</span> &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure></p>
<p>重启OSD进程<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart ceph-osd.target</span><br></pre></td></tr></table></figure></p>
<h3 id="磁盘的读写速度">磁盘的读写速度</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dstat -td -D /dev/sdb -o disk.csv</span><br></pre></td></tr></table></figure>
<p>sdb为需要监控的盘</p>
<h2 id="测试的步骤与流程">测试的步骤与流程</h2><p>整个测试需要保证每一次获取数据的过程都近似，这样才能最大程度减少环境对数据的影响</p>
<p>开始需要写入一些测试数据，这个可以用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rados -p rbd bench <span class="number">3600</span> --no-cleanup</span><br></pre></td></tr></table></figure></p>
<p>这个让每个PG上面大概有600-700个object，写入这个数据后就不再写入数据了</p>
<p>每一轮测试步骤如下：</p>
<ol>
<li>恢复集群状态为active+clean</li>
<li>设置nobackfill，norecover</li>
<li>清空缓存</li>
<li>设置需要调整的参数</li>
<li>重启osd进程</li>
<li>停止osd，out osd</li>
<li>观察需要迁移的数据（尽量每次监测同一个PG）</li>
<li>清空日志，设置OSD debug 10</li>
<li>开启监控磁盘脚本</li>
<li>解除设置nobackfill，norecover</li>
<li>动态监控迁移状态，等待指定PG迁移完毕</li>
<li>停止磁盘监控脚本</li>
<li>获取PG迁移的情况，获取磁盘的读写情况</li>
<li>数据处理</li>
</ol>
<p>每一轮测试需要按上面的步骤进行处理</p>
<h2 id="测试分析">测试分析</h2><p>我的测试选择的是osd.4,按上面的步骤进行处理后，到了观察PG的步骤，此时因为做了不迁移的标记，只会状态改变，不会真正的迁移 我们来观察下需要迁移的pg<br>默认情况下的<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># ceph pg dump|grep recovering|awk '&#123;print $1,$2,$10,$15,$16,$17,$18&#125;'</span></span><br><span class="line">dumped all <span class="keyword">in</span> format plain</span><br><span class="line"><span class="number">0.15</span> <span class="number">682</span> active+recovering+degraded [<span class="number">0</span>,<span class="number">5</span>] <span class="number">0</span> [<span class="number">0</span>,<span class="number">5</span>] <span class="number">0</span></span><br><span class="line"><span class="number">0.24</span> <span class="number">674</span> active+recovering+degraded [<span class="number">5</span>,<span class="number">2</span>] <span class="number">5</span> [<span class="number">5</span>,<span class="number">2</span>] <span class="number">5</span></span><br><span class="line"><span class="number">0.35</span> <span class="number">661</span> active+recovering+degraded [<span class="number">2</span>,<span class="number">1</span>] <span class="number">2</span> [<span class="number">2</span>,<span class="number">1</span>] <span class="number">2</span></span><br><span class="line"><span class="number">0.37</span> <span class="number">654</span> active+recovering+degraded [<span class="number">1</span>,<span class="number">0</span>] <span class="number">1</span> [<span class="number">1</span>,<span class="number">0</span>] <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到这个环境下，每个OSD上面基本上是一个PG的写入，和一个PG的读取，实际上是读写同时在进行的</p>
<p>默认的</p>
<blockquote>
<p>osd_max_backfills = 1<br>osd_recovery_max_active = 3</p>
</blockquote>
<p>两个参数是一个是每个OSD上面启动的恢复的PG数目，下面一个是控制同时恢复的请求数目</p>
<p>默认的参数的情况<br><img src="http://static.zybuluo.com/zphj1987/2f1dubw81g0r99beds6u374d/pg.png" alt="pg.png-37.1kB"><br>上图为迁移的对象数目<br><img src="http://static.zybuluo.com/zphj1987/jvnhe3t93yqqrhaqvf6prkct/diskspeed.png" alt="diskspeed.png-63.7kB"><br>上图为OSD的磁盘读取写入的情况</p>
<p>可以看到迁移的对象每秒在6-15之间<br>磁盘上的读取为20-60MB/s，写入为80MB左右</p>
<p>这个只是默认的情况下的,占用了磁盘带宽的80%左右，在真正有写入的时候，因为有优先级的控制，占的带宽可能没那么多，本篇目的是在静态的时候就把磁盘占用给控制下来，那么即使有读写，恢复的磁盘占用只会更低</p>
<h3 id="调整一个参数">调整一个参数</h3><blockquote>
<p>osd_recovery_max_active = 3<br>调整如下<br>osd_recovery_max_active = 1</p>
</blockquote>
<p><img src="http://static.zybuluo.com/zphj1987/geq2b8eng7vckbfybnvnf5oa/pgactive1.png" alt="pgactive1.png-30.9kB"></p>
<p><img src="http://static.zybuluo.com/zphj1987/ll20uhofrbz65b6agsduv59t/diskactive1.png" alt="diskactive1.png-66.4kB"></p>
<p>从磁盘占用上和迁移上面可以看到，磁盘的负载确实降低了一些，峰值从16降低到了11左右</p>
<h2 id="sleep_参数的控制">sleep 参数的控制</h2><p>下面是一个关键的参数了</p>
<blockquote>
<p>osd_recovery_sleep = 0</p>
</blockquote>
<p>这个在jewel最新版本下还是0，在luminous版本已经设置成ssd是0，sata变成0.1，相当于增加了一个延时的过程，本篇主要就是对这个参数进行研究，看下能控制最低到一个什么程度</p>
<p>下面的测试的数据就统计到一个图当中去了，这样也便于对比的</p>
<p><img src="http://static.zybuluo.com/zphj1987/axkyzcmwwsgcio65kaqq5n5v/sleeppg.png" alt="sleeppg.png-76.6kB"></p>
<p><img src="http://static.zybuluo.com/zphj1987/fv366hsqetuaht64i5p6wcej/sleepdiskread.png" alt="sleepdiskread.png-86.7kB"></p>
<p><img src="http://static.zybuluo.com/zphj1987/paya55b97o1sfdtmm68pku65/sleepdiskwrite.png" alt="sleepdiskwrite.png-130.8kB"></p>
<p>上面测试了几组参数:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sleep=<span class="number">0</span>;sleep=<span class="number">0.1</span>;sleep=<span class="number">0.2</span>;sleep=<span class="number">0.5</span></span><br></pre></td></tr></table></figure></p>
<p>从上面的图中可以看到：<br>迁移速度从12降低到1-2个<br>磁盘读取占用从40Mb/s降到 8Mb/s左右<br>磁盘写入的占用从60MB/s-80MB/s降低到8MB/s-40MB/s</p>
<h2 id="结论">结论</h2><p>通过sleep的控制可以大大的降低迁移磁盘的占用，对于本身磁盘性能不太好的硬件环境下，可以用这个参数进行一下控制，能够缓解磁盘压力过大引起的osd崩溃的情况</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-08-10</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/recovery.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>磁盘损坏对于一个大集群来说，可以说是必然发生的事情，即使再小的概率，磁盘量上去，总会坏那么几块盘，这个时候就会触发内部的修复过程，修复就是让不满足副本要求的PG，恢复到满足的情况<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ceph S3 基于NGINX的集群复制方案]]></title>
    <link href="http://www.zphj1987.com/2017/08/10/Ceph-S3-nginx-mirror/"/>
    <id>http://www.zphj1987.com/2017/08/10/Ceph-S3-nginx-mirror/</id>
    <published>2017-08-10T01:37:59.000Z</published>
    <updated>2017-08-10T09:10:00.800Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/nginx.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>ceph的s3数据的同步可以通过radosgw-agent进行同步，同region可以同步data和metadata，不同region只能同步metadata，这个地方可以参考下秦牧羊梳理的 <a href="https://my.oschina.net/diluga/blog/391928" target="_blank" rel="external">ceph radosgw 多集群同步部署流程</a>，本篇讲述的方案与radosgw-agent的复制方案不同在于,这个属于前端复制，后端相当于透明的两个相同集群，在入口层面就将数据进行了复制分流<br><a id="more"></a><br>在某些场景下，需求可能比较简单：</p>
<ul>
<li>需要数据能同时存储在两个集群当中</li>
<li>数据写一次，读多次</li>
<li>两个集群都能写</li>
</ul>
<p>一方面两个集群可以增加数据的可靠性，另一方面可以提高读带宽，两个集群同时可以提供读的服务</p>
<p>radosgw-agent是从底层做的同步，正好看到秦牧羊有提到nginx新加入了ngx_http_mirror_module 这个模块，那么本篇就尝试用这个模块来做几个简单的配置来实现上面的需求，这里纯架构的尝试，真正上生产还需要做大量的验证和修改的测试的</p>
<h2 id="结构设想">结构设想</h2><p><img src="http://static.zybuluo.com/zphj1987/y9uxssbwqydkworh347czxer/nginxs3.png" alt="nginxs3.png-30.8kB"></p>
<p>当数据传到nginx的server的时候，nginx本地进行负载均衡到两个本地端口上面，本地的两个端口对应到两个集群上面,一个主写集群1，一个主写集群2，这个是最简结构，集群的civetweb可以是很多机器，nginx这个也可以是多台的机器，在一台上面之所以做个均衡是可以让两个集群是对等关系，而不是一个只用nginx写，另一个只mirror写</p>
<h2 id="环境准备">环境准备</h2><p>准备两个完全独立的集群，分别配置一个s3的网关，我的环境为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">19.101</span>:<span class="number">8080</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">19.102</span>:<span class="number">8080</span></span><br></pre></td></tr></table></figure></p>
<p>在每个机器上都创建一个管理员的账号，这个用于后面的通过restapi来进行管理的,其他的后面的操作都通过http来做能保证两个集群的数据是一致的</p>
<blockquote>
<p>nginx的机器在192.168.19.104</p>
</blockquote>
<p>在两个集群当中都创建相同的管理用户<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">radosgw-admin user create --uid=admin --display-name=admin --access_key=admin --secret=<span class="number">123456</span></span><br></pre></td></tr></table></figure></p>
<p>这里为了测试方便使用了简单密码</p>
<p>此时admin还仅仅是普通的权限，需要通过—cap添加user的capabilities，例如：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">radosgw-admin caps add --uid=admin --caps=<span class="string">"users=read, write"</span></span><br><span class="line">radosgw-admin caps add --uid=admin --caps=<span class="string">"usage=read, write"</span></span><br></pre></td></tr></table></figure></p>
<p>下面就用到了nginx的最新的模块了<br>Nginx 1.13.4 发布，新增 ngx_http_mirror_module 模块</p>
<p>软件下载：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/packages/mainline/centos/<span class="number">7</span>/x86_64/RPMS/nginx-<span class="number">1.13</span>.<span class="number">4</span>-<span class="number">1</span>.el7.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure></p>
<p>下载rpm包然后安装<br>安装：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh nginx-<span class="number">1.13</span>.<span class="number">4</span>-<span class="number">1</span>.el7.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure></p>
<p>修改nginx配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream s3 &#123;</span><br><span class="line">      server <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">81</span>;</span><br><span class="line">      server <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">82</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">81</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    mirror /mirror;</span><br><span class="line">    proxy_pass http://<span class="number">192.168</span>.<span class="number">19.101</span>:<span class="number">8080</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /mirror &#123;</span><br><span class="line">    internal;</span><br><span class="line">    proxy_pass http://<span class="number">192.168</span>.<span class="number">19.102</span>:<span class="number">8080</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">82</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    mirror /mirror;</span><br><span class="line">    proxy_pass http://<span class="number">192.168</span>.<span class="number">19.102</span>:<span class="number">8080</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /mirror &#123;</span><br><span class="line">    internal;</span><br><span class="line">    proxy_pass http://<span class="number">192.168</span>.<span class="number">19.101</span>:<span class="number">8080</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass         http://s3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>负载均衡的设置有很多种，这里用最简单的轮训的模式，想配置其他负载均衡模式可以参考我的<a href="http://www.zphj1987.com/2015/03/22/%E5%85%B3%E4%BA%8Enginx-upstream%E7%9A%84%E5%87%A0%E7%A7%8D%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/" target="_blank" rel="external">这篇文章</a></p>
<p>重启进程并检查服务<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node04 ~]<span class="comment"># systemctl restart nginx</span></span><br><span class="line">[root@node04 ~]<span class="comment"># netstat -tunlp|grep nginx</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>              <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">1582973</span>/nginx: mast </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">81</span>              <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">1582973</span>/nginx: mast </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">82</span>              <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">1582973</span>/nginx: mast</span><br></pre></td></tr></table></figure></p>
<p>整个环境就配置完成了，下面我们就来验证下这个配置的效果是什么样的，下面会提供几个s3用户的相关的脚本</p>
<h2 id="s3用户相关脚本">s3用户相关脚本</h2><h3 id="创建用户的脚本">创建用户的脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#S3 USER ADMIN </span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###==============WRITE BEGIN=============###</span></span><br><span class="line">ACCESS_KEY=admin <span class="comment">## ADMIN_USER_TOKEN</span></span><br><span class="line">SECRET_KEY=<span class="number">123456</span> <span class="comment">## ADMIN_USER_SECRET</span></span><br><span class="line">HOST=<span class="number">192.168</span>.<span class="number">19.104</span>:<span class="number">80</span></span><br><span class="line">USER_ACCESS_KEY=<span class="string">"&amp;access-key=user1"</span></span><br><span class="line">USER_SECRET_KEY=<span class="string">"&amp;secret-key=123456"</span></span><br><span class="line"><span class="comment">###==============WRITE  FINAL=======FINAL=====###</span></span><br><span class="line"></span><br><span class="line">query2=admin/user</span><br><span class="line">userid=<span class="variable">$1</span></span><br><span class="line">name=<span class="variable">$2</span></span><br><span class="line">uid=<span class="string">"&amp;uid="</span></span><br><span class="line">date=`TZ=GMT LANG=en_US date <span class="string">"+%a, %d %b %Y %H:%M:%S GMT"</span>`</span><br><span class="line">header=<span class="string">"PUT\n\n\n<span class="variable">$&#123;date&#125;</span>\n/<span class="variable">$&#123;query2&#125;</span>"</span></span><br><span class="line">sig=$(<span class="built_in">echo</span> -en <span class="variable">$&#123;header&#125;</span> | openssl sha1 -hmac <span class="variable">$&#123;SECRET_KEY&#125;</span> -binary | base64)</span><br><span class="line">curl -v -H <span class="string">"Date: <span class="variable">$&#123;date&#125;</span>"</span> -H <span class="string">"Authorization: AWS <span class="variable">$&#123;ACCESS_KEY&#125;</span>:<span class="variable">$&#123;sig&#125;</span>"</span> -L -X PUT <span class="string">"http://<span class="variable">$&#123;HOST&#125;</span>/<span class="variable">$&#123;query2&#125;</span>?format=json<span class="variable">$&#123;uid&#125;</span><span class="variable">$&#123;userid&#125;</span>&amp;display-name=<span class="variable">$&#123;name&#125;</span><span class="variable">$&#123;USER_ACCESS_KEY&#125;</span><span class="variable">$&#123;USER_SECRET_KEY&#125;</span>"</span> -H <span class="string">"Host: <span class="variable">$&#123;HOST&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>运行脚本：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment"># sh  addusernew.sh user1 USER1</span></span><br><span class="line">* About to connect() to <span class="number">192.168</span>.<span class="number">19.104</span> port <span class="number">80</span> (<span class="comment">#0)</span></span><br><span class="line">*   Trying <span class="number">192.168</span>.<span class="number">19.104</span>...</span><br><span class="line">* Connected to <span class="number">192.168</span>.<span class="number">19.104</span> (<span class="number">192.168</span>.<span class="number">19.104</span>) port <span class="number">80</span> (<span class="comment">#0)</span></span><br><span class="line">&gt; PUT /admin/user?format=json&amp;uid=user1&amp;display-name=USER1&amp;access-key=user1&amp;secret-key=<span class="number">123456</span> HTTP/<span class="number">1.1</span></span><br><span class="line">&gt; User-Agent: curl/<span class="number">7.29</span>.<span class="number">0</span></span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; Date: Wed, <span class="number">09</span> Aug <span class="number">2017</span> <span class="number">07</span>:<span class="number">51</span>:<span class="number">58</span> GMT</span><br><span class="line">&gt; Authorization: AWS admin:wuqQUUXhhar5nQS5D5B14Dpx+Rw=</span><br><span class="line">&gt; Host: <span class="number">192.168</span>.<span class="number">19.104</span>:<span class="number">80</span></span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">&lt; Server: nginx/<span class="number">1.13</span>.<span class="number">4</span></span><br><span class="line">&lt; Date: Wed, <span class="number">09</span> Aug <span class="number">2017</span> <span class="number">07</span>:<span class="number">51</span>:<span class="number">58</span> GMT</span><br><span class="line">&lt; Content-Type: application/json</span><br><span class="line">&lt; Content-Length: <span class="number">195</span></span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; </span><br><span class="line">* Connection <span class="comment">#0 to host 192.168.19.104 left intact</span></span><br><span class="line">&#123;<span class="string">"user_id"</span>:<span class="string">"user1"</span>,<span class="string">"display_name"</span>:<span class="string">"USER1"</span>,<span class="string">"email"</span>:<span class="string">""</span>,<span class="string">"suspended"</span>:<span class="number">0</span>,<span class="string">"max_buckets"</span>:<span class="number">1000</span>,<span class="string">"subusers"</span>:[],<span class="string">"keys"</span>:[&#123;<span class="string">"user"</span>:<span class="string">"user1"</span>,<span class="string">"access_key"</span>:<span class="string">"user1"</span>,<span class="string">"secret_key"</span>:<span class="string">"123456"</span>&#125;],<span class="string">"swift_keys"</span>:[],<span class="string">"caps"</span>:[]&#125;</span><br></pre></td></tr></table></figure></p>
<p>在两个集群中检查：<br><img src="http://static.zybuluo.com/zphj1987/aflko6hufp7ls0r27resxqn9/usercreate.png" alt="usercreate.png-36.5kB"></p>
<p>可以看到两个集群当中都产生了相同的用户信息</p>
<h3 id="修改用户">修改用户</h3><p>直接把上面的创建脚本里面的PUT改成POST就是修改用户的脚本</p>
<h3 id="删除用户脚本">删除用户脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#S3 USER ADMIN</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###==============WRITE BEGIN=============###</span></span><br><span class="line">ACCESS_KEY=admin <span class="comment">## ADMIN_USER_TOKEN</span></span><br><span class="line">SECRET_KEY=<span class="number">123456</span> <span class="comment">## ADMIN_USER_SECRET</span></span><br><span class="line">HOST=<span class="number">192.168</span>.<span class="number">19.104</span>:<span class="number">80</span></span><br><span class="line"><span class="comment">###==============WRITE  FINAL=======FINAL=====###</span></span><br><span class="line"></span><br><span class="line">query2=admin/user</span><br><span class="line">userid=<span class="variable">$1</span></span><br><span class="line">uid=<span class="string">"&amp;uid="</span></span><br><span class="line">date=`TZ=GMT LANG=en_US date <span class="string">"+%a, %d %b %Y %H:%M:%S GMT"</span>`</span><br><span class="line">header=<span class="string">"DELETE\n\n\n<span class="variable">$&#123;date&#125;</span>\n/<span class="variable">$&#123;query2&#125;</span>"</span></span><br><span class="line">sig=$(<span class="built_in">echo</span> -en <span class="variable">$&#123;header&#125;</span> | openssl sha1 -hmac <span class="variable">$&#123;SECRET_KEY&#125;</span> -binary | base64)</span><br><span class="line">curl -v -H <span class="string">"Date: <span class="variable">$&#123;date&#125;</span>"</span> -H <span class="string">"Authorization: AWS <span class="variable">$&#123;ACCESS_KEY&#125;</span>:<span class="variable">$&#123;sig&#125;</span>"</span> -L -X DELETE <span class="string">"http://<span class="variable">$&#123;HOST&#125;</span>/<span class="variable">$&#123;query2&#125;</span>?format=json<span class="variable">$&#123;uid&#125;</span><span class="variable">$&#123;userid&#125;</span>"</span> -H <span class="string">"Host: <span class="variable">$&#123;HOST&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>执行删除用户：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment"># sh deluser.sh user1</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/zphj1987/tzozt0tpmq6p4c3tssuy6xvo/deluser.png" alt="deluser.png-6.3kB"></p>
<p>可以看到两边都删除了</p>
<h3 id="获取用户的信息脚本">获取用户的信息脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#! /bin/sh</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#S3 USER ADMIN </span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###==============WRITE BEGIN=============###</span></span><br><span class="line">ACCESS_KEY=admin <span class="comment">## ADMIN_USER_TOKEN</span></span><br><span class="line">SECRET_KEY=<span class="number">123456</span> <span class="comment">## ADMIN_USER_SECRET</span></span><br><span class="line">HOST=<span class="number">192.168</span>.<span class="number">19.101</span>:<span class="number">8080</span></span><br><span class="line"><span class="comment">###==============WRITE  FINAL=======FINAL=====###</span></span><br><span class="line"></span><br><span class="line">query2=admin/user</span><br><span class="line">userid=<span class="variable">$1</span></span><br><span class="line">uid=<span class="string">"&amp;uid="</span></span><br><span class="line">date=`TZ=GMT LANG=en_US date <span class="string">"+%a, %d %b %Y %H:%M:%S GMT"</span>`</span><br><span class="line">header=<span class="string">"GET\n\n\n<span class="variable">$&#123;date&#125;</span>\n/<span class="variable">$&#123;query2&#125;</span>"</span></span><br><span class="line">sig=$(<span class="built_in">echo</span> -en <span class="variable">$&#123;header&#125;</span> | openssl sha1 -hmac <span class="variable">$&#123;SECRET_KEY&#125;</span> -binary | base64)</span><br><span class="line">curl -v -H <span class="string">"Date: <span class="variable">$&#123;date&#125;</span>"</span> -H <span class="string">"Authorization: AWS <span class="variable">$&#123;ACCESS_KEY&#125;</span>:<span class="variable">$&#123;sig&#125;</span>"</span> -L -X GET <span class="string">"http://<span class="variable">$&#123;HOST&#125;</span>/<span class="variable">$&#123;query2&#125;</span>?format=json<span class="variable">$&#123;uid&#125;</span><span class="variable">$&#123;userid&#125;</span>&amp;display-name=<span class="variable">$&#123;name&#125;</span>"</span>  -H <span class="string">"Host: <span class="variable">$&#123;HOST&#125;</span>"</span></span><br></pre></td></tr></table></figure>
<h3 id="测试上传一个文件">测试上传一个文件</h3><p>通过192.168.19.104:80端口上传一个文件，然后通过nginx的端口，以及两个集群的端口进行查看</p>
<p><img src="http://static.zybuluo.com/zphj1987/46aq5ifckuvj3v36i1wokdyg/same.png" alt="same.png-24.6kB"></p>
<p>可以看到在上传一次的情况下，两个集群里面同时拥有了这个文件</p>
<h2 id="总结">总结</h2><p>真正将方案运用到生产还需要做大量的验证测试，中间的失效处理，以及是否可以将写镜像，读取的时候不镜像，这些都需要进一步做相关的验证工作</p>
<p>本篇中的S3用户的管理接口操作参考了网上的其他资料</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-08-10</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/nginx.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>ceph的s3数据的同步可以通过radosgw-agent进行同步，同region可以同步data和metadata，不同region只能同步metadata，这个地方可以参考下秦牧羊梳理的 <a href="https://my.oschina.net/diluga/blog/391928">ceph radosgw 多集群同步部署流程</a>，本篇讲述的方案与radosgw-agent的复制方案不同在于,这个属于前端复制，后端相当于透明的两个相同集群，在入口层面就将数据进行了复制分流<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RBD快速删除的方法分析与改进]]></title>
    <link href="http://www.zphj1987.com/2017/07/27/RBD-fast-remove/"/>
    <id>http://www.zphj1987.com/2017/07/27/RBD-fast-remove/</id>
    <published>2017-07-27T14:20:37.000Z</published>
    <updated>2017-07-28T06:16:57.059Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/deleting.gif?imageMogr2/thumbnail/!75p" alt="delete"><br></center>

<h2 id="前言">前言</h2><p>这个问题在很久以前就有一篇文章进行过讨论 <a href="http://cephnotes.ksperis.com/blog/2014/07/04/remove-big-rbd-image" target="_blank" rel="external">remove-big-rbd</a>,这个文章写的比较清楚了，并且对不同的方法做了分析，这里先把结论说下</p>
<table>
<thead>
<tr>
<th style="text-align:center">rbd类型</th>
<th style="text-align:center">rbd rm 方法</th>
<th style="text-align:center">rados -p rm方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">未填充很多</td>
<td style="text-align:center">慢</td>
<td style="text-align:center">快</td>
</tr>
<tr>
<td style="text-align:center">已填充很多</td>
<td style="text-align:center">快</td>
<td style="text-align:center">慢</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>在rbd进行删除的时候，即使内部没有对象数据，也一样需要一个个对象去发请求，即使对象不存在，这个可以开日志看到</p>
<h2 id="实验过程">实验过程</h2><h3 id="开启日志的方法">开启日志的方法</h3><p>在/etc/ceph/ceph.conf中添加<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">debug_ms=<span class="number">1</span></span><br><span class="line"><span class="built_in">log</span>_file=/var/<span class="built_in">log</span>/ceph/rados.log</span><br></pre></td></tr></table></figure></p>
<p>这个默认也会在执行命令的时候打印到前台，所以处理下比较好，最简单的办法就是做alias<br>添加下面内容到 /etc/bashrc<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> ceph=<span class="string">'ceph  --debug-ms=0'</span></span><br><span class="line"><span class="built_in">alias</span> rados=<span class="string">'rados  --debug-ms=0'</span></span><br></pre></td></tr></table></figure></p>
<p>然后命令行执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure></p>
<p>在做操作的时候就只会记录日志，前台不会打印调试信息了,但是这个会影响到ceph daemon的命令，这个可以用这种方式在线屏蔽即可<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph --debug_ms=<span class="number">0</span>  <span class="operator">-s</span></span><br></pre></td></tr></table></figure></p>
<p>然后执行操作后，去分析每秒钟的操作数目即可,类似下面的这个，也可以用日志系统进行分析，这里不赘述<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat  /var/<span class="built_in">log</span>/ceph/rados.log|grep delete|grep -v <span class="string">"&gt;"</span>|grep <span class="number">13</span>:<span class="number">29</span>:<span class="number">46</span>|wc <span class="operator">-l</span></span><br></pre></td></tr></table></figure></p>
<p>原始的快速删除方法<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rados -p rbd ls | grep <span class="string">'^rbd_data.25ae86b8b4567'</span> | xargs -n <span class="number">200</span>  rados -p rbd rm</span><br></pre></td></tr></table></figure></p>
<h2 id="开启多进程删除的方法">开启多进程删除的方法</h2><p>这个比上面那种方法好的是：</p>
<ul>
<li>可以显示当前删除的进度</li>
<li>可以指定删除的进程并发数</li>
<li>可以显示当时正在删除的对象</li>
<li>可以增加一个中断时间降低负载</li>
</ul>
<p>首先获取一个需要快速删除的rbd的列表<br>获取prifix<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 put]<span class="comment"># rbd info testrbd|grep prefix</span></span><br><span class="line">	block_name_prefix: rbd_data.<span class="number">32</span>c0f6b8b4567</span><br></pre></td></tr></table></figure></p>
<p>获取列表<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 put]<span class="comment"># rados -p rbd ls |grep rbd_data.32c0f6b8b4567 &gt; delobject</span></span><br></pre></td></tr></table></figure></p>
<p>这里可以看下内容有没有问题，检查确认下</p>
<p>删除的fastremove.sh脚本如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="comment">#####config</span></span><br><span class="line">process=<span class="number">5</span></span><br><span class="line">objectlistfile=<span class="string">"./delobject"</span></span><br><span class="line">deletepool=rbd</span><br><span class="line"><span class="comment">#####</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">delete_fun</span></span>()</span><br><span class="line">  &#123;</span><br><span class="line">      date <span class="string">"+%Y-%m-%d %H:%M:%S"</span></span><br><span class="line">      rados -p <span class="variable">$deletepool</span> rm <span class="variable">$1</span></span><br><span class="line">	  <span class="comment">#sleep 1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="title">concurrent</span></span>()</span><br><span class="line"> &#123;</span><br><span class="line">     start=<span class="variable">$1</span> &amp;&amp; end=<span class="variable">$2</span> &amp;&amp; cur_num=<span class="variable">$3</span></span><br><span class="line">     mkfifo   ./fifo.$$ &amp;&amp;  <span class="built_in">exec</span> <span class="number">4</span>&lt;&gt; ./fifo.$$ &amp;&amp; rm <span class="operator">-f</span> ./fifo.$$</span><br><span class="line">     <span class="keyword">for</span> ((i=<span class="variable">$start</span>; i&lt;<span class="variable">$cur_num</span>+<span class="variable">$start</span>; i++)); <span class="keyword">do</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"init  start delete process <span class="variable">$i</span>"</span> &gt;&amp;<span class="number">4</span></span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>((i=<span class="variable">$start</span>; i&lt;=<span class="variable">$end</span>; i++)); <span class="keyword">do</span></span><br><span class="line">         <span class="built_in">read</span> -u <span class="number">4</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"-- current delete: [:delete <span class="variable">$i</span>/<span class="variable">$objectnum</span>  <span class="variable">$REPLY</span>]"</span></span><br><span class="line">             delob=`sed -n <span class="string">"<span class="variable">$&#123;i&#125;</span>p"</span> <span class="variable">$objectlistfile</span>`</span><br><span class="line">             delete_fun <span class="variable">$delob</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="string">"delete <span class="variable">$delob</span> done"</span>  <span class="number">1</span>&gt;&amp;<span class="number">4</span> <span class="comment"># write to $ff_file</span></span><br><span class="line">         &#125; &amp;</span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">     <span class="built_in">wait</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">objectnum=`cat <span class="variable">$objectlistfile</span>|wc <span class="operator">-l</span>`</span><br><span class="line">concurrent <span class="number">1</span> <span class="variable">$objectnum</span> <span class="variable">$process</span></span><br></pre></td></tr></table></figure></p>
<p>上面直接把配置写到脚本里面了，根据需要进行修改<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####config</span></span><br><span class="line">process=<span class="number">10</span></span><br><span class="line">objectlistfile=<span class="string">"./delobject"</span></span><br><span class="line">deletepool=rbd</span><br><span class="line"><span class="comment">#####</span></span><br></pre></td></tr></table></figure></p>
<p>指定并发数目，指定准备删除的对象的list文件，指定对象所在的存储池</p>
<p>然后执行即可</p>
<h2 id="本次测试删除的性能差别">本次测试删除的性能差别</h2><p>准备对象数据<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rbd map testrbd</span><br><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/dev/rbd2 bs=<span class="number">4</span>M count=<span class="number">1200</span></span><br></pre></td></tr></table></figure></p>
<p>获取列表<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 put]<span class="comment"># rados -p rbd ls |grep rbd_data.32c0f6b8b4567 &gt; delobject</span></span><br></pre></td></tr></table></figure></p>
<p>执行删除脚本<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 put]<span class="comment"># sh fastremove.sh</span></span><br></pre></td></tr></table></figure></p>
<p>测试结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">并发数</th>
<th style="text-align:center">删除时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">71s</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">35s</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">5s</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:center">6s</td>
</tr>
<tr>
<td style="text-align:center">50</td>
<td style="text-align:center">5s</td>
</tr>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:center">5s</td>
</tr>
</tbody>
</table>
<p>从测试结果来看在并发数为5的时候就能达到每秒删除200个对象了，根据自己的需要进行增减，也可以增减删除的间隔加上sleep</p>
<p>下面看下这个过程：</p>
<iframe src="http://7xweck.com1.z0.glb.clouddn.com/fastremove.html" height="530px" width="90%" align="center"></iframe>

<h2 id="总结">总结</h2><p>在ceph里面一些系统的操作默认是单进程去处理的，一般情况下都没什么问题，在数据量超大，追求效率的时候，我们可以通过加上一些并发加速这个过程，本篇脚本当中的并发同样适用于其他需要并发的场景</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-07-27</td>
</tr>
<tr>
<td style="text-align:center">增加前台调试信息的屏蔽</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-07-28</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/deleting.gif?imageMogr2/thumbnail/!75p" alt="delete"><br></center>

<h2 id="前言">前言</h2><p>这个问题在很久以前就有一篇文章进行过讨论 <a href="http://cephnotes.ksperis.com/blog/2014/07/04/remove-big-rbd-image">remove-big-rbd</a>,这个文章写的比较清楚了，并且对不同的方法做了分析，这里先把结论说下</p>
<table>
<thead>
<tr>
<th style="text-align:center">rbd类型</th>
<th style="text-align:center">rbd rm 方法</th>
<th style="text-align:center">rados -p rm方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">未填充很多</td>
<td style="text-align:center">慢</td>
<td style="text-align:center">快</td>
</tr>
<tr>
<td style="text-align:center">已填充很多</td>
<td style="text-align:center">快</td>
<td style="text-align:center">慢</td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从ceph对象中提取RBD中的指定文件]]></title>
    <link href="http://www.zphj1987.com/2017/07/22/from-ceph-object-get-rbd-file/"/>
    <id>http://www.zphj1987.com/2017/07/22/from-ceph-object-get-rbd-file/</id>
    <published>2017-07-22T15:25:35.000Z</published>
    <updated>2017-07-22T15:35:41.820Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/BLDG.png" alt=""><br></center>


<h2 id="前言">前言</h2><p>之前有个想法，是不是有办法找到rbd中的文件与对象的关系，想了很久但是一直觉得文件系统比较复杂，在fs 层的东西对ceph来说是透明的，并且对象大小是4M，而文件很小，可能在fs层进行了合并，应该很难找到对应关系，最近看到小胖有提出这个问题，那么就再次尝试了，现在就是把这个实现方法记录下来<br><a id="more"></a><br>这个提取的作用个人觉得最大的好处就是一个rbd设备，在文件系统层被破坏以后，还能够从rbd提取出文件，我们知道很多情况下设备的文件系统一旦破坏，无法挂载，数据也就无法读取，而如果能从rbd中提取出文件，这就是保证了即使文件系统损坏的情况下，数据至少不丢失</p>
<p>本篇是基于xfs文件系统情况下的提取，其他文件系统有时间再看看，因为目前使用的比较多的就是xfs文件系统</p>
<p>本篇也回答了一个可能会经常被问起的问题，能告诉我虚拟机里面的文件在后台存储在哪里么，看完本篇就知道存储在哪里了</p>
<h2 id="XFS文件系统介绍">XFS文件系统介绍</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># mkfs.xfs -f /dev/rbd0p1 </span></span><br><span class="line">warning: device is not properly aligned /dev/rbd0p1</span><br><span class="line">meta-data=/dev/rbd0p1            isize=<span class="number">256</span>    agcount=<span class="number">9</span>, agsize=<span class="number">162816</span> blks</span><br><span class="line">         =                       sectsz=<span class="number">512</span>   attr=<span class="number">2</span>, projid32bit=<span class="number">1</span></span><br><span class="line">         =                       crc=<span class="number">0</span>        finobt=<span class="number">0</span></span><br><span class="line">data     =                       bsize=<span class="number">4096</span>   blocks=<span class="number">1310475</span>, imaxpct=<span class="number">25</span></span><br><span class="line">         =                       sunit=<span class="number">1024</span>   swidth=<span class="number">1024</span> blks</span><br><span class="line">naming   =version <span class="number">2</span>              bsize=<span class="number">4096</span>   ascii-ci=<span class="number">0</span> ftype=<span class="number">0</span></span><br><span class="line"><span class="built_in">log</span>      =internal <span class="built_in">log</span>           bsize=<span class="number">4096</span>   blocks=<span class="number">2560</span>, version=<span class="number">2</span></span><br><span class="line">         =                       sectsz=<span class="number">512</span>   sunit=<span class="number">8</span> blks, lazy-count=<span class="number">1</span></span><br><span class="line">realtime =none                   extsz=<span class="number">4096</span>   blocks=<span class="number">0</span>, rtextents=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>XFS文件系统采取是AG管理的，每个AG维护自己的inode和数据，所以XFS文件系统是一种很容易扩展的文件系统，本篇里面主要用到的命令是xfs_bmap这个命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># xfs_bmap -lvp /etc/fstab</span></span><br><span class="line">/etc/fstab:</span><br><span class="line"> EXT: FILE-OFFSET      BLOCK-RANGE        AG AG-OFFSET        TOTAL FLAGS</span><br><span class="line">   <span class="number">0</span>: [<span class="number">0</span>..<span class="number">7</span>]:          <span class="number">26645424</span>..<span class="number">26645431</span>  <span class="number">1</span> (<span class="number">431024</span>..<span class="number">431031</span>)     <span class="number">8</span> <span class="number">00000</span></span><br></pre></td></tr></table></figure></p>
<p>一个文件最小就是8个block（512b），也就是4k,这个因为上面默认的xfs的格式化就是data bsize=4K,这个值可以自行调整的，本篇尽量用默认常规的参数来讲例子</p>
<p>查看man xfs_bmap这个命令可以看到：</p>
<blockquote>
<p>Holes are marked by replacing the startblock..endblock with hole.  All the file offsets and disk blocks are in units of 512-byte blocks, no matter what the filesystem’s block size is.</p>
</blockquote>
<p>意思是这个查询到的里面的计数单位都是512-byte，不管上层设置的block大小是多少，我们知道文件系统底层的sector就是512-byte，所以这个查询到的结果就可以跟当前的文件系统的sector的偏移量联系起来，这里强调一下，这个偏移量的起始位子为当前文件系统所在分区的偏移量，如果是多分区的情况，在计算整个偏移量的时候就要考虑分区的偏移量了，这个会在后面用实例进行讲解的</p>
<p>rbd的对象是不清楚内部分区的偏移量，所以在rbd层进行提取的时候是需要得到的是分区当中的文件相对整个磁盘的一个sector的偏移量</p>
<h2 id="rbd的对象结构">rbd的对象结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># rados -p rbd ls|grep data</span></span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">00000000000009</span>ff</span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">00000000000001</span>dd</span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">0000000000000000</span></span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">000000000000009</span>f</span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">0000000000000459</span></span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">000000000000027</span>e</span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">00000000000004</span>ff</span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">000000000000027</span>c</span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">000000000000027</span>d</span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">0000000000000001</span></span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">000000000000013</span>e</span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">00000000000003</span>ba</span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">000000000000031</span>b</span><br><span class="line">rbd_data.<span class="number">25</span>a636b8b4567.<span class="number">00000000000004</span>f8</span><br></pre></td></tr></table></figure>
<p>rbd被xfs格式化以后会产生一些对象，这些对象是以16进制名称的方式存储在后台的，也就是rbd大小一定的情况下对象数目是一定的，也就是名称也是一定的<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># parted -s /dev/rbd0 unit s print</span></span><br><span class="line">Model: Unknown (unknown)</span><br><span class="line">Disk /dev/rbd0: <span class="number">20971520</span>s</span><br><span class="line">Sector size (logical/physical): <span class="number">512</span>B/<span class="number">512</span>B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start      End        Size       File system  Name     Flags</span><br><span class="line"> <span class="number">1</span>      <span class="number">1953</span>s      <span class="number">10485759</span>s  <span class="number">10483807</span>s  xfs          primari</span><br><span class="line"> <span class="number">2</span>      <span class="number">10485760</span>s  <span class="number">20963327</span>s  <span class="number">10477568</span>s               primari</span><br></pre></td></tr></table></figure></p>
<p>上面可以看到rbd0的sector个数为20971520s<br>20971520s*512byte=10737418240byte=10485760KB=10240MB<br>sector的大小一定，总rbd大小一定的情况下sector的数目也是一定的，本篇实例的rbd大小<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># rbd info zp</span></span><br><span class="line">rbd image <span class="string">'zp'</span>:</span><br><span class="line">	size <span class="number">10000</span> MB <span class="keyword">in</span> <span class="number">2500</span> objects</span><br><span class="line">	order <span class="number">22</span> (<span class="number">4096</span> kB objects)</span><br><span class="line">	block_name_prefix: rbd_data.<span class="number">25</span>a776b8b4567</span><br><span class="line">	format: <span class="number">2</span></span><br><span class="line">	features: layering</span><br><span class="line">	flags: </span><br><span class="line">	create_timestamp: Sat Jul <span class="number">22</span> <span class="number">18</span>:<span class="number">04</span>:<span class="number">12</span> <span class="number">2017</span></span><br></pre></td></tr></table></figure></p>
<h2 id="sector和ceph_object的对应关系的查询">sector和ceph object的对应关系的查询</h2><p>这个就像个map一样，需要把这个关系给找到，一个sector的区间对应到object的map，这里我用python写个简单的方法来做查询，也可以自己用其他语言来实现</p>
<p>首先查询到rbd的对象数目<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># rbd info zp</span></span><br><span class="line">rbd image <span class="string">'zp'</span>:</span><br><span class="line">	size <span class="number">10000</span> MB <span class="keyword">in</span> <span class="number">2500</span> objects</span><br><span class="line">	order <span class="number">22</span> (<span class="number">4096</span> kB objects)</span><br><span class="line">	block_name_prefix: rbd_data.<span class="number">25</span>a776b8b4567</span><br><span class="line">	format: <span class="number">2</span></span><br><span class="line">	features: layering</span><br><span class="line">	flags: </span><br><span class="line">	create_timestamp: Sat Jul <span class="number">22</span> <span class="number">18</span>:<span class="number">04</span>:<span class="number">12</span> <span class="number">2017</span></span><br></pre></td></tr></table></figure></p>
<p>处理脚本如下:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim getsecob.py</span><br></pre></td></tr></table></figure></p>
<p>添加下面内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /bin/python</span></span><br><span class="line"><span class="comment"># *-* conding=UTF-8 *-*</span></span><br><span class="line"></span><br><span class="line">import commands</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    getmap(<span class="number">2500</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getmap(object):</span><br><span class="line">    sector=int(object)*<span class="number">4096</span>*<span class="number">1024</span>/<span class="number">512</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">"object:"</span>+str(object)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"sector:"</span>+str(sector)</span><br><span class="line">    incre=sector/object</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(int(object)):</span><br><span class="line">        a=int(item*<span class="number">8192</span>)</span><br><span class="line">        b=int((item+<span class="number">1</span>)*<span class="number">8192</span>-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span> str([a,b])+<span class="string">"  --&gt;  "</span>+<span class="string">"%016x"</span> %item</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>
<p>其中getmap后面为对象数目<br>输出是这个形式的：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># python getsecob.py</span></span><br><span class="line">object:<span class="number">2500</span></span><br><span class="line">sector:<span class="number">20480000</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">8191</span>]  --&gt;  <span class="number">0000000000000000</span></span><br><span class="line">[<span class="number">8192</span>, <span class="number">16383</span>]  --&gt;  <span class="number">0000000000000001</span></span><br><span class="line">[<span class="number">16384</span>, <span class="number">24575</span>]  --&gt;  <span class="number">0000000000000002</span></span><br><span class="line">[<span class="number">24576</span>, <span class="number">32767</span>]  --&gt;  <span class="number">0000000000000003</span></span><br><span class="line">[<span class="number">32768</span>, <span class="number">40959</span>]  --&gt;  <span class="number">0000000000000004</span></span><br><span class="line">[<span class="number">40960</span>, <span class="number">49151</span>]  --&gt;  <span class="number">0000000000000005</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure></p>
<p>对rbd0进行分区，分区后的结果如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># parted -s /dev/rbd0 unit s print</span></span><br><span class="line">Model: Unknown (unknown)</span><br><span class="line">Disk /dev/rbd0: <span class="number">20480000</span>s</span><br><span class="line">Sector size (logical/physical): <span class="number">512</span>B/<span class="number">512</span>B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start      End        Size       File system  Name     Flags</span><br><span class="line"> <span class="number">1</span>      <span class="number">1953</span>s      <span class="number">10240000</span>s  <span class="number">10238048</span>s               primari</span><br><span class="line"> <span class="number">2</span>      <span class="number">10248192</span>s  <span class="number">20471807</span>s  <span class="number">10223616</span>s               primari</span><br></pre></td></tr></table></figure></p>
<p>这个是个测试用的image，大小为10G分成两个5G的分区，现在我们在两个分区里面分别写入两个测试文件，然后经过计算后，从后台的对象中把文件读出<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/rbd0p1 /mnt1</span><br><span class="line">mount /dev/rbd0p2 /mnt2</span><br><span class="line">cp /etc/fstab /mnt1</span><br><span class="line">cp /etc/hostname /mnt2</span><br></pre></td></tr></table></figure></p>
<p>首先获取文件在分区上的sector的偏移量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># xfs_bmap -lvp /mnt1/fstab </span></span><br><span class="line">/mnt1/fstab:</span><br><span class="line"> EXT: FILE-OFFSET      BLOCK-RANGE      AG AG-OFFSET        TOTAL FLAGS</span><br><span class="line">   <span class="number">0</span>: [<span class="number">0</span>..<span class="number">7</span>]:          <span class="number">8224</span>..<span class="number">8231</span>        <span class="number">0</span> (<span class="number">8224</span>..<span class="number">8231</span>)         <span class="number">8</span> <span class="number">01111</span></span><br></pre></td></tr></table></figure></p>
<p>可以得到是(8224..8231)共8个sector<br>从上面的分区1的start的sector可以知道起始位置是1953，那么相对于磁盘的偏移量就变成了</p>
<blockquote>
<p>(8224+1953..8231+1953) = (10177..10184)</p>
</blockquote>
<p>这里说下，这个地方拿到偏移量后，直接通过对rbd设备进行dd读取也可以把这个文件读取出来，这个顺带讲下，本文主要是从对象提取：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/rbd0 of=a bs=<span class="number">512</span> count=<span class="number">8</span> skip=<span class="number">10177</span></span><br></pre></td></tr></table></figure></p>
<p>bs取512是因为sector的单位就是512b<br>这样就把刚刚的fstab文件读取出来了，skip就是文件的sector相对磁盘的起始位置，count就是文件所占的block数目</p>
<p>继续我们的对象提取方式，上面的（10177..10184）这个我们根据上面那个脚本输出的对象列表来找到对象</p>
<blockquote>
<p>[8192, 16383]  —&gt;  0000000000000001<br>获取名称，这个因为我的是测试环境，就只有一个匹配，多个image的时候要过滤出对用的rbd的对象，用prifix过滤即可</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># rados -p rbd ls|grep 0000000000000001</span></span><br><span class="line">rbd_data.<span class="number">25</span>a776b8b4567.<span class="number">0000000000000001</span></span><br></pre></td></tr></table></figure>
<p>下载对象<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># rados -p rbd get rbd_data.25a776b8b4567.0000000000000001 rbd_data.25a776b8b4567.0000000000000001</span></span><br></pre></td></tr></table></figure></p>
<p>根据偏移量计算对象中的偏移量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">（<span class="number">10177</span>..<span class="number">10184</span>）</span><br><span class="line">[<span class="number">8192</span>, <span class="number">16383</span>]  --&gt;  <span class="number">0000000000000001</span></span><br></pre></td></tr></table></figure></p>
<p>得到<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">10177</span>-<span class="number">8192</span>=<span class="number">1985</span></span><br><span class="line"></span><br><span class="line">dd <span class="keyword">if</span>=rbd_data.<span class="number">25</span>a776b8b4567.<span class="number">0000000000000001</span> of=a bs=<span class="number">512</span> count=<span class="number">8</span> skip=<span class="number">1985</span></span><br></pre></td></tr></table></figure></p>
<p>得到的文件a的内容即为之前文件的内容</p>
<p>准备取第二个分区的文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># xfs_bmap -lvp /mnt2/hostname </span></span><br><span class="line">/mnt2/hostname:</span><br><span class="line"> EXT: FILE-OFFSET      BLOCK-RANGE      AG AG-OFFSET        TOTAL FLAGS</span><br><span class="line">   <span class="number">0</span>: [<span class="number">0</span>..<span class="number">7</span>]:          <span class="number">8224</span>..<span class="number">8231</span>        <span class="number">0</span> (<span class="number">8224</span>..<span class="number">8231</span>)         <span class="number">8</span> <span class="number">01111</span></span><br></pre></td></tr></table></figure></p>
<p>8224+10248192..8231+10248192=10256416..10256423</p>
<p>从磁盘方式<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># dd if=/dev/rbd0 of=a bs=512 count=8 skip=10256416</span></span><br></pre></td></tr></table></figure></p>
<p>从对象方式<br>10256416..10256423 对应<br>[10256384, 10264575]  —&gt;  00000000000004e4<br>对象偏移量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="number">10256416</span>-<span class="number">10256384</span>=<span class="number">32</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rados -p rbd get </span><br><span class="line">[root@lab8106 ~]<span class="comment"># rados -p rbd get rbd_data.25a776b8b4567.00000000000004e4 rbd_data.25a776b8b4567.00000000000004e4</span></span><br></pre></td></tr></table></figure>
<p>获取文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lab8106 ~]<span class="comment"># dd if=rbd_data.25a776b8b4567.00000000000004e4 of=a bs=512 count=8 skip=32</span></span><br></pre></td></tr></table></figure></p>
<p>如果文件比较大的情况，可能出现就是文件是跨对象的，那么还是跟上面的提取方法一样，然后进行提取后的文件进行合并即可</p>
<h2 id="总结">总结</h2><p>在存储系统上面存储的文件必然会对应到底层磁盘的sector，而sector也是会一一对应到后台的对象的，这个在本文当中得到了验证，所以整个逻辑就是，在文件系统层找到文件对应的sector位置，然后再在底层把sector和对象关系找好，就能从找到文件在对象当中的具体的位置，也就能定位并且能提取了，本篇是基于xfs的，其他文件系统只要能定位文件的sector，就可以在底层找到文件，这个以后会补充其他文件系统进来</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-07-22</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/BLDG.png" alt=""><br></center>


<h2 id="前言">前言</h2><p>之前有个想法，是不是有办法找到rbd中的文件与对象的关系，想了很久但是一直觉得文件系统比较复杂，在fs 层的东西对ceph来说是透明的，并且对象大小是4M，而文件很小，可能在fs层进行了合并，应该很难找到对应关系，最近看到小胖有提出这个问题，那么就再次尝试了，现在就是把这个实现方法记录下来<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用火焰图分析ceph pg分布]]></title>
    <link href="http://www.zphj1987.com/2017/07/18/use-flame-show-ceph-pg/"/>
    <id>http://www.zphj1987.com/2017/07/18/use-flame-show-ceph-pg/</id>
    <published>2017-07-18T05:35:07.000Z</published>
    <updated>2017-07-18T14:09:45.747Z</updated>
    <content type="html"><![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/flame.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>性能优化大神Brendan Gregg发明了火焰图来定位性能问题，通过图表就可以发现问题出在哪里，通过svg矢量图来查看性能卡在哪个点，哪个操作占用的资源最多<br><a id="more"></a><br>在查看了原始数据后，这个分析的原理是按层级来对调用进行一个计数，然后以层级去做比对，来看横向的占用的比例情况</p>
<p>基于这个原理，把osd tree的数据和pg数据可以做一个层级的组合，从而可以很方便的看出pg的分布情况，主机的分布情况，还可以进行搜索，在一个简单的图表内汇聚了大量的信息</p>
<h2 id="实践">实践</h2><p>获取需要的数据，这个获取数据是我用一个脚本解析的osd tree 和pg dump，然后按照需要的格式进行输出</p>
<blockquote>
<p>default;lab8106;osd.2;0.0 6<br>default;lab8106;osd.3;0.0 6<br>default;rack1;lab8107;osd.0;0.0 6</p>
</blockquote>
<p>需要的格式是这个样的，最后一个为权重，使用的是对象数，因为对象数可能为0，所以默认在每个数值进行了加一的操作，前面就是osd的分布的位置</p>
<p>脚本/sbin/stackcollapse-crush内容如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">import os</span><br><span class="line">import commands</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    global list_all_host</span><br><span class="line">    list_all_host = commands.getoutput(<span class="string">'ceph osd tree -f json-pretty  2&gt;/dev/null'</span>)</span><br><span class="line">    getpgmap()</span><br><span class="line">def getosd(osd):</span><br><span class="line">    mylist=[]</span><br><span class="line">    crushid=&#123;&#125;</span><br><span class="line">    json_str = json.loads(list_all_host)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> json_str[<span class="string">'nodes'</span>]:</span><br><span class="line">        <span class="keyword">if</span> item.has_key(<span class="string">'children'</span>):</span><br><span class="line">            crushid[str(item[<span class="string">'id'</span>])]=str(item[<span class="string">'name'</span>])</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> item[<span class="string">'children'</span>]:</span><br><span class="line">                tmplist=[item[<span class="string">'id'</span>],child]</span><br><span class="line">                mylist.append(tmplist)</span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">'type'</span>] == <span class="string">"osd"</span>:</span><br><span class="line">            crushid[str(item[<span class="string">'id'</span>])]=str(item[<span class="string">'name'</span>])</span><br><span class="line">    listnum=len(mylist)</span><br><span class="line">    compareindex=<span class="number">0</span></span><br><span class="line"><span class="comment">###从数组开始跟后面的数组进行比较，如果有就改变后面的数组，然后删除当前比较的list(index),进行list更新</span></span><br><span class="line"><span class="comment">###如果没有改变，就把索引往后推即可</span></span><br><span class="line">    <span class="keyword">while</span> compareindex &lt; len(mylist):</span><br><span class="line">        change = False</span><br><span class="line">        <span class="keyword">for</span> index,num <span class="keyword">in</span> enumerate(mylist):</span><br><span class="line">            <span class="keyword">if</span> compareindex != index and compareindex &lt; index:</span><br><span class="line">                <span class="keyword">if</span> str(mylist[compareindex][-<span class="number">1</span>]) == str(num[<span class="number">0</span>]):</span><br><span class="line">                    del mylist[index][<span class="number">0</span>]</span><br><span class="line">                    mylist[index]=mylist[compareindex]+mylist[index]</span><br><span class="line">                    change=True</span><br><span class="line">                <span class="keyword">if</span> str(mylist[compareindex][<span class="number">0</span>]) == str(num[-<span class="number">1</span>]):</span><br><span class="line">                    del mylist[index][-<span class="number">1</span>]</span><br><span class="line">                    mylist[index]=mylist[index]+mylist[compareindex]</span><br><span class="line">                    change=True</span><br><span class="line">        <span class="keyword">if</span> change == True:</span><br><span class="line">            del mylist[compareindex]</span><br><span class="line">        <span class="keyword">if</span> change == False:</span><br><span class="line">            compareindex = compareindex + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index,crushlist <span class="keyword">in</span> enumerate(mylist):</span><br><span class="line">        osdcrushlist=[]</span><br><span class="line">        <span class="keyword">for</span> osdlocaltion <span class="keyword">in</span> crushlist:</span><br><span class="line">            <span class="built_in">local</span>=str(crushid[<span class="string">'%s'</span> %osdlocaltion])</span><br><span class="line">            osdcrushlist.append(<span class="built_in">local</span>)</span><br><span class="line">        <span class="keyword">if</span> osdcrushlist[-<span class="number">1</span>] == osd:</span><br><span class="line">            <span class="built_in">return</span> osdcrushlist</span><br><span class="line"></span><br><span class="line">def getpgmap():</span><br><span class="line">    list_all_host = commands.getoutput(<span class="string">'ceph pg  ls --format json-pretty  2&gt;/dev/null'</span>)</span><br><span class="line">    json_str = json.loads(list_all_host)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> json_str:</span><br><span class="line">        <span class="keyword">for</span> osdid <span class="keyword">in</span> item[<span class="string">'up'</span>]:</span><br><span class="line">            osd=<span class="string">"osd."</span>+str(osdid)</span><br><span class="line">            b=<span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> getosd(osd):</span><br><span class="line">                b=b+str(a)+<span class="string">";"</span></span><br><span class="line">            <span class="built_in">print</span> b+item[<span class="string">'pgid'</span>]+<span class="string">" "</span>+str(item[<span class="string">'stat_sum'</span>][<span class="string">'num_objects'</span>]+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>
<h3 id="获取数据">获取数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/sbin/stackcollapse-crush &gt; /tmp/mydata</span><br></pre></td></tr></table></figure>
<h3 id="解析数据">解析数据</h3><p>获取解析脚本，这个脚本是Brendan Gregg写好的，这地方托管到我的github里面了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /sbin/flamegraph https://raw.githubusercontent.com/zphj1987/cephcrushflam/master/flamegraph.pl</span><br></pre></td></tr></table></figure></p>
<p>对数据进行解析<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/sbin/flamegraph  --title  <span class="string">"Ceph crush flame graph"</span> --width <span class="string">"1800"</span> --countname <span class="string">"num"</span> /tmp/mydata &gt; /tmp/mycrush.svg</span><br></pre></td></tr></table></figure></p>
<p>将/tmp/mycrush.svg拷贝到windows机器，然后用浏览器打开即可，推荐chrome</p>
<h3 id="效果图如下">效果图如下</h3><p>Example (右键在新窗口中打开):<br><a href="http://7xweck.com1.z0.glb.clouddn.com/mycrush.svg" target="_blank" rel="external"><img src="http://7xweck.com1.z0.glb.clouddn.com/mycrush.svg" alt="Example"></a></p>
<ul>
<li>通过颜色来区分比例占用的区别</li>
<li>支持搜索</li>
<li>tree方式，可以清楚看到分布</li>
<li>可以查看pg对象数目</li>
<li>可以查看osd上面有哪些pg，主机上有哪些osd</li>
</ul>
<h2 id="总结">总结</h2><p>通过ceph osd tree可以查到整个的信息，但是一个屏幕的信息量有限，而通过滚屏或者过滤进行查询的信息，需要做一下关联，而这种可以缩放的svg位图的方式，可以包含大量的信息，如果是做分析的时候还是能比较直观的看到，上面的难点在于获取数据部分，而绘图的部分是直接用的现有的处理，比自己重新开发一个要简单的多，类似的工具还有个桑基图方式，这个在inkscope这个管理平台里面有用到</p>
<p>本篇就是在最小的视野里容纳尽量多的信息量一个实例，其他的数据有类似模型的也可以做相似的处理</p>
<h2 id="变更记录">变更记录</h2><table>
<thead>
<tr>
<th style="text-align:center">Why</th>
<th style="text-align:center">Who</th>
<th style="text-align:center">When</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center">武汉-运维-磨渣</td>
<td style="text-align:center">2017-07-18</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<center><br><img src="http://7xweck.com1.z0.glb.clouddn.com/flame.png" alt=""><br></center>

<h2 id="前言">前言</h2><p>性能优化大神Brendan Gregg发明了火焰图来定位性能问题，通过图表就可以发现问题出在哪里，通过svg矢量图来查看性能卡在哪个点，哪个操作占用的资源最多<br>]]>
    
    </summary>
    
      <category term="ceph" scheme="http://www.zphj1987.com/tags/ceph/"/>
    
  </entry>
  
</feed>
