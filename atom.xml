<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[zphj1987'Blog]]></title>
  <subtitle><![CDATA[现在所学，终有所用]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-03-21T10:35:45.114Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[zphj1987]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[利用移动硬盘安装windows7系统]]></title>
    <link href="http://yoursite.com/2015/03/21/%E5%88%A9%E7%94%A8%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85windows7%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2015/03/21/利用移动硬盘安装windows7系统/</id>
    <published>2015-03-21T10:34:02.000Z</published>
    <updated>2015-03-21T10:35:45.114Z</updated>
    <content type="html"><![CDATA[<p>首先把win7系统镜像的iso文件解压到移动硬盘中<br>将移动硬盘设置为活动分区<br>设置活动分区的方法<br>Diskpart程序实现U盘安装WIN7的方法: </p>
<p>将Win7安装盘中的所有文件拷贝到硬盘文件夹中,我们这里选择D盘win7back。<br>在开始菜单程序栏中输入cmd进入命令行模式，敲入diskpart进入磁盘分区管理程序,逐行输入</p>
<pre><code>select disk <span class="number">1</span> (选择磁盘。此为disk <span class="number">0</span>硬盘,disk <span class="number">1</span> <span class="variable">U</span>盘情况下,多硬盘时可输入list disk查询) 
<span class="function"><span class="title">clean</span> <span class="params">(清除该磁盘)</span> 
<span class="title">create</span> <span class="title">partition</span> <span class="title">primary</span> <span class="params">(创建主分区)</span> 
<span class="title">select</span> <span class="title">partition</span> 1 <span class="params">(选择刚刚创建的<span class="number">1</span>号分区)</span> 
<span class="title">active</span> <span class="params">(激活该分区)</span> 
<span class="title">format</span> <span class="title">fs</span>=<span class="title">fat32</span> <span class="params">(格式化为<span class="variable">FAT32</span>，<span class="number">8</span><span class="variable">GB</span>闪盘的格式化需要较长时间)</span> 
<span class="title">assign</span> <span class="params">(为该分区注册盘符)</span> 
<span class="title">exit</span> <span class="params">(退出diskpart程序)</span> </span>
</code></pre><p>注:以上操作必须在Vista/Win7下完成，XP虽然也带有diskpart程序,但无法格式化U盘。</p>
<p>这里我们只使用上面的active选项 或者在win7的磁盘管理中将移动硬盘标记为活动分区<br>假设你的移动硬盘的活动分区的盘符为G盘<br>在win7运行cmd</p>
<pre><code><span class="keyword">G</span>:
<span class="keyword">cd</span> <span class="keyword">boot</span>
bootsect /nt60 <span class="keyword">G</span> 
</code></pre><p>命令将引导区写进你的移动硬盘G盘符<br>在开机启动项中选择移动设备启动就可以了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>首先把win7系统镜像的iso文件解压到移动硬盘中<br>将移动硬盘设置为活动分区<br>设置活动分区的方法<br>Diskpart程序实现U盘安装WIN7的方法: </p>
<p>将Win7安装盘中的所有文件拷贝到硬盘文件夹中,我们这里选择D盘win7back。<br>在]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[alias重启终端失效的问题]]></title>
    <link href="http://yoursite.com/2015/03/21/alias%E9%87%8D%E5%90%AF%E7%BB%88%E7%AB%AF%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2015/03/21/alias重启终端失效的问题/</id>
    <published>2015-03-21T10:26:09.000Z</published>
    <updated>2015-03-21T10:33:10.907Z</updated>
    <content type="html"><![CDATA[<p>如果使用命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> xx=<span class="string">'xxxx'</span></span><br></pre></td></tr></table></figure></p>
<p>那么登出以后,别名就会失效。下次登入的时候就不能用了。<br>为了保持别名可以把它写入 /root/.bashrc<br>在.bashrc的最后写入想要的别名,比如:</p>
<pre><code><span class="built_in">alias</span> zp=<span class="string">'ll -al'</span>
</code></pre><p>然后退出,重新登入的时候就可以用了。<br>或者直接运行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<p>这样不用重新登入就可以使用了。</p>
<p>写于: 2011年12月22日<br>更新于: 2015年03月21日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果使用命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CTDB与LVS搭建集群]]></title>
    <link href="http://yoursite.com/2015/03/21/CTDB%E4%B8%8ELVS%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2015/03/21/CTDB与LVS搭建集群/</id>
    <published>2015-03-21T09:13:43.000Z</published>
    <updated>2015-03-21T10:28:58.669Z</updated>
    <content type="html"><![CDATA[<p>搭建一个采用lvs进行负载均衡的CTDB集群，整个集群的架构是采用如图所示</p>
<p><img src="http://7xi6lo.com1.z0.glb.clouddn.com/ctdb.jpg" alt="ctdb"></p>
<p>在上图所示的架构图中，后端采用的集群是我们的存储,集群存储的三个samba服务器的node在作为CTDB的节点的同时,也是运行着我们的内核客户端,将三个内核客户端挂载到后端的集群中,同时这三个samba客户端对外采用三个虚拟的IP,然后采用LVS的网络负载均衡技术,虚拟成一个对外的IP,这样就实现了samba的带宽聚合以及负载均衡。</p>
<h2 id="第一步,搭建一个CTDB集群">第一步,搭建一个CTDB集群</h2><h3 id="一、配置环境">一、配置环境</h3><ul>
<li><p>E5400采用2.6.39内核客户端挂在集群<br>IP:192.168.0.210<br>GW:192.168.1.1<br>NETMASK:255.255.0.0<br>samba node1</p>
</li>
<li><p>E5400采用2.6.39内核客户端挂在集群<br>IP:192.168.0.211<br>GW:192.168.1.1<br>NETMASK：255.255.0.0<br>samba node2 </p>
</li>
<li><p>E5400采用2.6.39内核客户端挂在集群<br>IP:192.168.0.212<br>GW:192.168.1.1<br>NETMASK:255.255.0.0<br>samba node3</p>
</li>
</ul>
<a id="more"></a>
<h3 id="二、配置samba_CTDB">二、配置samba CTDB</h3><p>1、在三个节点上使用如下命令安装samba，CTDB。<br>更新源以后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T02-APP210:~<span class="comment">#apt-get update</span></span><br><span class="line">T02-APP210:~<span class="comment">#apt-get install samba ctdb</span></span><br></pre></td></tr></table></figure></p>
<p>2、在三个节点的/etc/services文件中增加如下内容。</p>
<pre><code><span class="title">ctdb</span> <span class="number">9999</span>/tcp
</code></pre><p>3、在三个节点中修改/etc/samba/smb.conf文件为如下内容,其中/smbcluster是后端集群存储系统的挂载点,/smbcluster/public为用户通过samba访问到的目录</p>
<pre><code>[global]
<span class="variable">clustering =</span> yes
idmap <span class="variable">backend =</span> tdb2
private <span class="variable">dir=</span>/smbcluster/ctdb
fileid:<span class="variable">mapping =</span> fsname
use <span class="variable">mmap =</span> no
nt acl <span class="variable">support =</span> yes
ea <span class="variable">support =</span> yes
[public]
<span class="variable">comment =</span> public share
<span class="variable">path =</span> /smbcluster/public
<span class="variable">public =</span> yes
<span class="variable">writeable =</span> yes
</code></pre><p>4、在三个节点在修改/etc/default/ctdb文件的如下内容。</p>
<pre><code><span class="variable">CTDB_RECOVERY_LOCK=</span><span class="string">"/smbcluster/ctdb/lock"</span>
<span class="variable">CTDB_PUBLIC_INTERFACE=</span>eth0
<span class="variable">CTDB_PUBLIC_ADDRESSES=</span>/etc/ctdb/public_addresses
<span class="variable">CTDB_MANAGES_SAMBA=</span>yes
ulimit -n <span class="number">10000</span>
<span class="variable">CTDB_NODES=</span>/etc/ctdb/nodes
<span class="variable">CTDB_LOGFILE=</span>/var/log/ctdb.log
<span class="variable">CTDB_DEBUGLEVEL=</span><span class="number">2</span>
<span class="variable">CTDB_PUBLIC_NETWORK=</span><span class="string">"192.168.0.0/24"</span>
<span class="variable">CTDB_PUBLIC_GATEWAY=</span><span class="string">"192.168.1.1"</span>
</code></pre><p>5、在三个节点在修改/etc/ctdb/public_addresses文件中增加如下内容，该文件记录Samba CTDB集群提供给客户访问的虚拟IP地址。</p>
<pre><code>192.168.0.80/24
192.168.0.81/24
192.168.0.82/24
</code></pre><p>6、在三个节点上修改/etc/ctdb/nodes文件中增加如下内容，该文件记录Samba CTDB集群节点的IP地址。</p>
<pre><code>192.168.0.210
192.168.0.211
192.168.0.212
</code></pre><p>7、在三个节点上修改/etc/ctdb/events.d/11.route文件中增加如下内容。</p>
<pre><code><span class="shebang">#!/bin/sh</span>
. /etc/ctdb/<span class="built_in">functions</span>
loadconfig ctdb
cmd=<span class="string">"<span class="variable">$1</span>"</span>
<span class="built_in">shift</span>
<span class="keyword">case</span> <span class="variable">$cmd</span> <span class="keyword">in</span>
takeip)
<span class="comment"># we ignore errors from this, as the route might be up already when we're grabbing</span>
<span class="comment"># a 2nd IP on this interface</span>
/sbin/ip route add <span class="variable">$CTDB_PUBLIC_NETWORK</span> via <span class="variable">$CTDB_PUBLIC_GATEWAY</span> dev <span class="variable">$1</span> <span class="number">2</span>&gt; /dev/null
;;
<span class="keyword">esac</span>
<span class="built_in">exit</span> <span class="number">0</span>
</code></pre><h2 id="第二步:Lvs的配置及搭建">第二步:Lvs的配置及搭建</h2><p>LVS是Linux Virtual Server的简写,意即Linux虚拟服务器是一个虚拟的服务器集群系统。本项目在1998年5月由章文嵩博士成立,是中国国内最早出现的自由软件项目之一。目前有三种IP负载均衡技术:VS/NAT、VS/TUN和VS/DR<br>十种调度算法(rrr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq)。<br>官方网站:<a href="www.linuxvirtualserver.org">www.linuxvirtualserver.org</a><br>本次采用的是三个samba服务器节点上做lvs的调度,其中一台既是虚拟主机,又是真实服务器,下面将介绍搭建lvs服务器的步骤</p>
<p>1.基础环境配置<br>三台samba节点分别配置IP为:</p>
<blockquote>
<p>192.168.0.80    #这三个IP为之前CTDB配置的虚拟IP,publicaddress<br>192.168.0.81<br>192.168.0.82</p>
</blockquote>
<p>2.下载和安装LVS</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T02-APP210:~<span class="comment">#apt-get install ipvsadm</span></span><br></pre></td></tr></table></figure>
<p>3.配置虚拟IP服务和负载均衡<br>以192.168.0.11作为LVS的主机,为其设置一个虚拟IP作为samba服务器的接口<br>192.168.0.85为LVS主机的虚拟IP<br>LVS SERVER 配置<br>在192.168.0.11LVS虚拟服务器上执行:<br>设置本级的虚拟IP,作为LVS的虚拟IP</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0:<span class="number">0</span> <span class="number">192.168</span>.<span class="number">0.85</span> netmask <span class="number">255.255</span>.<span class="number">0.0</span> broadcast <span class="number">192.168</span>.<span class="number">0.85</span> up</span><br></pre></td></tr></table></figure>
<p>打开IP转发开关</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="number">1</span>&gt;/proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>
<p>添加虚拟服务器,虚拟IP为192.168.0.85,端口为137,调度算法为rr</p>
<pre><code><span class="comment">#! /bin/sh</span>
<span class="title">ipvsadm</span> -C
ipvsadm -A -u <span class="number">192.168.0.85:137</span> -s rr
ipvsadm -A -u <span class="number">192.168.0.85:138</span> -s rr
ipvsadm -A -t <span class="number">192.168.0.85:139</span> -s rr
ipvsadm -A -t <span class="number">192.168.0.85:445</span> -s rr

ipvsadm -a -u <span class="number">192.168.0.85:137</span> -r <span class="number">192.168.0.81:137</span> -g
ipvsadm -a -u <span class="number">192.168.0.85:137</span> -r <span class="number">192.168.0.80:137</span> -g
ipvsadm -a -u <span class="number">192.168.0.85:137</span> -r <span class="number">192.168.0.82:137</span> -g

ipvsadm -a -u <span class="number">192.168.0.85:138</span> -r <span class="number">192.168.0.82:138</span> -g
ipvsadm -a -u <span class="number">192.168.0.85:138</span> -r <span class="number">192.168.0.80:138</span> -g
ipvsadm -a -u <span class="number">192.168.0.85:138</span> -r <span class="number">192.168.0.81:138</span> -g

ipvsadm -a -t <span class="number">192.168.0.85:139</span> -r <span class="number">192.168.0.80:139</span> -g
ipvsadm -a -t <span class="number">192.168.0.85:139</span> -r <span class="number">192.168.0.81:139</span> -g
ipvsadm -a -t <span class="number">192.168.0.85:139</span> -r <span class="number">192.168.0.82:139</span> -g

ipvsadm -a -t <span class="number">192.168.0.85:445</span> -r <span class="number">192.168.0.82:445</span> -g
ipvsadm -a -t <span class="number">192.168.0.85:445</span> -r <span class="number">192.168.0.81:445</span> -g
ipvsadm -a -t <span class="number">192.168.0.85:445</span> -r <span class="number">192.168.0.80:445</span> -g 
</code></pre><p>启动lvs</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm</span><br><span class="line">IP Virtual Server version <span class="number">1.2</span>.<span class="number">1</span> (size=<span class="number">4096</span>) </span><br><span class="line">Prot LocalAddress:Port Scheduler Flags </span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn </span><br><span class="line">TCP  <span class="number">192.168</span>.<span class="number">91.9</span>:http rr </span><br><span class="line">  -&gt; <span class="number">192.168</span>.<span class="number">91.12</span>:http           Route   <span class="number">1</span>      <span class="number">0</span>          <span class="number">0</span>          </span><br><span class="line">  -&gt; <span class="number">192.168</span>.<span class="number">91.11</span>:http           Route   <span class="number">1</span>      <span class="number">0</span>          <span class="number">0</span></span><br><span class="line">``` </span><br><span class="line">在<span class="number">192.168</span>.<span class="number">0.11</span>虚拟服务器上运行查询命令 </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@hadoop00 ~]<span class="comment"># ipvsadm -l --stats </span></span><br><span class="line">IP Virtual Server version <span class="number">1.2</span>.<span class="number">1</span> (size=<span class="number">4096</span>) </span><br><span class="line">Prot LocalAddress:Port               Conns   InPkts  OutPkts  InBytes OutBytes </span><br><span class="line">  -&gt; RemoteAddress:Port </span><br><span class="line">TCP  <span class="number">192.168</span>.<span class="number">0.80</span>:http                   <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span> </span><br><span class="line">  -&gt; <span class="number">192.168</span>.<span class="number">0.81</span>:http                  <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span> </span><br><span class="line">  -&gt; <span class="number">192.168</span>.<span class="number">0.82</span>:http                  <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>在真实服务器上执行下列脚本</p>
<pre><code><span class="comment">#! /bin/sh</span>
/sbin/ifconfig lo:<span class="number">0</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">91</span> broadcast <span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">91</span> netmask <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span> up
echo <span class="number">1</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/conf/lo/arp_ignore
echo <span class="number">2</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/conf/lo/arp_announce
echo <span class="number">1</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/conf/all/arp_ignore
echo <span class="number">2</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/conf/all/arp_announce
</code></pre><p>到这里整个集群就搭建成功，挂载samba服务器即可</p>
<p>参考文档:</p>
<p><a href="http://zh.linuxvirtualserver.org/node/5" target="_blank" rel="external">http://zh.linuxvirtualserver.org/node/5</a><br><a href="http://zp820705.iteye.com/blog/1151921" target="_blank" rel="external">http://zp820705.iteye.com/blog/1151921</a><br><a href="http://onlyzq.blog.51cto.com/1228/593940/" target="_blank" rel="external">http://onlyzq.blog.51cto.com/1228/593940/</a></p>
<p>写于:  2011年12月10日<br>更新于:2015年03月21日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>搭建一个采用lvs进行负载均衡的CTDB集群，整个集群的架构是采用如图所示</p>
<p><img src="http://7xi6lo.com1.z0.glb.clouddn.com/ctdb.jpg" alt="ctdb"></p>
<p>在上图所示的架构图中，后端采用的集群是我们的存储,集群存储的三个samba服务器的node在作为CTDB的节点的同时,也是运行着我们的内核客户端,将三个内核客户端挂载到后端的集群中,同时这三个samba客户端对外采用三个虚拟的IP,然后采用LVS的网络负载均衡技术,虚拟成一个对外的IP,这样就实现了samba的带宽聚合以及负载均衡。</p>
<h2 id="第一步,搭建一个CTDB集群">第一步,搭建一个CTDB集群</h2><h3 id="一、配置环境">一、配置环境</h3><ul>
<li><p>E5400采用2.6.39内核客户端挂在集群<br>IP:192.168.0.210<br>GW:192.168.1.1<br>NETMASK:255.255.0.0<br>samba node1</p>
</li>
<li><p>E5400采用2.6.39内核客户端挂在集群<br>IP:192.168.0.211<br>GW:192.168.1.1<br>NETMASK：255.255.0.0<br>samba node2 </p>
</li>
<li><p>E5400采用2.6.39内核客户端挂在集群<br>IP:192.168.0.212<br>GW:192.168.1.1<br>NETMASK:255.255.0.0<br>samba node3</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[单独编译一个ext4模块]]></title>
    <link href="http://yoursite.com/2015/03/20/%E5%8D%95%E7%8B%AC%E7%BC%96%E8%AF%91%E4%B8%80%E4%B8%AAext4%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2015/03/20/单独编译一个ext4模块/</id>
    <published>2015-03-20T09:49:26.000Z</published>
    <updated>2015-03-20T10:01:18.487Z</updated>
    <content type="html"><![CDATA[<p>当我们需要使用一个内核模块的时候,在当前使用版本内核编译的时候又没有加进去,在不改变内核版本的时候,再编译整个内核,可能会覆盖原来的内核,导致系统无法启动</p>
<p>现在我们能够单独选择需要的模块,然后加载进内核</p>
<h3 id="准备工作">准备工作</h3><p>首先进入你当前使用的系统查看当前的使用内核版本,在这里是 2.3.39</p>
<p>下载对应内核源码包 linux-2.6.39.tar.bz2 将源码包放入 /usr/src/ 下<br>解压源码包<br>更新编译工具包</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install bzip2 libncurses5-dev kernel-package zlib1g-dev gcc make kernel-package wget module-init-tools procps libncurses5-dev</span><br></pre></td></tr></table></figure>
<p>进入到你需要的模块的文件夹下面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/src/linux-<span class="number">2.6</span>.<span class="number">39</span>/fs/ext4/</span><br></pre></td></tr></table></figure></p>
<p>进入 Makefile 查看模块信息</p>
<p>编译模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ T02-APP205:/usr/src/linux-<span class="number">2.6</span>.<span class="number">39</span>/fs/ext4<span class="comment"># make CONFIG_EXT4_FS=m -C /lib/module s /`uname -r` / build M=`pwd` modules</span></span><br></pre></td></tr></table></figure></p>
<p>可能会报错</p>
<p>找不到编译的文件路径,做一个软连接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln <span class="operator">-s</span> /usr/src/linux-headers-<span class="number">2.6</span>.<span class="number">39</span>/ /lib/modules/<span class="number">2.6</span>.<span class="number">39</span>/build</span><br></pre></td></tr></table></figure>
<p>再做一次</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make CONFIG_EXT4_FS=m -C /lib/module s /`uname -r` / build M=`<span class="built_in">pwd</span>` modules</span><br></pre></td></tr></table></figure>
<p>就生成了两个模块 ，将这两个模块拷到你的当前使用内核的模块的路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /lib/modules/<span class="number">2.6</span>.<span class="number">39</span>/kernel/fs/ext4</span><br><span class="line"></span><br><span class="line">$ T02-APP205:/usr/src/linux-<span class="number">2.6</span>.<span class="number">39</span>/fs/ext4<span class="comment"># cp ext4.mod.o /lib/modules/2.6.39/kernel/fs/ext4</span></span><br><span class="line"></span><br><span class="line">$ T02-APP205:/usr/src/linux-<span class="number">2.6</span>.<span class="number">39</span>/fs/ext4<span class="comment"># cp ext4.ko /lib/modules/2.6.39/kernel/fs/ext4</span></span><br><span class="line"></span><br><span class="line">$ T02-APP205:/usr/src/linux-<span class="number">2.6</span>.<span class="number">39</span>/fs/ext4<span class="comment"># depmod</span></span><br><span class="line"></span><br><span class="line">$ T02-APP205:/usr/src/linux-<span class="number">2.6</span>.<span class="number">39</span>/fs/ext4<span class="comment">#modprobe ext4</span></span><br></pre></td></tr></table></figure></p>
<p>就可以看到 ext4 模块了</p>
<hr>
<p>写于:2011年12月16日</p>
<h2 id="更新于:2015年03月20日">更新于:2015年03月20日</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>当我们需要使用一个内核模块的时候,在当前使用版本内核编译的时候又没有加进去,在不改变内核版本的时候,再编译整个内核,可能会覆盖原来的内核,导致系统无法启动</p>
<p>现在我们能够单独选择需要的模块,然后加载进内核</p>
<h3 id="准备工作">准备工作</h3><p>首先进入你当前使用的系统查看当前的使用内核版本,在这里是 2.3.39</p>
<p>下载对应内核源码包 linux-2.6.39.tar.bz2 将源码包放入 /usr/src/ 下<br>解压源码包<br>更新编译工具包</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Debian 64位内核升级步骤]]></title>
    <link href="http://yoursite.com/2015/03/20/Debian-64%E4%BD%8D%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2015/03/20/Debian-64位内核升级步骤/</id>
    <published>2015-03-20T09:21:21.000Z</published>
    <updated>2015-03-20T10:02:26.312Z</updated>
    <content type="html"><![CDATA[<h3 id="安装相关依赖包">安装相关依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install bzip2 libncurses5-dev kernel-package zlib1g-dev gcc make kernel-package wget module-init-tools procps libncurses5-dev</span><br></pre></td></tr></table></figure>
<h3 id="下载源码">下载源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">wget http://www.kernel.org/pub/linux/kernel/v2.<span class="number">6</span>/linux-<span class="number">2.6</span>.<span class="number">35.9</span>.tar.bz2</span><br><span class="line">tar -xvjf linux-<span class="number">2.6</span>.<span class="number">35.9</span>.tar.bz2</span><br><span class="line">cp /boot/config-`uname -r` /usr/src/linux-<span class="number">2.6</span>.<span class="number">35.9</span>/.config</span><br><span class="line">Then we must configure the new kernel:</span><br><span class="line"><span class="built_in">cd</span> linux-<span class="number">2.6</span>.<span class="number">35.9</span></span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="裁剪不需要的东西">裁剪不需要的东西</h3><p>我们在内核配置里面至少有几个地方要修改。如下所示:</p>
<blockquote>
<p>File systems -&gt; Btrfs filesystem (EXPERIMENTAL) Unstable disk format<br>在”Btrfs filesystem”之前标上&lt;*&gt;<br>Processor type and features -&gt; Processor Family -&gt; “our processor”<br>删除Dell laptop support、Toshiba Laptop support。<br>裁减sound card support。<br>裁减Bluetooth subsystem support。<br>裁减Wireless。<br>裁减Kernel hacking 。<br>多次点击“ESC”退出,保存<br>make-kpkg linux-image linux-headers —initrd<br>编译成功后执行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ dpkg -i linux-image-<span class="number">2.6</span>.<span class="number">29</span>_2.<span class="number">6.35</span>.<span class="number">9</span>-<span class="number">10.00</span>.Custom_i386.deb</span><br><span class="line">$ dpkg -i linux-headers-<span class="number">2.6</span>.<span class="number">29</span>_2.<span class="number">6.35</span>.<span class="number">9</span>-<span class="number">10.00</span>.Custom_i386.deb</span><br></pre></td></tr></table></figure>
<p>重启,用 uname-a 查看内核版本</p>
<h3 id="错误处理">错误处理</h3><p>编译完成后生成linux deb 包,先dpkg -i装image,再装headers</p>
<p>安装完成以后再update-grub 进入/boot/grub/menu.lst 中选择启动的内核项 默认的第一项为0</p>
<p>在编译完成内核后开机可能出现 Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(1,0)的错误 在/boot/grub/menu.lst中可以发现新加的内核可能是没有 initrd   /initrd.img-2.6.37.6 未生成的原因不明 可以手动生成<br>执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkinitramfs -o /boot/initrd.img-<span class="number">2.6</span>.<span class="number">34.10</span> <span class="number">2.6</span>.<span class="number">34.10</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>/boot/initrd.img-2.6.34.10是这个启动加载文件的生成路径<br>2.6.34.10是 /lib/modules/2.6.34.10</p>
</blockquote>
<p>然后update-grub 再启动新内核就没有问题了<br>卸载一个已经安装的内核包<br>debian卸载旧内核要先看看有哪些旧的内核,用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg --get-selections |grep linux</span><br></pre></td></tr></table></figure></p>
<p>如果你的内核是以kernel开头的就把上面的linux改成kernel,之后再用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg --purge --force-remove-essential linux-image-XXX</span><br></pre></td></tr></table></figure>
<hr>
<p>写于  : 2011年12月16日<br>更新于: 2015年3月20日</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="安装相关依赖包">安装相关依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install bzip2 libncurses5-dev kernel-package zlib1g-dev gcc make kernel-package wget module-init-tools procps libncurses5-dev</span><br></pre></td></tr></table></figure>
<h3 id="下载源码">下载源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">wget http://www.kernel.org/pub/linux/kernel/v2.<span class="number">6</span>/linux-<span class="number">2.6</span>.<span class="number">35.9</span>.tar.bz2</span><br><span class="line">tar -xvjf linux-<span class="number">2.6</span>.<span class="number">35.9</span>.tar.bz2</span><br><span class="line">cp /boot/config-`uname -r` /usr/src/linux-<span class="number">2.6</span>.<span class="number">35.9</span>/.config</span><br><span class="line">Then we must configure the new kernel:</span><br><span class="line"><span class="built_in">cd</span> linux-<span class="number">2.6</span>.<span class="number">35.9</span></span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[test1]]></title>
    <link href="http://yoursite.com/2015/03/19/test/"/>
    <id>http://yoursite.com/2015/03/19/test/</id>
    <published>2015-03-19T15:27:00.000Z</published>
    <updated>2015-03-20T08:53:32.778Z</updated>
    <content type="html"><![CDATA[<p>av<br>sd<br>sad<br>as<br>da<br>sd<br>as<br>da<br>sdasddddddddddddddddd</p>
<p>a</p>
<p>a<br>a</p>
<p>asdasd<br>as<br>d<br>asd<br>as<br>da</p>
<p>as<br>das<br>d<br>as</p>
<p>asds</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>av<br>sd<br>sad<br>as<br>da<br>sd<br>as<br>da<br>sdasddddddddddddddddd</p>
<p>a</p>
<p>a<br>a</p>
<p>asdasd<br>as<br>d<br>asd<br>as<br>da]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[the fist day]]></title>
    <link href="http://yoursite.com/2015/03/19/the-fist-day/"/>
    <id>http://yoursite.com/2015/03/19/the-fist-day/</id>
    <published>2015-03-19T14:54:59.000Z</published>
    <updated>2015-03-19T15:11:25.413Z</updated>
    <content type="html"><![CDATA[<h2 id="为什么写这个博客">为什么写这个博客</h2><p>博客转移了很多地方,从最开始的人人小站,到后来的CSDN,再到简书,换来换去直到看到还有个hexo,这个是搭建在github上的一个博客,只不过排版什么的可能需要自己来处理了,这个博客最大的优点就是简洁,可以很方便的找到自己需要了,打算用这个还有个原因是,看到了几个写的很好的技术文章正好来自这个平台,自己也尝试着把好东西都放到这里汇总</p>
<p>很多东西真的非常喜欢,比如goagent,比如google,比如github,以及一些其他的开源的东西,也许很多人无法理解share是个什么感觉</p>
<p>这个博客是我技术文章开始的地方,也是我和嘎嘎开始减肥的日子,也该活的有生气一些,准备数据化我们的减肥数据,也许这样更能激励自己</p>
<p>谷歌的十大信条:</p>
<pre><code>1、以用户为中心,其他一切自然水到渠成
2、专心将一件事做到极致
3、越快越好
4、网络上也讲民主
5、信息随时随地可得
6、赚钱不必作恶
7、信息无极限
8、信息需求无国界
9、认真不在着装
10、追求无止境
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="为什么写这个博客">为什么写这个博客</h2><p>博客转移了很多地方,从最开始的人人小站,到后来的CSDN,再到简书,换来换去直到看到还有个hexo,这个是搭建在github上的一个博客,只不过排版什么的可能需要自己来处理了,这个博客最大的优点就是简洁,可以很方]]>
    </summary>
    
  </entry>
  
</feed>