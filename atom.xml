<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[zphj1987'Blog]]></title>
  <subtitle><![CDATA[现在所学，终有所用]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-03-23T00:09:10.719Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[zphj1987]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ubuntu服务器dns重启失效问题]]></title>
    <link href="http://yoursite.com/2015/03/23/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8dns%E9%87%8D%E5%90%AF%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2015/03/23/ubuntu服务器dns重启失效问题/</id>
    <published>2015-03-23T00:05:19.000Z</published>
    <updated>2015-03-23T00:09:10.719Z</updated>
    <content type="html"><![CDATA[<h3 id="方法一_通过/etc/network/interfaces,在它的最后增加一句:">方法一 通过/etc/network/interfaces,在它的最后增加一句:</h3><pre><code>dns-nameservers 8.8.8.8
</code></pre><p>8.8.8.8是Google提供的DNS服务，这里只是举一个例子,你也可以改成电信运营商的DNS。重启后DNS就生效了，这时候再看/etc/resolv.conf,最下面就多了一行:</p>
<pre><code># Dynamic resolv.<span class="keyword">conf</span>(5) <span class="keyword">file</span> <span class="keyword">for</span> glibc resolver(3) generated <span class="keyword">by</span> resolvconf(8)
#     <span class="keyword">DO</span> NOT <span class="keyword">EDIT</span> THIS <span class="keyword">FILE</span> <span class="keyword">BY</span> HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 8.8.8.8
</code></pre><a id="more"></a>
<h3 id="方法二_通过修改:">方法二 通过修改:</h3><p>/etc/resolvconf/resolv.conf.d/base,这个文件默认是空的:<br>在里面插入:</p>
<pre><code><span class="title">nameserver</span> <span class="number">8.8.8.8</span>
nameserver <span class="number">8.8.4.4</span>
</code></pre><p>如果有多个DNS就一行一个<br>修改好保存,然后执行:</p>
<pre><code><span class="title">resolvconf</span> -u
</code></pre><p>再看/etc/resolv.conf,最下面就多了2行:<br>cat /etc/resolv.conf</p>
<pre><code># Dynamic resolv.<span class="keyword">conf</span>(5) <span class="keyword">file</span> <span class="keyword">for</span> glibc resolver(3) generated <span class="keyword">by</span> resolvconf(8)
#     <span class="keyword">DO</span> NOT <span class="keyword">EDIT</span> THIS <span class="keyword">FILE</span> <span class="keyword">BY</span> HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 8.8.8.8
nameserver 8.8.4.4
</code></pre><p>可以看到我们的设置已经加上了,然后再ping一个域名,当时就可以解析了,无需重启。<br>附:CentOS下修改DNS则容易的多了,直接修改/etc/resolv.conf,内容是:<br>nameserver 8.8.8.8<br>nameserver 8.8.4.4<br>保存就生效了,重启也没问题。<br>或者在网卡配置文件当中添加:</p>
<pre><code><span class="attribute">DNS1</span>=<span class="string">8.8.8.8</span>
</code></pre><p>写于: 2013年11月26日<br>更新于: 2015年03月23日</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="方法一_通过/etc/network/interfaces,在它的最后增加一句:">方法一 通过/etc/network/interfaces,在它的最后增加一句:</h3><pre><code>dns-nameservers 8.8.8.8
</code></pre><p>8.8.8.8是Google提供的DNS服务，这里只是举一个例子,你也可以改成电信运营商的DNS。重启后DNS就生效了，这时候再看/etc/resolv.conf,最下面就多了一行:</p>
<pre><code># Dynamic resolv.<span class="keyword">conf</span>(5) <span class="keyword">file</span> <span class="keyword">for</span> glibc resolver(3) generated <span class="keyword">by</span> resolvconf(8)
#     <span class="keyword">DO</span> NOT <span class="keyword">EDIT</span> THIS <span class="keyword">FILE</span> <span class="keyword">BY</span> HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 8.8.8.8
</code></pre>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[编译一个Centos6.4下可用的内核rpm升级包-3.8.13内核rpm包]]></title>
    <link href="http://yoursite.com/2015/03/23/%E7%BC%96%E8%AF%91%E4%B8%80%E4%B8%AACentos6-4%E4%B8%8B%E5%8F%AF%E7%94%A8%E7%9A%84%E5%86%85%E6%A0%B8rpm%E5%8D%87%E7%BA%A7%E5%8C%85-3-8-13%E5%86%85%E6%A0%B8rpm%E5%8C%85/"/>
    <id>http://yoursite.com/2015/03/23/编译一个Centos6-4下可用的内核rpm升级包-3-8-13内核rpm包/</id>
    <published>2015-03-22T23:59:15.000Z</published>
    <updated>2015-03-23T00:04:41.901Z</updated>
    <content type="html"><![CDATA[<p>在Centos6.4下进行内核升级,采用内核源码的升级方式比较简单，但是需要升级的机器多的情况下进行内核升级就比较麻烦,并且编译内核的速度依赖于机器的性能,一般需要20分钟,而通过rpm内核包的方式进行安装,就比较快,一般在几分钟之内就可以完成内核的安装,本文档以3.8.13内核源码为例子进行的操作。<br>  根据网上的指导教程编译的rpm包，编译完成后只会生成如下两个rpm包:</p>
<ul>
<li>kernel-3.8.13-1.x86_64.rpm</li>
<li>kernel-headers-3.8.13-1.x86_64.rpm</li>
</ul>
<p>而实际进行内核升级的时候还需要kernel-firmwsare-3.8.13-1.x86_64.rpm这个包,这个包是包含内核固件相关文件的,而在进行rpm打包的时候,这个包会内嵌到kernel-3.8.13-1.x86_64.rpm这个包当中去,而安装的时候系统没有找到这个包，进行升级的时候就会报错。<br>所以需要对内核源码编译文件进行一定的修改，这个地方需要修改的文件为linux-3.8.13/scripts/package/mkspec路径下的这个文件,具体修改如下(新版内核解决了这个问题,可以不需要修改,根据生成包的情况来看是否修改):</p>
<a id="more"></a>
<h4 id="加入kernel-devel支持需要修改">加入kernel-devel支持需要修改</h4><pre><code>scripts/package/mkspec |   <span class="number">26</span> ++++++++++++++++++++++++++
 <span class="number">1</span> <span class="keyword">file</span> changed, <span class="number">26</span> insertions(+)
diff --git <span class="keyword">a</span>/scripts/package/mkspec <span class="keyword">b</span>/scripts/package/mkspec
<span class="built_in">index</span> <span class="number">514</span>aeb2..<span class="number">65131</span>df <span class="number">100755</span>
--- <span class="keyword">a</span>/scripts/package/mkspec
+++ <span class="keyword">b</span>/scripts/package/mkspec
@@ -<span class="number">59</span>,<span class="number">6</span> +<span class="number">59</span>,<span class="number">14</span> @@ <span class="keyword">echo</span> <span class="string">"header files define structures and constants that are needed for"</span>
 <span class="keyword">echo</span> <span class="string">"building most standard programs and are also needed for rebuilding the"</span>
 <span class="keyword">echo</span> <span class="string">"glibc package."</span>
 <span class="keyword">echo</span> <span class="string">""</span>
+<span class="keyword">echo</span> <span class="string">"%package devel"</span>
+<span class="keyword">echo</span> <span class="string">"Summary: Development package for building kernel modules to match the $__KERNELRELEASE kernel"</span>
+<span class="keyword">echo</span> <span class="string">"Group: System Environment/Kernel"</span>
+<span class="keyword">echo</span> <span class="string">"AutoReqProv: no"</span>
+<span class="keyword">echo</span> <span class="string">"%description -n kernel-devel"</span>
+<span class="keyword">echo</span> <span class="string">"This package provides kernel headers and makefiles sufficient to build modules"</span>
+<span class="keyword">echo</span> <span class="string">"against the $__KERNELRELEASE kernel package."</span>
+<span class="keyword">echo</span> <span class="string">""</span>

 <span class="keyword">if</span> ! $PREBUILT; then
 <span class="keyword">echo</span> <span class="string">"%prep"</span>
@@ -<span class="number">109</span>,<span class="number">6</span> +<span class="number">117</span>,<span class="number">11</span> @@ <span class="keyword">echo</span> <span class="string">'mv vmlinux.bz2 $RPM_BUILD_ROOT'</span><span class="string">"/boot/vmlinux-$KERNELRELEASE.bz2"</span>
 <span class="keyword">echo</span> <span class="string">'mv vmlinux.orig vmlinux'</span>
 <span class="keyword">echo</span> <span class="string">"%endif"</span>

+<span class="keyword">echo</span> <span class="string">'rm -rf $RPM_BUILD_ROOT'</span><span class="string">"/lib/modules/$KERNELRELEASE/{build,source}"</span>
+<span class="keyword">echo</span> <span class="string">"mkdir -p "</span><span class="string">'$RPM_BUILD_ROOT'</span><span class="string">"/usr/src/kernels/$KERNELRELEASE"</span>
+<span class="keyword">echo</span> <span class="string">"EXCLUDES=\"--exclude-vcs --exclude .tmp_versions --exclude=*vmlinux* --exclude=*.o --exclude=*.ko --exclude=*.cmd --exclude=Documentation --exclude=firmware --exclude .config.old --exclude .missing-syscalls.d\""</span>
+<span class="keyword">echo</span> <span class="string">"tar "</span><span class="string">'$EXCLUDES'</span><span class="string">" -cf- . | (cd "</span><span class="string">'$RPM_BUILD_ROOT'</span><span class="string">"/usr/src/kernels/$KERNELRELEASE;tar xvf -)"</span>
+
 <span class="keyword">echo</span> <span class="string">""</span>
 <span class="keyword">echo</span> <span class="string">"%clean"</span>
 <span class="keyword">echo</span> <span class="string">'rm -rf $RPM_BUILD_ROOT'</span>
@@ -<span class="number">122</span>,<span class="number">6</span> +<span class="number">135</span>,<span class="number">15</span> @@ <span class="keyword">echo</span> <span class="string">"/sbin/installkernel $KERNELRELEASE /boot/vmlinuz-$KERNELRELEASE-rpm /boot/
</span> <span class="keyword">echo</span> <span class="string">"rm -f /boot/vmlinuz-$KERNELRELEASE-rpm /boot/System.map-$KERNELRELEASE-rpm"</span>
 <span class="keyword">echo</span> <span class="string">"fi"</span>
 <span class="keyword">echo</span> <span class="string">""</span>
+<span class="keyword">echo</span> <span class="string">"%post devel"</span>
+<span class="keyword">echo</span> <span class="string">"cd /lib/modules/$KERNELRELEASE"</span>
+<span class="keyword">echo</span> <span class="string">"ln -sf /usr/src/kernels/$KERNELRELEASE build"</span>
+<span class="keyword">echo</span> <span class="string">"ln -sf /usr/src/kernels/$KERNELRELEASE source"</span>
+<span class="keyword">echo</span> <span class="string">""</span>
+<span class="keyword">echo</span> <span class="string">"%postun devel"</span>
+<span class="keyword">echo</span> <span class="string">"cd /lib/modules/$KERNELRELEASE"</span>
+<span class="keyword">echo</span> <span class="string">"rm -f build source"</span>
+<span class="keyword">echo</span> <span class="string">""</span>
 <span class="keyword">echo</span> <span class="string">"%files"</span>
 <span class="keyword">echo</span> <span class="string">'%defattr (-, root, root)'</span>
 <span class="keyword">echo</span> <span class="string">"%dir /lib/modules"</span>
@@ -<span class="number">133</span>,<span class="number">3</span> +<span class="number">155</span>,<span class="number">7</span> @@ <span class="keyword">echo</span> <span class="string">"%files headers"</span>
 <span class="keyword">echo</span> <span class="string">'%defattr (-, root, root)'</span>
 <span class="keyword">echo</span> <span class="string">"/usr/include"</span>
 <span class="keyword">echo</span> <span class="string">""</span>
+<span class="keyword">echo</span> <span class="string">"%files devel"</span>
+<span class="keyword">echo</span> <span class="string">'%defattr (-, root, root)'</span>
+<span class="keyword">echo</span> <span class="string">"/usr/src/kernels/$KERNELRELEASE"</span>
+<span class="keyword">echo</span> <span class="string">""</span>
</code></pre><h4 id="加入kernel-firmware支持需要修改：">加入kernel-firmware支持需要修改：</h4><pre><code><span class="number">1</span> files changed, <span class="number">11</span> insertions(+), <span class="number">1</span> deletions(-) 

diff --git a/scripts/package/mkspec b/scripts/package/mkspec 
index b20bdac..<span class="number">35</span>e68d1 <span class="number">100755</span> 
--- a/scripts/package/mkspec 
+++ b/scripts/package/mkspec 
@@ -<span class="number">68</span>,<span class="number">6</span> +<span class="number">68</span>,<span class="number">13</span> @@ <span class="built_in">echo</span> <span class="string">"between the Linux kernel and userspace libraries and programs. The"</span> 
<span class="built_in">echo</span> <span class="string">"header files define structures and constants that are needed for"</span> 
<span class="built_in">echo</span> <span class="string">"building most standard programs and are also needed for rebuilding the"</span> 
<span class="built_in">echo</span> <span class="string">"glibc package."</span> 
+<span class="built_in">echo</span> <span class="string">""</span> 
+<span class="built_in">echo</span> <span class="string">"%package firmware"</span> 
+<span class="built_in">echo</span> <span class="string">"Summary: Set of firmware images in the kernel tree"</span> 
+<span class="built_in">echo</span> <span class="string">"Group: Development/System"</span> 
+<span class="built_in">echo</span> <span class="string">"%description firmware"</span> 
+<span class="built_in">echo</span> <span class="string">"Firmware images in the kernel tree provided for backward compability"</span> 
+<span class="built_in">echo</span> <span class="string">""</span>

<span class="keyword">if</span> ! <span class="variable">$PREBUILT</span>; <span class="keyword">then</span> 
<span class="built_in">echo</span> <span class="string">"%prep"</span> 
@@ -<span class="number">137</span>,<span class="number">7</span> +<span class="number">144</span>,<span class="number">6</span> @@ <span class="built_in">echo</span> <span class="string">"%files"</span> 
<span class="built_in">echo</span> <span class="string">'%defattr (-, root, root)'</span> 
<span class="built_in">echo</span> <span class="string">"%dir /lib/modules"</span> 
<span class="built_in">echo</span> <span class="string">"/lib/modules/<span class="variable">$KERNELRELEASE</span>"</span> 
-echo <span class="string">"/lib/firmware"</span> 
<span class="built_in">echo</span> <span class="string">"/boot/*"</span> 
<span class="built_in">echo</span> <span class="string">""</span> 
<span class="built_in">echo</span> <span class="string">"%files devel"</span> 
@@ -<span class="number">148</span>,<span class="number">3</span> +<span class="number">154</span>,<span class="number">7</span> @@ <span class="built_in">echo</span> <span class="string">"%files headers"</span> 
<span class="built_in">echo</span> <span class="string">'%defattr (-, root, root)'</span> 
<span class="built_in">echo</span> <span class="string">"/usr/include"</span> 
<span class="built_in">echo</span> <span class="string">""</span> 
+<span class="built_in">echo</span> <span class="string">"%files firmware"</span> 
+<span class="built_in">echo</span> <span class="string">'%defattr (-, root, root)'</span> 
+<span class="built_in">echo</span> <span class="string">"/lib/firmware"</span> 
+<span class="built_in">echo</span> <span class="string">""</span>
</code></pre><p>修改完上面的然后在根目录进行 make rpm 即可生成相应的内核rpm包<br>这个是修改完的内核mkspec文件，可以直接使用<br><a href="https://www.dropbox.com/s/nsvyf607t91k2mq/mkspec" target="_blank" rel="external">https://www.dropbox.com/s/nsvyf607t91k2mq/mkspec</a><br>安装前需要安装依赖包</p>
<p> yum install -y gcc make  bison ncurses-devel rpm-build</p>
<p>写于: 2013年09月18日<br>更新于: 2015年03月23日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Centos6.4下进行内核升级,采用内核源码的升级方式比较简单，但是需要升级的机器多的情况下进行内核升级就比较麻烦,并且编译内核的速度依赖于机器的性能,一般需要20分钟,而通过rpm内核包的方式进行安装,就比较快,一般在几分钟之内就可以完成内核的安装,本文档以3.8.13内核源码为例子进行的操作。<br>  根据网上的指导教程编译的rpm包，编译完成后只会生成如下两个rpm包:</p>
<ul>
<li>kernel-3.8.13-1.x86_64.rpm</li>
<li>kernel-headers-3.8.13-1.x86_64.rpm</li>
</ul>
<p>而实际进行内核升级的时候还需要kernel-firmwsare-3.8.13-1.x86_64.rpm这个包,这个包是包含内核固件相关文件的,而在进行rpm打包的时候,这个包会内嵌到kernel-3.8.13-1.x86_64.rpm这个包当中去,而安装的时候系统没有找到这个包，进行升级的时候就会报错。<br>所以需要对内核源码编译文件进行一定的修改，这个地方需要修改的文件为linux-3.8.13/scripts/package/mkspec路径下的这个文件,具体修改如下(新版内核解决了这个问题,可以不需要修改,根据生成包的情况来看是否修改):</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[expect循环的写法]]></title>
    <link href="http://yoursite.com/2015/03/23/expect%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%86%99%E6%B3%95/"/>
    <id>http://yoursite.com/2015/03/23/expect循环的写法/</id>
    <published>2015-03-22T23:55:53.000Z</published>
    <updated>2015-03-22T23:57:14.628Z</updated>
    <content type="html"><![CDATA[<p>脚本:</p>
<pre><code><span class="shebang">#!/usr/bin/expect</span>
spawn sensors-detect
<span class="keyword">for</span> {set i <span class="number">0</span>} {$i&lt;=<span class="number">10</span>} {incr i} {
expect <span class="string">":"</span>
send <span class="string">"\n"</span>
}
interact
</code></pre><p>解释:</p>
<p>spawn是启动命令<br>for为循环的写法<br>interact为退出<br>这个脚本目的是在一次运行过程中不断模拟用户的enter操作</p>
<p>写于:2013年08月12日<br>更新于: 2015年03月23日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>脚本:</p>
<pre><code><span class="shebang">#!/usr/bin/expect</span>
spawn sensors-detect
<span class="keyword">for</span> {set i <span clas]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux系统启动的时候用脚本生成ssh密钥对（免输入enter）]]></title>
    <link href="http://yoursite.com/2015/03/22/linux%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E7%9A%84%E6%97%B6%E5%80%99%E7%94%A8%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5%E5%AF%B9%EF%BC%88%E5%85%8D%E8%BE%93%E5%85%A5enter%EF%BC%89/"/>
    <id>http://yoursite.com/2015/03/22/linux系统启动的时候用脚本生成ssh密钥对（免输入enter）/</id>
    <published>2015-03-22T15:07:52.000Z</published>
    <updated>2015-03-22T15:10:04.943Z</updated>
    <content type="html"><![CDATA[<p>默认执行ssh-keygen的时候会需要连续输入enter,脚本里面不能有交互,所以去掉enter的操作,脚本如下,脚本执行完成以后的效果是自己对自己免登陆,需要免登陆其他服务器就把自己本机的id_rsa.pub拷贝到其他机器的authorized_keys当中就可以了</p>
<pre><code><span class="shebang">#! /bin/sh</span>
ssh-keygen -t rsa <span class="operator">-f</span> /root/.ssh/id_rsa -q -N <span class="string">""</span>
cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys
</code></pre><p>写于: 2013年08月07日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>默认执行ssh-keygen的时候会需要连续输入enter,脚本里面不能有交互,所以去掉enter的操作,脚本如下,脚本执行完成以后的效果是自己对自己免登陆,需要免登陆其他服务器就把自己本机的id_rsa.pub拷贝到其他机器的authorized_keys当中就可以了</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos做时间同步服务器]]></title>
    <link href="http://yoursite.com/2015/03/22/centos%E5%81%9A%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2015/03/22/centos做时间同步服务器/</id>
    <published>2015-03-22T15:02:10.000Z</published>
    <updated>2015-03-22T15:05:16.600Z</updated>
    <content type="html"><![CDATA[<p>修改同步服务器的配置文件/etc/ntp.conf ,删除所有的内容,添加</p>
<pre><code><span class="title">restrict</span> default nomodify
server  <span class="number">127.127.1.0</span>     <span class="comment"># local clock</span>
fudge   <span class="number">127.127.1.0</span> stratum <span class="number">8</span>
</code></pre><p>重启ntpd</p>
<pre><code><span class="regexp">/etc/i</span>nit.d<span class="regexp">/ntpd restart</span>
</code></pre><p>等待ntp服务器自身同步完成</p>
<pre><code><span class="title">watch</span> ntpq -p
</code></pre><a id="more"></a>
<p><img src="http://7xi6lo.com1.z0.glb.clouddn.com/centosntp1.jpg" alt=""></p>
<p>观察这个reach需要超过17<br>否则其他机器ntpdate同步的时候会报错</p>
<p><img src="http://7xi6lo.com1.z0.glb.clouddn.com/centosntp2.jpg" alt=""></p>
<p>写于: 2013年08月06日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>修改同步服务器的配置文件/etc/ntp.conf ,删除所有的内容,添加</p>
<pre><code><span class="title">restrict</span> default nomodify
server  <span class="number">127.127.1.0</span>     <span class="comment"># local clock</span>
fudge   <span class="number">127.127.1.0</span> stratum <span class="number">8</span>
</code></pre><p>重启ntpd</p>
<pre><code><span class="regexp">/etc/i</span>nit.d<span class="regexp">/ntpd restart</span>
</code></pre><p>等待ntp服务器自身同步完成</p>
<pre><code><span class="title">watch</span> ntpq -p
</code></pre>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos下多网卡做bond脚本]]></title>
    <link href="http://yoursite.com/2015/03/22/centos%E4%B8%8B%E5%A4%9A%E7%BD%91%E5%8D%A1%E5%81%9Abond%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2015/03/22/centos下多网卡做bond脚本/</id>
    <published>2015-03-22T14:54:52.000Z</published>
    <updated>2015-03-22T14:58:50.487Z</updated>
    <content type="html"><![CDATA[<p>多网卡或者单网卡形式下的网卡bonding</p>
<pre><code><span class="shebang">#! /bin/sh</span>
<span class="comment">#获取当前网卡数</span>
ethnum=`lspci | grep Ethernet | wc <span class="operator">-l</span>`
<span class="built_in">echo</span> <span class="variable">$ethnum</span>
<span class="comment">#如果网卡数小于等于1则什么都不做</span>
<span class="keyword">if</span> [ <span class="variable">$ethnum</span> -le <span class="number">1</span> ]
        <span class="keyword">then</span>
        <span class="built_in">echo</span> <span class="string">"do nothing!"</span>
<span class="keyword">fi</span>
<span class="comment">#如果网卡数大于等于2则</span>
<span class="keyword">if</span> [ <span class="variable">$ethnum</span> -ge <span class="number">2</span> ]
        <span class="keyword">then</span>
</code></pre><a id="more"></a>
<pre><code><span class="comment">#-------  添加一个bond0的网卡</span>
    echo <span class="string">"DEVICE=bond0"</span> &gt; <span class="regexp">/etc/sysconfig</span><span class="regexp">/network-scripts/ifcfg</span>-bond<span class="number">0</span>
    echo <span class="string">"ONBOOT=yes"</span> <span class="prompt">&gt;&gt; </span>/etc/sysconfig/network-scripts/ifcfg-bond<span class="number">0</span>
    echo <span class="string">"IPADDR=192.168.3.104"</span> <span class="prompt">&gt;&gt; </span>/etc/sysconfig/network-scripts/ifcfg-bond<span class="number">0</span>
    echo <span class="string">"NETMASK=255.255.0.0"</span> <span class="prompt">&gt;&gt; </span>/etc/sysconfig/network-scripts/ifcfg-bond<span class="number">0</span>
    echo <span class="string">"GATEWAY=192.168.1.1"</span> <span class="prompt">&gt;&gt; </span>/etc/sysconfig/network-scripts/ifcfg-bond<span class="number">0</span>
    echo <span class="string">"BOOTPROTO=static"</span> <span class="prompt">&gt;&gt; </span>/etc/sysconfig/network-scripts/ifcfg-bond<span class="number">0</span>
    echo <span class="string">"USERCTL=no"</span> <span class="prompt">&gt;&gt; </span>/etc/sysconfig/network-scripts/ifcfg-bond<span class="number">0</span>
<span class="comment">#--------</span>
    echo <span class="string">"ifenslave bond0"</span> <span class="prompt">&gt;&gt; </span>/etc/rc.local
<span class="comment">#--------写其他网卡的配置文件</span>
    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$(</span>seq <span class="variable">$ethnum</span>);
    <span class="keyword">do</span>
num=<span class="string">`expr $i - 1`</span>
     echo <span class="string">"BOOTPROTO=none"</span> &gt;  <span class="regexp">/etc/sysconfig</span><span class="regexp">/network-scripts/ifcfg</span>-eth<span class="variable">$num</span>
     echo <span class="string">"DEVICE=eth$num"</span> <span class="prompt">&gt;&gt;  </span>/etc/sysconfig/network-scripts/ifcfg-eth<span class="variable">$num</span>
     echo <span class="string">"ONBOOT=yes"</span> <span class="prompt">&gt;&gt;  </span>/etc/sysconfig/network-scripts/ifcfg-eth<span class="variable">$num</span>
     echo <span class="string">"MASTER=bond0"</span> <span class="prompt">&gt;&gt;  </span>/etc/sysconfig/network-scripts/ifcfg-eth<span class="variable">$num</span>
     echo <span class="string">"USERCTL=no"</span> <span class="prompt">&gt;&gt;  </span>/etc/sysconfig/network-scripts/ifcfg-eth<span class="variable">$num</span>
     echo <span class="string">"SLAVE=yes"</span> <span class="prompt">&gt;&gt;  </span>/etc/sysconfig/network-scripts/ifcfg-eth<span class="variable">$num</span>
     sed -i <span class="string">'s/ifenslave.*/&amp; eth'</span><span class="string">"$num"</span><span class="string">'/g'</span> /etc/rc.local
    done;
echo <span class="string">"alias bond0 bonding"</span> &gt; <span class="regexp">/etc/modprobe</span>.d/modprobe.conf
echo <span class="string">"options bond0 miimon=100 mode=balance-rr"</span> <span class="prompt">&gt;&gt; </span>/etc/modprobe.d/modprobe.conf
        modprobe bonding
    /etc/init.d/network   restart
fi
</code></pre><p>写于: 2013年08月06日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>多网卡或者单网卡形式下的网卡bonding</p>
<pre><code><span class="shebang">#! /bin/sh</span>
<span class="comment">#获取当前网卡数</span>
ethnum=`lspci | grep Ethernet | wc <span class="operator">-l</span>`
<span class="built_in">echo</span> <span class="variable">$ethnum</span>
<span class="comment">#如果网卡数小于等于1则什么都不做</span>
<span class="keyword">if</span> [ <span class="variable">$ethnum</span> -le <span class="number">1</span> ]
        <span class="keyword">then</span>
        <span class="built_in">echo</span> <span class="string">"do nothing!"</span>
<span class="keyword">fi</span>
<span class="comment">#如果网卡数大于等于2则</span>
<span class="keyword">if</span> [ <span class="variable">$ethnum</span> -ge <span class="number">2</span> ]
        <span class="keyword">then</span>
</code></pre>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu12.10安装sun java jdk]]></title>
    <link href="http://yoursite.com/2015/03/22/ubuntu12-10%E5%AE%89%E8%A3%85sun-java-jdk/"/>
    <id>http://yoursite.com/2015/03/22/ubuntu12-10安装sun-java-jdk/</id>
    <published>2015-03-22T14:52:27.000Z</published>
    <updated>2015-03-22T14:54:24.808Z</updated>
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository ppa:webupd8team/java  </span><br><span class="line">apt-get update  </span><br><span class="line">apt-get install oracle-java6-installer</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kangear:/etc/apt<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.6.0_41"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.6</span>.<span class="number">0</span>_41-b02)</span><br><span class="line">Java HotSpot(TM) Server VM (build <span class="number">20.14</span>-b01, mixed mode)</span><br></pre></td></tr></table></figure>
<p>说明:sun-java6-jre,sun-java6-plugin,sun-java6-fonts都同样的由的软件包 oracle-java6-installer 提供的虚拟软件包所以安装 oracle-java6-installer就可以了</p>
<p>写于: 2013年08月03日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ Bad magic number ImportError in python]]></title>
    <link href="http://yoursite.com/2015/03/22/Bad-magic-number-ImportError-in-python/"/>
    <id>http://yoursite.com/2015/03/22/Bad-magic-number-ImportError-in-python/</id>
    <published>2015-03-22T14:50:44.000Z</published>
    <updated>2015-03-22T14:52:07.719Z</updated>
    <content type="html"><![CDATA[<p>是源码编译里面版本不对，删除掉源码pyc然后重新编译就可以了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find .-name <span class="string">'*.pyc'</span>-delete</span><br><span class="line">python -m compileall .</span><br></pre></td></tr></table></figure>
<p>写于: 2013年08月01日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>是源码编译里面版本不对，删除掉源码pyc然后重新编译就可以了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[修改centos6启动动画（plymouth方式）]]></title>
    <link href="http://yoursite.com/2015/03/22/%E4%BF%AE%E6%94%B9centos6%E5%90%AF%E5%8A%A8%E5%8A%A8%E7%94%BB%EF%BC%88plymouth%E6%96%B9%E5%BC%8F%EF%BC%89/"/>
    <id>http://yoursite.com/2015/03/22/修改centos6启动动画（plymouth方式）/</id>
    <published>2015-03-22T14:38:36.000Z</published>
    <updated>2015-03-22T14:45:26.306Z</updated>
    <content type="html"><![CDATA[<p>centos6默认的启动动画是一个白蓝色的进度条,背景全黑色,现在需要对centos的启动动画进行定制<br>在查询了一些资料以后,发现有一个软件是可以对启动动画进行定制的，名字叫plymouth<br>这<br>个在centos6操作系统安装完成以后默认就带了的,主要涉及的是如下的几个操作<br>列出当前所有主题:</p>
<pre><code>plymouth-<span class="built_in">set</span>-<span class="keyword">default</span>-theme --<span class="built_in">list</span>  
</code></pre><p>主题存放目录:<br>/usr/share/plymouth/themes/</p>
<p>不重启查看主题运行效果 Ctrl + Alt + F2(一定不要在F1操作)</p>
<pre><code>plymouthd
plymouth <span class="comment">--show-splash</span>
plymouth <span class="comment">--quit</span>
</code></pre><a id="more"></a>
<p>如果想调试:</p>
<pre><code><span class="comment">plymouthd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">debug</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">debug</span><span class="literal">-</span><span class="comment">file=/tmp/plydebug</span>
<span class="comment">plymouth</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">show</span><span class="literal">-</span><span class="comment">splash</span>
<span class="comment">plymouth</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">quit</span>
</code></pre><p>如果在虚拟机下进行测试<br>需要修改grub里面的vga参数为785</p>
<p><img src="http://7xi6lo.com1.z0.glb.clouddn.com/centos动画.jpg" alt=""></p>
<p>其他环境无需设置<br>测试通过以后,进行设置:</p>
<pre><code><span class="title">plymouth</span>-set-<span class="default"><span class="keyword">default</span>-theme details        <span class="container">(后面的<span class="title">detail</span>为设置的主题)</span></span>
<span class="title">plymouth</span>-set-<span class="default"><span class="keyword">default</span>-theme -<span class="type">R</span> details     <span class="container">(本操作会将启动画面加入到内核当中,时间比较久,可以<span class="title">ps</span> -<span class="title">ef</span> 查看后台操作)</span></span>
</code></pre><p>重启电脑就可以看到效果了<br>下面是在github上找到的一个源码包,可以使用</p>
<p>链接:<a href="http://pan.baidu.com/s/1kTMMo55" target="_blank" rel="external">http://pan.baidu.com/s/1kTMMo55</a> 密码:7doc</p>
<p>centos下使用自编译主题script形式需要安装依赖包</p>
<pre><code>plymouth-graphics-libs-<span class="number">0.8</span>.<span class="number">3</span>-<span class="number">27</span><span class="class">.el6</span><span class="class">.centos</span><span class="class">.x86_64</span><span class="class">.rpm</span>
plymouth-plugin-script-<span class="number">0.8</span>.<span class="number">3</span>-<span class="number">27</span><span class="class">.el6</span><span class="class">.centos</span><span class="class">.x86_64</span><span class="class">.rpm</span>
</code></pre><p>安装完成后,将wheat解压后目录放/usr/share/plymouth/themes/下到就可以设置这个主题了</p>
<p>写于: 2013年07月30日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>centos6默认的启动动画是一个白蓝色的进度条,背景全黑色,现在需要对centos的启动动画进行定制<br>在查询了一些资料以后,发现有一个软件是可以对启动动画进行定制的，名字叫plymouth<br>这<br>个在centos6操作系统安装完成以后默认就带了的,主要涉及的是如下的几个操作<br>列出当前所有主题:</p>
<pre><code>plymouth-<span class="built_in">set</span>-<span class="keyword">default</span>-theme --<span class="built_in">list</span>  
</code></pre><p>主题存放目录:<br>/usr/share/plymouth/themes/</p>
<p>不重启查看主题运行效果 Ctrl + Alt + F2(一定不要在F1操作)</p>
<pre><code>plymouthd
plymouth <span class="comment">--show-splash</span>
plymouth <span class="comment">--quit</span>
</code></pre>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[用grub4dos来实现移动硬盘安装linux系统(图重弄)]]></title>
    <link href="http://yoursite.com/2015/03/22/%E7%94%A8grub4dos%E6%9D%A5%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85linux%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2015/03/22/用grub4dos来实现移动硬盘安装linux系统/</id>
    <published>2015-03-22T14:27:07.000Z</published>
    <updated>2015-03-22T15:01:14.250Z</updated>
    <content type="html"><![CDATA[<p>网上看了一些grub4dos相关教程,虽然相关资料很多,但是一步步做下来还是会出现一些问题,并且有些地方也没有说清楚,现在写下来供自己以后查看</p>
<p>由于使用utraliso软件做centos6.4系统盘的时候,由于centos系统盘超过4G,而utraliso软件做系统盘的时候默认文件系统ext格式,而ext格式不支持超过4G的文件,所以就无法启动,所以研究了下用grub4dos这个软件来实现移动硬盘安装linux系统</p>
<p>首先需要准备两个文件<br>grub4dos-0.4.4.zip<br>grubinst-1.1-bin-w32-2008-01-01.zip</p>
<p>解压grub4dos-0.4.4.zip</p>
<p><img src="http://fmn.rrimg.com/fmn061/20130605/2150/b_large_LQAI_39a3000004ac1262.jpg" alt=""></p>
<p>&lt;这里需要注意下，如果用移动硬盘想实现的是只装一种系统话，那么就不需要对硬盘分区，如果想装多个系统的话就可以对移动硬盘分几个区，每个分区可以放一种操作系统&gt;</p>
<p>在win7的开始菜单中搜索 计算机管理&gt;磁盘管理<br>然后选择你的移动硬盘,然后将第一个盘符标记为活动分区,这样移动硬盘这个区才能被识别,从而作为启动分区</p>
<p><img src="http://fmn.rrimg.com/fmn063/20130605/2200/b_large_VXDK_39a3000004d91262.jpg" alt=""></p>
<p>解压grubinst-1.1-bin-w32-2008-01-01.zip 运行<br>grubinst_gui.exe<br>磁盘选择你的移动硬盘<br>然后点分区列表右边的刷新<br>然后选择整个磁盘(MBR),然后点击安装</p>
<p><img src="http://fmn.rrfmn.com/fmn058/20130605/2215/b_large_1Zyp_5715000001f51263.jpg" alt=""></p>
<p>将刚刚解压得到的grub4dos-0.4.4这个目录下的chinese目录下的三个文件拷贝到你准备用来做安装系统移动硬盘,也就是刚刚设置为活动主分区那个盘还有grub4dos-0.4.4目录下menu.lst也拷贝到移动硬盘活动分区那个盘的根目录下，这个移动硬盘目录下最后看到的文件如下截图</p>
<p><img src="http://fmn.rrimg.com/fmn065/20130605/2210/b_large_qb9c_30620000080c1263.jpg" alt=""></p>
<p>如果这个时候你移动硬盘没分区的话，就将你的系统盘的iso全部解压到你的这个目录,系统iso解压可以用360压缩工具<br>然后修改menu.lst  ,如果比较熟悉,可以进行自定义,如果不熟悉,这里直接在下面加几行:</p>
<pre><code>title centos6.<span class="number">4</span> install
<span class="function"><span class="title">kernel</span> <span class="params">(hd0,<span class="number">0</span>)</span>/<span class="title">isolinux</span>/<span class="title">vmlinuz</span>
<span class="title">initrd</span> <span class="params">(hd0,<span class="number">0</span>)</span>/<span class="title">isolinux</span>/<span class="title">initrd</span>.<span class="title">img</span></span>
</code></pre><p>上面的title后面写的字段会在系统安装的时候显示，然后安装的时候选择这个centos6.4 install就行,其中(hd0,0)的前面的0是代表第一个盘,也就是你的移动盘,后面的0代表分区,代表第一个分区,如果你把系统iso解压到移动硬盘的第二个分区,那么就把这个改为1<br>isolinux/vmlinuz 就是你解压的iso里面的文件<br>到这里,系统盘已经做好了,在电脑的启动项里面选择centos6.4 install 就可以安装这个linux系统了</p>
<p>此方法对于centos6.4还是有问题 所以需要多做些工作<br>思路是把第二个分区做成linux的ext2格式就能放4G以上的iso,但是win7又无法识别ext2的盘符,所以需要做两步,第一步将第二分区格式化为ext2<br>使用这个工具:<br>ParagonPartitionManager.rar<br>使用这个工具把盘格式化为ext2<br>使用这个工具是win7下能查看ext2格式的盘符<br>Ext2Fsd-0.51.zip</p>
<p><img src="http://fmn.xnpic.com/fmn057/20130606/2145/b_large_jgCI_5038000002631263.jpg" alt=""></p>
<p><img src="http://fmn.rrimg.com/fmn060/20130606/2145/b_large_uSUd_588c000003ba1262.jpg" alt=""></p>
<p><img src="http://fmn.rrimg.com/fmn061/20130606/2155/b_large_LzJv_2a51000012851262.jpg" alt=""></p>
<p>写于: 2013年06月05日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>网上看了一些grub4dos相关教程,虽然相关资料很多,但是一步步做下来还是会出现一些问题,并且有些地方也没有说清楚,现在写下来供自己以后查看</p>
<p>由于使用utraliso软件做centos6.4系统盘的时候,由于centos系统盘超过4G,而utraliso软件]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[手机中没有该应用所需的共享库（解决手机无法安装Google plus）]]></title>
    <link href="http://yoursite.com/2015/03/22/%E6%89%8B%E6%9C%BA%E4%B8%AD%E6%B2%A1%E6%9C%89%E8%AF%A5%E5%BA%94%E7%94%A8%E6%89%80%E9%9C%80%E7%9A%84%E5%85%B1%E4%BA%AB%E5%BA%93%EF%BC%88%E8%A7%A3%E5%86%B3%E6%89%8B%E6%9C%BA%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85Google-plus%EF%BC%89/"/>
    <id>http://yoursite.com/2015/03/22/手机中没有该应用所需的共享库（解决手机无法安装Google-plus）/</id>
    <published>2015-03-22T14:24:09.000Z</published>
    <updated>2015-03-22T14:26:13.955Z</updated>
    <content type="html"><![CDATA[<p>国行安卓手机阉割了一些google服务，需要加这三个文件:</p>
<p>com.google.android.maps.jar<br>com.google.android.maps.xml<br>NetworkLocation.apk</p>
<p>你只需将上述文件放到手机中的相应位置,重启手机就好了。<br>方法:<br>首先机器要ROOT,然后用RE管理器，把要复制的文件复制到相应的位置,修改三个文件的权限,就是竖着3行,左边全选,中间最上面选上,右边全空。</p>
<pre><code>com<span class="class">.google</span><span class="class">.android</span><span class="class">.maps</span><span class="class">.jar</span>   安装到  /system/framework
google<span class="class">.android</span><span class="class">.maps</span><span class="class">.xml</span>       安装到  /system/etc/permissions
NetworkLocation<span class="class">.apk</span>           安装到  /data/app_s        
</code></pre><p>app_s目录需要自己建立</p>
<p>上述三个文件在下面这个地址可以下载到:<br><a href="http://vdisk.weibo.com/s/BFtBO" target="_blank" rel="external">http://vdisk.weibo.com/s/BFtBO</a> </p>
<p>写于: 2013年05月16日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>国行安卓手机阉割了一些google服务，需要加这三个文件:</p>
<p>com.google.android.maps.jar<br>com.google.android.maps.xml<br>NetworkLocation.apk</p>
<p>你只需将上述文件放到手]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何配置谷歌框架与市场（解决google play 闪退）]]></title>
    <link href="http://yoursite.com/2015/03/22/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E8%B0%B7%E6%AD%8C%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%B8%82%E5%9C%BA%EF%BC%88%E8%A7%A3%E5%86%B3google-play-%E9%97%AA%E9%80%80%EF%BC%89/"/>
    <id>http://yoursite.com/2015/03/22/如何配置谷歌框架与市场（解决google-play-闪退）/</id>
    <published>2015-03-22T14:18:20.000Z</published>
    <updated>2015-03-22T14:23:24.093Z</updated>
    <content type="html"><![CDATA[<p>没有谷歌电子市场。好多游戏都不能玩。像狂野之血,超凡蜘蛛侠。。。等等大型游戏。</p>
<p>大家都知道国产机的ROM包把谷歌的GMS和谐掉了,所以直接装谷歌电子市场肯定会出现闪退,这样就又牵扯到另一个基础服务——谷歌框架,估计想玩大型游戏的机友对这个词都不陌生,但是可能大家按照许多热心机友说的最终还是没能把这个电子市场搞定,接下来大家按这个步骤,可以成功,亲测。</p>
<p>步骤如下:<br>第一步:需要有root权限和RE管理器</p>
<p>第二步:下载GoogleServiesFramework.apk(谷歌<br>服务框架,必需),将GoogleServiesFramework.apk复制到文件夹/system/app 下,然后点击安装,但是貌似不点安装也行,但是权限一定得改,然后修改权限——第一行,第一个、第二个打勾,第二行,第一个打勾,第三行,第一个打勾。(这个权限一定要搞好,有可能大家都是少了这步) </p>
<p>第三步:下载谷歌电子市场，无论下载过来的电子市场文件名叫什么,都把它重命名为Vending.apk,像GoogleServiesFramework.apk一样移动到文件夹 /system/app 下,安装(这个必须安装)。然后修改权限,与GoogleServiesFramework.apk一样.</p>
<p>第四步:重启手机<br>ok,联网,打开谷歌电子市场,就可以登录了。</p>
<p>写于: 2013年05月16日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>没有谷歌电子市场。好多游戏都不能玩。像狂野之血,超凡蜘蛛侠。。。等等大型游戏。</p>
<p>大家都知道国产机的ROM包把谷歌的GMS和谐掉了,所以直接装谷歌电子市场肯定会出现闪退,这样就又牵扯到另一个基础服务——谷歌框架,估计想玩大型游戏的机友对这个词都不陌生,但是可能大]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[samba配置独立访问配置方法]]></title>
    <link href="http://yoursite.com/2015/03/22/samba%E9%85%8D%E7%BD%AE%E7%8B%AC%E7%AB%8B%E8%AE%BF%E9%97%AE%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2015/03/22/samba配置独立访问配置方法/</id>
    <published>2015-03-22T14:07:59.000Z</published>
    <updated>2015-03-22T14:17:38.328Z</updated>
    <content type="html"><![CDATA[<h3 id="配置目的:">配置目的:</h3><p>为了给指定用户一个独立访问目录</p>
<p>首先在samba服务器安装samba软件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install samba</span><br></pre></td></tr></table></figure>
<p>然后配置独立访问用户<br>配置samba用户前提需要是linux的用户,所以要创建linux用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ useradd    zp</span><br><span class="line">$ passwd     zp</span><br></pre></td></tr></table></figure>
<p>用户创建完了以后<br>需要创建samba用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ smbpasswd <span class="operator">-a</span>  zp</span><br></pre></td></tr></table></figure>
<p>然后输入密码,记住密码,这个是客户端访问samba的密码<br><a id="more"></a><br>在服务器的/etc/samba/smb.conf文件的</p>
<p>[global]字段下面添加:<br>    client lanman auth = yes<br>    security = user</p>
<p>在文件末尾添加:</p>
<pre><code>[hj]
    <span class="variable">path=</span>/hj
    <span class="variable">comment=</span>zhangpengdemulu
    <span class="variable">writeable=</span>yes
    valid <span class="variable">users =</span> @zp
</code></pre><p>修改配置文件以后,重启samba服务<br>注意 /hj 目录需要有读写执行权限,在samba服务器执行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod <span class="number">777</span> /hj</span><br></pre></td></tr></table></figure>
<h4 id="客户端访问方法">客户端访问方法</h4><p>linux下两种方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ smbmount <span class="number">192.168</span>.<span class="number">0.194</span>:/hj /zp/<span class="built_in">test</span> -o username=zp</span><br><span class="line">$ mount -t cifs //<span class="number">192.168</span>.<span class="number">0.194</span>/hj /zp/<span class="built_in">test</span> -o username=zp</span><br></pre></td></tr></table></figure></p>
<p>windows直接挂载</p>
<h3 id="附加命令:">附加命令:</h3><p>查看samba的用户</p>
<pre><code><span class="title">sudo</span> pdbedit -L
</code></pre><p>增加一个用户到samba</p>
<pre><code>sudo pdbedit -<span class="tag">a</span> username
</code></pre><p>从samba账户中删除一个用户</p>
<pre><code><span class="title">sudo</span> pdbedit -x username
</code></pre><p>显示samba账户信息</p>
<pre><code><span class="title">sudo</span> pdbedit -r username
</code></pre><p>测试samba账户是否正常</p>
<pre><code>smbclient -<span class="keyword">L</span> 192.168.1.1 -<span class="keyword">U</span> username -<span class="keyword">d</span> 3
</code></pre><p>写于: 2013年04月17日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="配置目的:">配置目的:</h3><p>为了给指定用户一个独立访问目录</p>
<p>首先在samba服务器安装samba软件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install samba</span><br></pre></td></tr></table></figure>
<p>然后配置独立访问用户<br>配置samba用户前提需要是linux的用户,所以要创建linux用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ useradd    zp</span><br><span class="line">$ passwd     zp</span><br></pre></td></tr></table></figure>
<p>用户创建完了以后<br>需要创建samba用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ smbpasswd <span class="operator">-a</span>  zp</span><br></pre></td></tr></table></figure>
<p>然后输入密码,记住密码,这个是客户端访问samba的密码<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu12.10 设置默认命令行启动]]></title>
    <link href="http://yoursite.com/2015/03/22/Ubuntu12-10-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2015/03/22/Ubuntu12-10-设置默认命令行启动/</id>
    <published>2015-03-22T14:00:27.000Z</published>
    <updated>2015-03-22T14:07:11.768Z</updated>
    <content type="html"><![CDATA[<p>在虚拟机当中安装ubuntu12.10的时候默认把图形界面给装上了,由于不需要使用桌面,所以为了省去每次进入到图形界面然后再用ctrl+F1的方式切换到命令行的步骤,希望能够默认进入的是命令行模式,那么设置的方法如下:<br>终端执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/grub</span><br></pre></td></tr></table></figure></p>
<p>将 GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash” 改为:<br>GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash text”</p>
<p>然后执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>重启ubuntu,这时默认就从命令行模式启动了。</p>
<p><img src="http://7xi6lo.com1.z0.glb.clouddn.com/ubuntu命令行.jpg" alt=""></p>
<p>写于: 2013年03月09日<br>更新于:2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在虚拟机当中安装ubuntu12.10的时候默认把图形界面给装上了,由于不需要使用桌面,所以为了省去每次进入到图形界面然后再用ctrl+F1的方式切换到命令行的步骤,希望能够默认进入的是命令行模式,那么设置的方法如下:<br>终端执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/grub</span><br></pre></td></tr></table></figure></p>
<p>将 GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash” 改为:<br>GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash text”</p>
<p>然后执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu 12.10设置root用户登录图形界面]]></title>
    <link href="http://yoursite.com/2015/03/22/Ubuntu-12-10%E8%AE%BE%E7%BD%AEroot%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/"/>
    <id>http://yoursite.com/2015/03/22/Ubuntu-12-10设置root用户登录图形界面/</id>
    <published>2015-03-22T13:53:06.000Z</published>
    <updated>2015-03-22T13:56:54.463Z</updated>
    <content type="html"><![CDATA[<p>Ubuntu 12.04默认是不允许root登录的,在登录窗口只能看到普通用户和访客登录。以普通身份登陆Ubuntu后我们需要做一些修改,普通用户登录后,修改系统配置文件需要切换到超级用户模式,在终端窗口里面输入: </p>
<pre><code>sudo  <span class="operator">-s</span>
</code></pre><p>然后输入普通用户登陆的密码,回车即可进入 root用户权限模式。<br>启用root用户的前提是需要先给root设置一个密码:</p>
<pre><code><span class="title">sudo</span> passwd root 
</code></pre><p>输入root 密码即可</p>
<a id="more"></a>
<p>然后执行: </p>
<pre><code>vi /etc/lightdm/lightdm<span class="class">.conf</span>.
</code></pre><p>增加<br>    greeter-show-manual-login=true<br>    allow-guest=false  </p>
<p>修改完的整个配置文件是</p>
<pre><code>[SeatDefaults]
<span class="variable">greeter-session=</span>unity-greeter
<span class="variable">user-session=</span>ubuntu
<span class="variable">greeter-show-manual-login=</span><span class="constant">true</span> <span class="comment">#手工输入登陆系统的用户名和密码</span>
<span class="variable">allow-guest=</span><span class="constant">false</span>   <span class="comment">#不允许guest登录</span>
</code></pre><p>然后我们启动root帐号:</p>
<pre><code><span class="title">sudo</span> passwd root
</code></pre><p>根据提示输入root帐号密码。</p>
<p>重启ubuntu,登录窗口会有“登录”选项,这时候我们就可以通过root登录了。</p>
<p>注意:如果root登陆后还没声音,又查了查,如下方法:<br>Ubuntu root登录没有声音这个问题的根本原因是使用root登录后pulseaudio没有启动。<br>将root加到pulse-access组:</p>
<pre><code>sudo usermod -<span class="tag">a</span> -G
</code></pre><p>后修改配置文件/etc/default/pulseaudio,将PULSEAUDIO_SYSTEM_START设为1</p>
<p>写于: 2012年12月14日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Ubuntu 12.04默认是不允许root登录的,在登录窗口只能看到普通用户和访客登录。以普通身份登陆Ubuntu后我们需要做一些修改,普通用户登录后,修改系统配置文件需要切换到超级用户模式,在终端窗口里面输入: </p>
<pre><code>sudo  <span class="operator">-s</span>
</code></pre><p>然后输入普通用户登陆的密码,回车即可进入 root用户权限模式。<br>启用root用户的前提是需要先给root设置一个密码:</p>
<pre><code><span class="title">sudo</span> passwd root 
</code></pre><p>输入root 密码即可</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vmware Tools is currently being installed on your system]]></title>
    <link href="http://yoursite.com/2015/03/22/Vmware-Tools-is-currently-being-installed-on-your-system/"/>
    <id>http://yoursite.com/2015/03/22/Vmware-Tools-is-currently-being-installed-on-your-system/</id>
    <published>2015-03-22T13:47:15.000Z</published>
    <updated>2015-03-22T13:52:14.548Z</updated>
    <content type="html"><![CDATA[<p>问题描述:<br>使用虚拟机安装Ubuntu过程中一直停留在“PLEASE WAIT! Vmware Tools is currently<br>being installed on your system”如下图:</p>
<p><img src="http://7xi6lo.com1.z0.glb.clouddn.com/vmware1.jpg" alt="">]</p>
<p>软件环境<br>VMWare 8<br>Ubuntu 12.10</p>
<p>解决方案如下</p>
<a id="more"></a>
<p>做下面三步操作后重启系统 :</p>
<p>Restore the /etc/issue file:</p>
<pre><code>sudo mv <span class="regexp">/etc/i</span>ssue.backup <span class="regexp">/etc/i</span>ssue
</code></pre><p>Restore the /etc/rc.local file:</p>
<pre><code>sudo mv /etc/rc<span class="class">.local</span><span class="class">.backup</span> /etc/rc.local
</code></pre><p>Restore the /etc/init/lightdm.conf file:</p>
<pre><code>sudo mv <span class="regexp">/opt/</span>vmware-tools-installer<span class="regexp">/lightdm.conf /</span>etc<span class="regexp">/init</span>
</code></pre><p>Then reboot.</p>
<p>写于: 2012年12月14日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>问题描述:<br>使用虚拟机安装Ubuntu过程中一直停留在“PLEASE WAIT! Vmware Tools is currently<br>being installed on your system”如下图:</p>
<p><img src="http://7xi6lo.com1.z0.glb.clouddn.com/vmware1.jpg" alt="">]</p>
<p>软件环境<br>VMWare 8<br>Ubuntu 12.10</p>
<p>解决方案如下</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[win7问题步骤记录器 （远程协助）]]></title>
    <link href="http://yoursite.com/2015/03/22/win7%E9%97%AE%E9%A2%98%E6%AD%A5%E9%AA%A4%E8%AE%B0%E5%BD%95%E5%99%A8-%EF%BC%88%E8%BF%9C%E7%A8%8B%E5%8D%8F%E5%8A%A9%EF%BC%89/"/>
    <id>http://yoursite.com/2015/03/22/win7问题步骤记录器-（远程协助）/</id>
    <published>2015-03-22T11:39:23.000Z</published>
    <updated>2015-03-22T11:41:20.833Z</updated>
    <content type="html"><![CDATA[<p>win7问题步骤记录器<br>有很多时候,身在远方的家人或者是朋友会要求您辅导他们计算机问题,但是又不知道该如何明确向您表达这个问题，这个处境是很令人沮丧的。<br>微软在Windows 7中添加的问题步骤记录器,将会帮助您与您的朋友摆脱沮丧。在这种情况下,您的朋友只要单击开始菜单、键入PSR,按住Enter键，再点击开始记录按钮即可。启用这项功能后,当您的朋友进行问题操作时,该记录器将会逐一记录您的朋友的操作步骤,并将它们压缩在一个MHTML文件中发送给您即可。无疑,这是个快捷、简单与高效的方法,这将有助于缩短您的故障排除时间。 </p>
<p>写于: 2012年08月23日<br>更新于: 2015年03月23日 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>win7问题步骤记录器<br>有很多时候,身在远方的家人或者是朋友会要求您辅导他们计算机问题,但是又不知道该如何明确向您表达这个问题，这个处境是很令人沮丧的。<br>微软在Windows 7中添加的问题步骤记录器,将会帮助您与您的朋友摆脱沮丧。在这种情况下,您的朋友只要单击]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[检查linux下服务器的带宽]]></title>
    <link href="http://yoursite.com/2015/03/22/%E6%A3%80%E6%9F%A5linux%E4%B8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%B8%A6%E5%AE%BD/"/>
    <id>http://yoursite.com/2015/03/22/检查linux下服务器的带宽/</id>
    <published>2015-03-22T11:25:43.000Z</published>
    <updated>2015-03-22T11:33:25.168Z</updated>
    <content type="html"><![CDATA[<p>设想:公司 A 有一个名为 bsdocfs 的存储服务器,并通过名为 beckham 的客户端节点装载 NFS。公司 A 确定他们需要从 bsdocfs得到更多的带宽,因为有大量的节点需要访问 bsdocfs 的共享文件系统。<br>实现此操作的最常用和最便宜的方式是将两个千兆网卡组合在一起。这是最便宜的,因为您通常会有一个额外的可用 NIC 和一个额外的端口。<br>所以采取此这个方法。不过现在的问题是?到底需要多少带宽?</p>
<p>千兆网卡以太网理论上的限制是 128MBit/s。这个数字从何而来,看看这些计算:<br>1Gb = 1024Mb;1024Mb/8 = 128MB;”b” = “bits,”、”B” = “bytes”</p>
<p>但实际看到的是什么呢,有什么好的测量方法呢,我推荐一个工具 iperf。可以按照以下方法获得 iperf</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://dast.nlanr.net/Projects/Iperf2.<span class="number">0</span>/iperf-<span class="number">2.0</span>.<span class="number">2</span>.tar.gz</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>或者:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install iperf</span><br></pre></td></tr></table></figure>
<p>需要在 bsdocfs 和 beckham 均可见的共享文件系统上安装此工具,或者在两个节点上编译并安装。<br>在 bsdocfs 上,运行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iperf <span class="operator">-s</span> <span class="operator">-f</span> M</span><br></pre></td></tr></table></figure>
<p>这台机器将用作服务器并以 MBit/s 为单位输出执行速度。<br>在 beckham 节点上,运行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iperf -c bsdocfs -P <span class="number">4</span> <span class="operator">-f</span> M -w <span class="number">256</span>k -t <span class="number">60</span></span><br></pre></td></tr></table></figure>
<p>两个屏幕上的结果都指示了速度是多少。在使用千兆网卡的普通服务器上,可能会看到速度约为 112MBit/s。这是 TCP 堆栈和物理电缆中的常用带宽。通过以端到端的方式连接两台服务器,每台服务器使用两个联结的以太网卡,我获得了约 220MBit/s 的带宽。<br>事实上,在联结的网络上看到的 NFS 约为 150-160MBit/s。这仍然表示带宽可以达到预期效果。如果看到更小的值,则应该检查是否有问题。</p>
<p>我最近碰到一种情况,即通过连接驱动程序连接两个使用了不同驱动程序的 NIC。这导致性能非常低,带宽约为 20MBit/s,比不连接以太网卡时的带宽还小,做bond聚合一定要使用同型号网卡。</p>
<p>写于: 2013年08月07日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>设想:公司 A 有一个名为 bsdocfs 的存储服务器,并通过名为 beckham 的客户端节点装载 NFS。公司 A 确定他们需要从 bsdocfs得到更多的带宽,因为有大量的节点需要访问 bsdocfs 的共享文件系统。<br>实现此操作的最常用和最便宜的方式是将两个千兆网卡组合在一起。这是最便宜的,因为您通常会有一个额外的可用 NIC 和一个额外的端口。<br>所以采取此这个方法。不过现在的问题是?到底需要多少带宽?</p>
<p>千兆网卡以太网理论上的限制是 128MBit/s。这个数字从何而来,看看这些计算:<br>1Gb = 1024Mb;1024Mb/8 = 128MB;”b” = “bits,”、”B” = “bytes”</p>
<p>但实际看到的是什么呢,有什么好的测量方法呢,我推荐一个工具 iperf。可以按照以下方法获得 iperf</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://dast.nlanr.net/Projects/Iperf2.<span class="number">0</span>/iperf-<span class="number">2.0</span>.<span class="number">2</span>.tar.gz</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux利用screen进行shell下的屏幕协作]]></title>
    <link href="http://yoursite.com/2015/03/22/linux%E5%88%A9%E7%94%A8screen%E8%BF%9B%E8%A1%8Cshell%E4%B8%8B%E7%9A%84%E5%B1%8F%E5%B9%95%E5%8D%8F%E4%BD%9C/"/>
    <id>http://yoursite.com/2015/03/22/linux利用screen进行shell下的屏幕协作/</id>
    <published>2015-03-22T11:22:22.000Z</published>
    <updated>2015-03-22T11:24:55.108Z</updated>
    <content type="html"><![CDATA[<p>我们都知道linux是支持多终端并行处理的<br>但是某些时候我们可能有比较特殊的需求需要两个人同时处理一个终端,screen 正好能满足这个要求</p>
<p>首先需要安装screen软件:</p>
<p>debian和ubuntu下面都是通过:</p>
<pre><code>apt-<span class="keyword">get</span> install screen
</code></pre><p>进行安装的.</p>
<a id="more"></a>
<p>假如现在有a和b需要进行屏幕协作,那么操作步骤如下:<br>a在终端运行:</p>
<pre><code><span class="title">screen</span> -S   zp        
</code></pre><p>b然后在终端运行:   </p>
<pre><code><span class="title">screen</span> -x  zp  
</code></pre><p>这个时候两边的用户的操作是实时同步的。</p>
<p>写于: 2012年08月07日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们都知道linux是支持多终端并行处理的<br>但是某些时候我们可能有比较特殊的需求需要两个人同时处理一个终端,screen 正好能满足这个要求</p>
<p>首先需要安装screen软件:</p>
<p>debian和ubuntu下面都是通过:</p>
<pre><code>apt-<span class="keyword">get</span> install screen
</code></pre><p>进行安装的.</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Ganglia监控系统监控集群(debian)]]></title>
    <link href="http://yoursite.com/2015/03/22/%E4%BD%BF%E7%94%A8Ganglia%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4-debian/"/>
    <id>http://yoursite.com/2015/03/22/使用Ganglia监控系统监控集群-debian/</id>
    <published>2015-03-22T09:20:06.000Z</published>
    <updated>2015-03-22T11:21:27.329Z</updated>
    <content type="html"><![CDATA[<p>anglia是一个集群监控软件,底层使用RRDTool获得数据。<br>Ganglia分为ganglia-monitor和gmetad两部分,前者运行在集群每个节点上(被监控机器)收集RRDTool产生的数据,后者运行在监控服务器上,收集每个ganglia-monitor的数据,通过Web UI可以看到直观的各种图表。</p>
<p>在debian上安装Ganglia非常简单,首先安装下面三个包。因为要使用Web服务器才能看到图表,所以如果没有安装apache的话,会自动安装apache服务器。</p>
<pre><code>apt-<span class="keyword">get</span> installganglia-monitor  <span class="comment">#这个包安装在被监控机器即可</span>
apt-<span class="keyword">get</span> install ganglia-webfront gmetad  <span class="comment">#这两个包安装在监控服务器，前者提供web页面，后者收集其他机器的监控数据</span>
</code></pre><p>被监控安装完成之后，gmond服务会运行起来，使用下面的命令可以启动这个服务。</p>
<pre><code><span class="regexp">/etc/i</span>nit.d<span class="regexp">/ganglia-monitor restart     </span>
</code></pre><p>(配置文件的路径在/etc/ganglia/gmond.conf)基本不用配置就可以启用</p>
<a id="more"></a>
<p>配置监控服务器(展示页面的服务器)</p>
<p>因为ganglia-webfront这个包默认将Web相关的代码安装在”/usr/share/ganglia-webfrontend/”路径下,这样apache访问不到。可以使用软链接或者直接将目录移到”/var/www/”目录下。</p>
<pre><code>ln-s <span class="regexp">/usr/</span>share<span class="regexp">/ganglia-webfrontend/</span><span class="regexp">/var/</span>www<span class="regexp">/ganglia</span>
</code></pre><p>接着在浏览器输入”<a href="http://localhost/ganglia”就可以看到Web" target="_blank" rel="external">http://localhost/ganglia”就可以看到Web</a> UI了</p>
<p>需要监控更多机器的时候，只需要在机器上安装ganglia-monitor 启动服务即可</p>
<p>补充说明:<br>一、主页的显示的时间为格林威治时间,所以看起来很奇怪,想要显示为本地时间,需要修改提供网页机器的php.ini文件<br>路径为:/etc/php5/apache2/php.ini </p>
<p>将[Date]下的设置为date.timezone =Asia/Shanghai</p>
<p>重启apache2 </p>
<pre><code><span class="regexp">/etc/i</span>nit.d<span class="regexp">/apache2 restart</span>
</code></pre><p>再看主页,时间变成了当前机器时间</p>
<p>二、python监控插件的扩展<br>为了确保Ganglia的安装有了Python支持的设置,检查一下以下设置<br>gmond.conf 有一行  include (“/etc/ganglia/conf.d/*.conf”) ,这是你应该放置.conf格式的python模块配置文件所在的目录。<br>modpython.conf 这个文件应该存在于/etc/ganglia/conf.d 中,它包含了pyconf文件的所在位置<br>modpython.so应该在/usr/lib/ganglia中<br>/usr/lib/ganglia/python_modules这个目录应该存在,这是你放置以.py结尾的python模块文件所在的目录</p>
<p>写于: 2012年08月02日<br>更新于: 2015年03月22日</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>anglia是一个集群监控软件,底层使用RRDTool获得数据。<br>Ganglia分为ganglia-monitor和gmetad两部分,前者运行在集群每个节点上(被监控机器)收集RRDTool产生的数据,后者运行在监控服务器上,收集每个ganglia-monitor的数据,通过Web UI可以看到直观的各种图表。</p>
<p>在debian上安装Ganglia非常简单,首先安装下面三个包。因为要使用Web服务器才能看到图表,所以如果没有安装apache的话,会自动安装apache服务器。</p>
<pre><code>apt-<span class="keyword">get</span> installganglia-monitor  <span class="comment">#这个包安装在被监控机器即可</span>
apt-<span class="keyword">get</span> install ganglia-webfront gmetad  <span class="comment">#这两个包安装在监控服务器，前者提供web页面，后者收集其他机器的监控数据</span>
</code></pre><p>被监控安装完成之后，gmond服务会运行起来，使用下面的命令可以启动这个服务。</p>
<pre><code><span class="regexp">/etc/i</span>nit.d<span class="regexp">/ganglia-monitor restart     </span>
</code></pre><p>(配置文件的路径在/etc/ganglia/gmond.conf)基本不用配置就可以启用</p>]]>
    
    </summary>
    
  </entry>
  
</feed>